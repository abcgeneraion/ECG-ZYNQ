// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fc_HH_
#define _fc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fc_mul_mul_16s_16bkb.h"
#include "fc_CTRL_s_axi.h"
#include "fc_IN_r_m_axi.h"
#include "fc_W_m_axi.h"
#include "fc_B_m_axi.h"
#include "fc_OUT_r_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_IN_R_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_IN_R_ID_WIDTH = 1,
         unsigned int C_M_AXI_IN_R_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_IN_R_DATA_WIDTH = 32,
         unsigned int C_M_AXI_IN_R_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_IN_R_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_IN_R_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_IN_R_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_W_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_W_ID_WIDTH = 1,
         unsigned int C_M_AXI_W_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_W_DATA_WIDTH = 32,
         unsigned int C_M_AXI_W_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_W_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_W_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_W_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_B_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_B_ID_WIDTH = 1,
         unsigned int C_M_AXI_B_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_B_DATA_WIDTH = 32,
         unsigned int C_M_AXI_B_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_B_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_B_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_B_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUT_R_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_OUT_R_ID_WIDTH = 1,
         unsigned int C_M_AXI_OUT_R_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUT_R_DATA_WIDTH = 32,
         unsigned int C_M_AXI_OUT_R_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUT_R_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUT_R_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUT_R_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CTRL_DATA_WIDTH = 32>
struct fc : public sc_module {
    // Port declarations 200
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_IN_r_AWVALID;
    sc_in< sc_logic > m_axi_IN_r_AWREADY;
    sc_out< sc_uint<C_M_AXI_IN_R_ADDR_WIDTH> > m_axi_IN_r_AWADDR;
    sc_out< sc_uint<C_M_AXI_IN_R_ID_WIDTH> > m_axi_IN_r_AWID;
    sc_out< sc_lv<8> > m_axi_IN_r_AWLEN;
    sc_out< sc_lv<3> > m_axi_IN_r_AWSIZE;
    sc_out< sc_lv<2> > m_axi_IN_r_AWBURST;
    sc_out< sc_lv<2> > m_axi_IN_r_AWLOCK;
    sc_out< sc_lv<4> > m_axi_IN_r_AWCACHE;
    sc_out< sc_lv<3> > m_axi_IN_r_AWPROT;
    sc_out< sc_lv<4> > m_axi_IN_r_AWQOS;
    sc_out< sc_lv<4> > m_axi_IN_r_AWREGION;
    sc_out< sc_uint<C_M_AXI_IN_R_AWUSER_WIDTH> > m_axi_IN_r_AWUSER;
    sc_out< sc_logic > m_axi_IN_r_WVALID;
    sc_in< sc_logic > m_axi_IN_r_WREADY;
    sc_out< sc_uint<C_M_AXI_IN_R_DATA_WIDTH> > m_axi_IN_r_WDATA;
    sc_out< sc_uint<C_M_AXI_IN_R_DATA_WIDTH/8> > m_axi_IN_r_WSTRB;
    sc_out< sc_logic > m_axi_IN_r_WLAST;
    sc_out< sc_uint<C_M_AXI_IN_R_ID_WIDTH> > m_axi_IN_r_WID;
    sc_out< sc_uint<C_M_AXI_IN_R_WUSER_WIDTH> > m_axi_IN_r_WUSER;
    sc_out< sc_logic > m_axi_IN_r_ARVALID;
    sc_in< sc_logic > m_axi_IN_r_ARREADY;
    sc_out< sc_uint<C_M_AXI_IN_R_ADDR_WIDTH> > m_axi_IN_r_ARADDR;
    sc_out< sc_uint<C_M_AXI_IN_R_ID_WIDTH> > m_axi_IN_r_ARID;
    sc_out< sc_lv<8> > m_axi_IN_r_ARLEN;
    sc_out< sc_lv<3> > m_axi_IN_r_ARSIZE;
    sc_out< sc_lv<2> > m_axi_IN_r_ARBURST;
    sc_out< sc_lv<2> > m_axi_IN_r_ARLOCK;
    sc_out< sc_lv<4> > m_axi_IN_r_ARCACHE;
    sc_out< sc_lv<3> > m_axi_IN_r_ARPROT;
    sc_out< sc_lv<4> > m_axi_IN_r_ARQOS;
    sc_out< sc_lv<4> > m_axi_IN_r_ARREGION;
    sc_out< sc_uint<C_M_AXI_IN_R_ARUSER_WIDTH> > m_axi_IN_r_ARUSER;
    sc_in< sc_logic > m_axi_IN_r_RVALID;
    sc_out< sc_logic > m_axi_IN_r_RREADY;
    sc_in< sc_uint<C_M_AXI_IN_R_DATA_WIDTH> > m_axi_IN_r_RDATA;
    sc_in< sc_logic > m_axi_IN_r_RLAST;
    sc_in< sc_uint<C_M_AXI_IN_R_ID_WIDTH> > m_axi_IN_r_RID;
    sc_in< sc_uint<C_M_AXI_IN_R_RUSER_WIDTH> > m_axi_IN_r_RUSER;
    sc_in< sc_lv<2> > m_axi_IN_r_RRESP;
    sc_in< sc_logic > m_axi_IN_r_BVALID;
    sc_out< sc_logic > m_axi_IN_r_BREADY;
    sc_in< sc_lv<2> > m_axi_IN_r_BRESP;
    sc_in< sc_uint<C_M_AXI_IN_R_ID_WIDTH> > m_axi_IN_r_BID;
    sc_in< sc_uint<C_M_AXI_IN_R_BUSER_WIDTH> > m_axi_IN_r_BUSER;
    sc_out< sc_logic > m_axi_W_AWVALID;
    sc_in< sc_logic > m_axi_W_AWREADY;
    sc_out< sc_uint<C_M_AXI_W_ADDR_WIDTH> > m_axi_W_AWADDR;
    sc_out< sc_uint<C_M_AXI_W_ID_WIDTH> > m_axi_W_AWID;
    sc_out< sc_lv<8> > m_axi_W_AWLEN;
    sc_out< sc_lv<3> > m_axi_W_AWSIZE;
    sc_out< sc_lv<2> > m_axi_W_AWBURST;
    sc_out< sc_lv<2> > m_axi_W_AWLOCK;
    sc_out< sc_lv<4> > m_axi_W_AWCACHE;
    sc_out< sc_lv<3> > m_axi_W_AWPROT;
    sc_out< sc_lv<4> > m_axi_W_AWQOS;
    sc_out< sc_lv<4> > m_axi_W_AWREGION;
    sc_out< sc_uint<C_M_AXI_W_AWUSER_WIDTH> > m_axi_W_AWUSER;
    sc_out< sc_logic > m_axi_W_WVALID;
    sc_in< sc_logic > m_axi_W_WREADY;
    sc_out< sc_uint<C_M_AXI_W_DATA_WIDTH> > m_axi_W_WDATA;
    sc_out< sc_uint<C_M_AXI_W_DATA_WIDTH/8> > m_axi_W_WSTRB;
    sc_out< sc_logic > m_axi_W_WLAST;
    sc_out< sc_uint<C_M_AXI_W_ID_WIDTH> > m_axi_W_WID;
    sc_out< sc_uint<C_M_AXI_W_WUSER_WIDTH> > m_axi_W_WUSER;
    sc_out< sc_logic > m_axi_W_ARVALID;
    sc_in< sc_logic > m_axi_W_ARREADY;
    sc_out< sc_uint<C_M_AXI_W_ADDR_WIDTH> > m_axi_W_ARADDR;
    sc_out< sc_uint<C_M_AXI_W_ID_WIDTH> > m_axi_W_ARID;
    sc_out< sc_lv<8> > m_axi_W_ARLEN;
    sc_out< sc_lv<3> > m_axi_W_ARSIZE;
    sc_out< sc_lv<2> > m_axi_W_ARBURST;
    sc_out< sc_lv<2> > m_axi_W_ARLOCK;
    sc_out< sc_lv<4> > m_axi_W_ARCACHE;
    sc_out< sc_lv<3> > m_axi_W_ARPROT;
    sc_out< sc_lv<4> > m_axi_W_ARQOS;
    sc_out< sc_lv<4> > m_axi_W_ARREGION;
    sc_out< sc_uint<C_M_AXI_W_ARUSER_WIDTH> > m_axi_W_ARUSER;
    sc_in< sc_logic > m_axi_W_RVALID;
    sc_out< sc_logic > m_axi_W_RREADY;
    sc_in< sc_uint<C_M_AXI_W_DATA_WIDTH> > m_axi_W_RDATA;
    sc_in< sc_logic > m_axi_W_RLAST;
    sc_in< sc_uint<C_M_AXI_W_ID_WIDTH> > m_axi_W_RID;
    sc_in< sc_uint<C_M_AXI_W_RUSER_WIDTH> > m_axi_W_RUSER;
    sc_in< sc_lv<2> > m_axi_W_RRESP;
    sc_in< sc_logic > m_axi_W_BVALID;
    sc_out< sc_logic > m_axi_W_BREADY;
    sc_in< sc_lv<2> > m_axi_W_BRESP;
    sc_in< sc_uint<C_M_AXI_W_ID_WIDTH> > m_axi_W_BID;
    sc_in< sc_uint<C_M_AXI_W_BUSER_WIDTH> > m_axi_W_BUSER;
    sc_out< sc_logic > m_axi_B_AWVALID;
    sc_in< sc_logic > m_axi_B_AWREADY;
    sc_out< sc_uint<C_M_AXI_B_ADDR_WIDTH> > m_axi_B_AWADDR;
    sc_out< sc_uint<C_M_AXI_B_ID_WIDTH> > m_axi_B_AWID;
    sc_out< sc_lv<8> > m_axi_B_AWLEN;
    sc_out< sc_lv<3> > m_axi_B_AWSIZE;
    sc_out< sc_lv<2> > m_axi_B_AWBURST;
    sc_out< sc_lv<2> > m_axi_B_AWLOCK;
    sc_out< sc_lv<4> > m_axi_B_AWCACHE;
    sc_out< sc_lv<3> > m_axi_B_AWPROT;
    sc_out< sc_lv<4> > m_axi_B_AWQOS;
    sc_out< sc_lv<4> > m_axi_B_AWREGION;
    sc_out< sc_uint<C_M_AXI_B_AWUSER_WIDTH> > m_axi_B_AWUSER;
    sc_out< sc_logic > m_axi_B_WVALID;
    sc_in< sc_logic > m_axi_B_WREADY;
    sc_out< sc_uint<C_M_AXI_B_DATA_WIDTH> > m_axi_B_WDATA;
    sc_out< sc_uint<C_M_AXI_B_DATA_WIDTH/8> > m_axi_B_WSTRB;
    sc_out< sc_logic > m_axi_B_WLAST;
    sc_out< sc_uint<C_M_AXI_B_ID_WIDTH> > m_axi_B_WID;
    sc_out< sc_uint<C_M_AXI_B_WUSER_WIDTH> > m_axi_B_WUSER;
    sc_out< sc_logic > m_axi_B_ARVALID;
    sc_in< sc_logic > m_axi_B_ARREADY;
    sc_out< sc_uint<C_M_AXI_B_ADDR_WIDTH> > m_axi_B_ARADDR;
    sc_out< sc_uint<C_M_AXI_B_ID_WIDTH> > m_axi_B_ARID;
    sc_out< sc_lv<8> > m_axi_B_ARLEN;
    sc_out< sc_lv<3> > m_axi_B_ARSIZE;
    sc_out< sc_lv<2> > m_axi_B_ARBURST;
    sc_out< sc_lv<2> > m_axi_B_ARLOCK;
    sc_out< sc_lv<4> > m_axi_B_ARCACHE;
    sc_out< sc_lv<3> > m_axi_B_ARPROT;
    sc_out< sc_lv<4> > m_axi_B_ARQOS;
    sc_out< sc_lv<4> > m_axi_B_ARREGION;
    sc_out< sc_uint<C_M_AXI_B_ARUSER_WIDTH> > m_axi_B_ARUSER;
    sc_in< sc_logic > m_axi_B_RVALID;
    sc_out< sc_logic > m_axi_B_RREADY;
    sc_in< sc_uint<C_M_AXI_B_DATA_WIDTH> > m_axi_B_RDATA;
    sc_in< sc_logic > m_axi_B_RLAST;
    sc_in< sc_uint<C_M_AXI_B_ID_WIDTH> > m_axi_B_RID;
    sc_in< sc_uint<C_M_AXI_B_RUSER_WIDTH> > m_axi_B_RUSER;
    sc_in< sc_lv<2> > m_axi_B_RRESP;
    sc_in< sc_logic > m_axi_B_BVALID;
    sc_out< sc_logic > m_axi_B_BREADY;
    sc_in< sc_lv<2> > m_axi_B_BRESP;
    sc_in< sc_uint<C_M_AXI_B_ID_WIDTH> > m_axi_B_BID;
    sc_in< sc_uint<C_M_AXI_B_BUSER_WIDTH> > m_axi_B_BUSER;
    sc_out< sc_logic > m_axi_OUT_r_AWVALID;
    sc_in< sc_logic > m_axi_OUT_r_AWREADY;
    sc_out< sc_uint<C_M_AXI_OUT_R_ADDR_WIDTH> > m_axi_OUT_r_AWADDR;
    sc_out< sc_uint<C_M_AXI_OUT_R_ID_WIDTH> > m_axi_OUT_r_AWID;
    sc_out< sc_lv<8> > m_axi_OUT_r_AWLEN;
    sc_out< sc_lv<3> > m_axi_OUT_r_AWSIZE;
    sc_out< sc_lv<2> > m_axi_OUT_r_AWBURST;
    sc_out< sc_lv<2> > m_axi_OUT_r_AWLOCK;
    sc_out< sc_lv<4> > m_axi_OUT_r_AWCACHE;
    sc_out< sc_lv<3> > m_axi_OUT_r_AWPROT;
    sc_out< sc_lv<4> > m_axi_OUT_r_AWQOS;
    sc_out< sc_lv<4> > m_axi_OUT_r_AWREGION;
    sc_out< sc_uint<C_M_AXI_OUT_R_AWUSER_WIDTH> > m_axi_OUT_r_AWUSER;
    sc_out< sc_logic > m_axi_OUT_r_WVALID;
    sc_in< sc_logic > m_axi_OUT_r_WREADY;
    sc_out< sc_uint<C_M_AXI_OUT_R_DATA_WIDTH> > m_axi_OUT_r_WDATA;
    sc_out< sc_uint<C_M_AXI_OUT_R_DATA_WIDTH/8> > m_axi_OUT_r_WSTRB;
    sc_out< sc_logic > m_axi_OUT_r_WLAST;
    sc_out< sc_uint<C_M_AXI_OUT_R_ID_WIDTH> > m_axi_OUT_r_WID;
    sc_out< sc_uint<C_M_AXI_OUT_R_WUSER_WIDTH> > m_axi_OUT_r_WUSER;
    sc_out< sc_logic > m_axi_OUT_r_ARVALID;
    sc_in< sc_logic > m_axi_OUT_r_ARREADY;
    sc_out< sc_uint<C_M_AXI_OUT_R_ADDR_WIDTH> > m_axi_OUT_r_ARADDR;
    sc_out< sc_uint<C_M_AXI_OUT_R_ID_WIDTH> > m_axi_OUT_r_ARID;
    sc_out< sc_lv<8> > m_axi_OUT_r_ARLEN;
    sc_out< sc_lv<3> > m_axi_OUT_r_ARSIZE;
    sc_out< sc_lv<2> > m_axi_OUT_r_ARBURST;
    sc_out< sc_lv<2> > m_axi_OUT_r_ARLOCK;
    sc_out< sc_lv<4> > m_axi_OUT_r_ARCACHE;
    sc_out< sc_lv<3> > m_axi_OUT_r_ARPROT;
    sc_out< sc_lv<4> > m_axi_OUT_r_ARQOS;
    sc_out< sc_lv<4> > m_axi_OUT_r_ARREGION;
    sc_out< sc_uint<C_M_AXI_OUT_R_ARUSER_WIDTH> > m_axi_OUT_r_ARUSER;
    sc_in< sc_logic > m_axi_OUT_r_RVALID;
    sc_out< sc_logic > m_axi_OUT_r_RREADY;
    sc_in< sc_uint<C_M_AXI_OUT_R_DATA_WIDTH> > m_axi_OUT_r_RDATA;
    sc_in< sc_logic > m_axi_OUT_r_RLAST;
    sc_in< sc_uint<C_M_AXI_OUT_R_ID_WIDTH> > m_axi_OUT_r_RID;
    sc_in< sc_uint<C_M_AXI_OUT_R_RUSER_WIDTH> > m_axi_OUT_r_RUSER;
    sc_in< sc_lv<2> > m_axi_OUT_r_RRESP;
    sc_in< sc_logic > m_axi_OUT_r_BVALID;
    sc_out< sc_logic > m_axi_OUT_r_BREADY;
    sc_in< sc_lv<2> > m_axi_OUT_r_BRESP;
    sc_in< sc_uint<C_M_AXI_OUT_R_ID_WIDTH> > m_axi_OUT_r_BID;
    sc_in< sc_uint<C_M_AXI_OUT_R_BUSER_WIDTH> > m_axi_OUT_r_BUSER;
    sc_in< sc_logic > s_axi_CTRL_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_WVALID;
    sc_out< sc_logic > s_axi_CTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_DATA_WIDTH/8> > s_axi_CTRL_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_ADDR_WIDTH> > s_axi_CTRL_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_RVALID;
    sc_in< sc_logic > s_axi_CTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_DATA_WIDTH> > s_axi_CTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<32> > ap_var_for_const11;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const10;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const9;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const12;
    sc_signal< sc_lv<16> > ap_var_for_const8;


    // Module declarations
    fc(sc_module_name name);
    SC_HAS_PROCESS(fc);

    ~fc();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fc_CTRL_s_axi<C_S_AXI_CTRL_ADDR_WIDTH,C_S_AXI_CTRL_DATA_WIDTH>* fc_CTRL_s_axi_U;
    fc_IN_r_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_IN_R_ID_WIDTH,C_M_AXI_IN_R_ADDR_WIDTH,C_M_AXI_IN_R_DATA_WIDTH,C_M_AXI_IN_R_AWUSER_WIDTH,C_M_AXI_IN_R_ARUSER_WIDTH,C_M_AXI_IN_R_WUSER_WIDTH,C_M_AXI_IN_R_RUSER_WIDTH,C_M_AXI_IN_R_BUSER_WIDTH,C_M_AXI_IN_R_USER_VALUE,C_M_AXI_IN_R_PROT_VALUE,C_M_AXI_IN_R_CACHE_VALUE>* fc_IN_r_m_axi_U;
    fc_W_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_W_ID_WIDTH,C_M_AXI_W_ADDR_WIDTH,C_M_AXI_W_DATA_WIDTH,C_M_AXI_W_AWUSER_WIDTH,C_M_AXI_W_ARUSER_WIDTH,C_M_AXI_W_WUSER_WIDTH,C_M_AXI_W_RUSER_WIDTH,C_M_AXI_W_BUSER_WIDTH,C_M_AXI_W_USER_VALUE,C_M_AXI_W_PROT_VALUE,C_M_AXI_W_CACHE_VALUE>* fc_W_m_axi_U;
    fc_B_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_B_ID_WIDTH,C_M_AXI_B_ADDR_WIDTH,C_M_AXI_B_DATA_WIDTH,C_M_AXI_B_AWUSER_WIDTH,C_M_AXI_B_ARUSER_WIDTH,C_M_AXI_B_WUSER_WIDTH,C_M_AXI_B_RUSER_WIDTH,C_M_AXI_B_BUSER_WIDTH,C_M_AXI_B_USER_VALUE,C_M_AXI_B_PROT_VALUE,C_M_AXI_B_CACHE_VALUE>* fc_B_m_axi_U;
    fc_OUT_r_m_axi<0,16,32,5,16,16,16,16,C_M_AXI_OUT_R_ID_WIDTH,C_M_AXI_OUT_R_ADDR_WIDTH,C_M_AXI_OUT_R_DATA_WIDTH,C_M_AXI_OUT_R_AWUSER_WIDTH,C_M_AXI_OUT_R_ARUSER_WIDTH,C_M_AXI_OUT_R_WUSER_WIDTH,C_M_AXI_OUT_R_RUSER_WIDTH,C_M_AXI_OUT_R_BUSER_WIDTH,C_M_AXI_OUT_R_USER_VALUE,C_M_AXI_OUT_R_PROT_VALUE,C_M_AXI_OUT_R_CACHE_VALUE>* fc_OUT_r_m_axi_U;
    fc_mul_mul_16s_16bkb<1,1,16,16,32>* fc_mul_mul_16s_16bkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<17> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > in_V;
    sc_signal< sc_lv<32> > weight_V;
    sc_signal< sc_lv<32> > bias_V;
    sc_signal< sc_lv<32> > out_V;
    sc_signal< sc_logic > IN_r_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > IN_r_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > W_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > W_blk_n_R;
    sc_signal< sc_logic > B_blk_n_AR;
    sc_signal< sc_logic > B_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > OUT_r_blk_n_AW;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln13_1_reg_731;
    sc_signal< sc_logic > OUT_r_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > icmp_ln13_1_reg_731_pp0_iter2_reg;
    sc_signal< sc_logic > OUT_r_blk_n_B;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<1> > icmp_ln13_1_reg_731_pp0_iter7_reg;
    sc_signal< sc_logic > IN_r_AWREADY;
    sc_signal< sc_logic > IN_r_WREADY;
    sc_signal< sc_logic > IN_r_ARVALID;
    sc_signal< sc_logic > IN_r_ARREADY;
    sc_signal< sc_logic > IN_r_RVALID;
    sc_signal< sc_logic > IN_r_RREADY;
    sc_signal< sc_lv<16> > IN_r_RDATA;
    sc_signal< sc_logic > IN_r_RLAST;
    sc_signal< sc_lv<1> > IN_r_RID;
    sc_signal< sc_lv<1> > IN_r_RUSER;
    sc_signal< sc_lv<2> > IN_r_RRESP;
    sc_signal< sc_logic > IN_r_BVALID;
    sc_signal< sc_lv<2> > IN_r_BRESP;
    sc_signal< sc_lv<1> > IN_r_BID;
    sc_signal< sc_lv<1> > IN_r_BUSER;
    sc_signal< sc_logic > W_AWREADY;
    sc_signal< sc_logic > W_WREADY;
    sc_signal< sc_logic > W_ARVALID;
    sc_signal< sc_logic > W_ARREADY;
    sc_signal< sc_logic > W_RVALID;
    sc_signal< sc_logic > W_RREADY;
    sc_signal< sc_lv<16> > W_RDATA;
    sc_signal< sc_logic > W_RLAST;
    sc_signal< sc_lv<1> > W_RID;
    sc_signal< sc_lv<1> > W_RUSER;
    sc_signal< sc_lv<2> > W_RRESP;
    sc_signal< sc_logic > W_BVALID;
    sc_signal< sc_lv<2> > W_BRESP;
    sc_signal< sc_lv<1> > W_BID;
    sc_signal< sc_lv<1> > W_BUSER;
    sc_signal< sc_logic > B_AWREADY;
    sc_signal< sc_logic > B_WREADY;
    sc_signal< sc_logic > B_ARVALID;
    sc_signal< sc_logic > B_ARREADY;
    sc_signal< sc_logic > B_RVALID;
    sc_signal< sc_logic > B_RREADY;
    sc_signal< sc_lv<16> > B_RDATA;
    sc_signal< sc_logic > B_RLAST;
    sc_signal< sc_lv<1> > B_RID;
    sc_signal< sc_lv<1> > B_RUSER;
    sc_signal< sc_lv<2> > B_RRESP;
    sc_signal< sc_logic > B_BVALID;
    sc_signal< sc_lv<2> > B_BRESP;
    sc_signal< sc_lv<1> > B_BID;
    sc_signal< sc_lv<1> > B_BUSER;
    sc_signal< sc_logic > OUT_r_AWVALID;
    sc_signal< sc_logic > OUT_r_AWREADY;
    sc_signal< sc_logic > OUT_r_WVALID;
    sc_signal< sc_logic > OUT_r_WREADY;
    sc_signal< sc_logic > OUT_r_ARREADY;
    sc_signal< sc_logic > OUT_r_RVALID;
    sc_signal< sc_lv<16> > OUT_r_RDATA;
    sc_signal< sc_logic > OUT_r_RLAST;
    sc_signal< sc_lv<1> > OUT_r_RID;
    sc_signal< sc_lv<1> > OUT_r_RUSER;
    sc_signal< sc_lv<2> > OUT_r_RRESP;
    sc_signal< sc_logic > OUT_r_BVALID;
    sc_signal< sc_logic > OUT_r_BREADY;
    sc_signal< sc_lv<2> > OUT_r_BRESP;
    sc_signal< sc_lv<1> > OUT_r_BID;
    sc_signal< sc_lv<1> > OUT_r_BUSER;
    sc_signal< sc_lv<13> > j_010_reg_248;
    sc_signal< sc_lv<16> > p_Val2_9_reg_259;
    sc_signal< sc_lv<31> > tmp_3_reg_658;
    sc_signal< sc_lv<32> > B_addr_reg_663;
    sc_signal< sc_lv<32> > W_addr_reg_669;
    sc_signal< sc_lv<32> > IN_addr_reg_675;
    sc_signal< sc_lv<32> > p_cast15_fu_338_p1;
    sc_signal< sc_lv<32> > p_cast15_reg_681;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<16> > tmp_V_reg_686;
    sc_signal< sc_lv<32> > zext_ln11_fu_341_p1;
    sc_signal< sc_lv<32> > zext_ln11_reg_691;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<3> > i_fu_345_p2;
    sc_signal< sc_lv<3> > i_reg_696;
    sc_signal< sc_lv<16> > IN_addr_read_reg_701;
    sc_signal< bool > ap_block_state16_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state17_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state18_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state18_io;
    sc_signal< bool > ap_block_state19_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state19_io;
    sc_signal< bool > ap_block_state20_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state21_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state22_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state23_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state24_pp0_stage0_iter8;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<16> > W_addr_read_reg_706;
    sc_signal< sc_lv<13> > j_fu_351_p2;
    sc_signal< sc_lv<13> > j_reg_711;
    sc_signal< sc_lv<1> > icmp_ln13_fu_357_p2;
    sc_signal< sc_lv<1> > icmp_ln13_reg_717;
    sc_signal< sc_lv<1> > icmp_ln13_reg_717_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln13_reg_717_pp0_iter2_reg;
    sc_signal< sc_lv<32> > r_V_2_fu_651_p2;
    sc_signal< sc_lv<32> > r_V_2_reg_721;
    sc_signal< sc_lv<1> > tmp_6_reg_726;
    sc_signal< sc_lv<1> > icmp_ln13_1_fu_376_p2;
    sc_signal< sc_lv<1> > icmp_ln13_1_reg_731_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln13_1_reg_731_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln13_1_reg_731_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln13_1_reg_731_pp0_iter6_reg;
    sc_signal< sc_lv<32> > OUT_addr_reg_735;
    sc_signal< sc_lv<16> > p_Val2_s_fu_637_p3;
    sc_signal< sc_lv<16> > p_Val2_s_reg_741;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<3> > i_011_reg_236;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_lv<1> > icmp_ln10_fu_645_p2;
    sc_signal< sc_lv<13> > ap_phi_mux_j_010_phi_fu_252_p4;
    sc_signal< sc_lv<16> > ap_phi_mux_p_Val2_9_phi_fu_262_p4;
    sc_signal< sc_lv<64> > empty_fu_288_p1;
    sc_signal< sc_lv<64> > empty_4_fu_308_p1;
    sc_signal< sc_lv<64> > empty_5_fu_328_p1;
    sc_signal< sc_lv<64> > zext_ln203_fu_385_p1;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<31> > bias_V5_fu_278_p4;
    sc_signal< sc_lv<31> > weight_V3_fu_298_p4;
    sc_signal< sc_lv<31> > in_V1_fu_318_p4;
    sc_signal< sc_lv<32> > add_ln203_fu_381_p2;
    sc_signal< sc_lv<26> > lhs_V_fu_395_p3;
    sc_signal< sc_lv<32> > sext_ln728_fu_403_p1;
    sc_signal< sc_lv<32> > ret_V_fu_407_p2;
    sc_signal< sc_lv<16> > tmp_V_3_fu_420_p4;
    sc_signal< sc_lv<16> > zext_ln415_fu_438_p1;
    sc_signal< sc_lv<16> > tmp_V_4_fu_441_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_447_p3;
    sc_signal< sc_lv<1> > p_Result_1_fu_430_p3;
    sc_signal< sc_lv<1> > xor_ln416_fu_455_p2;
    sc_signal< sc_lv<5> > tmp_1_fu_475_p4;
    sc_signal< sc_lv<6> > tmp_2_fu_491_p4;
    sc_signal< sc_lv<1> > carry_1_fu_461_p2;
    sc_signal< sc_lv<1> > Range1_all_ones_fu_501_p2;
    sc_signal< sc_lv<1> > Range1_all_zeros_fu_507_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_521_p3;
    sc_signal< sc_lv<1> > Range2_all_ones_fu_485_p2;
    sc_signal< sc_lv<1> > xor_ln779_fu_529_p2;
    sc_signal< sc_lv<1> > and_ln779_fu_535_p2;
    sc_signal< sc_lv<1> > deleted_zeros_fu_513_p3;
    sc_signal< sc_lv<1> > p_Result_2_fu_467_p3;
    sc_signal< sc_lv<1> > xor_ln785_fu_555_p2;
    sc_signal< sc_lv<1> > p_Result_s_fu_412_p3;
    sc_signal< sc_lv<1> > or_ln785_fu_561_p2;
    sc_signal< sc_lv<1> > xor_ln785_1_fu_567_p2;
    sc_signal< sc_lv<1> > deleted_ones_fu_541_p3;
    sc_signal< sc_lv<1> > and_ln781_fu_549_p2;
    sc_signal< sc_lv<1> > and_ln786_fu_579_p2;
    sc_signal< sc_lv<1> > or_ln786_fu_585_p2;
    sc_signal< sc_lv<1> > xor_ln786_fu_591_p2;
    sc_signal< sc_lv<1> > underflow_fu_597_p2;
    sc_signal< sc_lv<1> > overflow_fu_573_p2;
    sc_signal< sc_lv<1> > or_ln340_2_fu_609_p2;
    sc_signal< sc_lv<1> > or_ln340_fu_603_p2;
    sc_signal< sc_lv<1> > or_ln340_1_fu_615_p2;
    sc_signal< sc_lv<16> > select_ln340_fu_621_p3;
    sc_signal< sc_lv<16> > select_ln388_fu_629_p3;
    sc_signal< sc_lv<17> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<17> ap_ST_fsm_state1;
    static const sc_lv<17> ap_ST_fsm_state2;
    static const sc_lv<17> ap_ST_fsm_state3;
    static const sc_lv<17> ap_ST_fsm_state4;
    static const sc_lv<17> ap_ST_fsm_state5;
    static const sc_lv<17> ap_ST_fsm_state6;
    static const sc_lv<17> ap_ST_fsm_state7;
    static const sc_lv<17> ap_ST_fsm_state8;
    static const sc_lv<17> ap_ST_fsm_state9;
    static const sc_lv<17> ap_ST_fsm_state10;
    static const sc_lv<17> ap_ST_fsm_state11;
    static const sc_lv<17> ap_ST_fsm_state12;
    static const sc_lv<17> ap_ST_fsm_state13;
    static const sc_lv<17> ap_ST_fsm_state14;
    static const sc_lv<17> ap_ST_fsm_state15;
    static const sc_lv<17> ap_ST_fsm_pp0_stage0;
    static const sc_lv<17> ap_ST_fsm_state25;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_IN_R_USER_VALUE;
    static const int C_M_AXI_IN_R_PROT_VALUE;
    static const int C_M_AXI_IN_R_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_W_USER_VALUE;
    static const int C_M_AXI_W_PROT_VALUE;
    static const int C_M_AXI_W_CACHE_VALUE;
    static const int C_M_AXI_B_USER_VALUE;
    static const int C_M_AXI_B_PROT_VALUE;
    static const int C_M_AXI_B_CACHE_VALUE;
    static const int C_M_AXI_OUT_R_USER_VALUE;
    static const int C_M_AXI_OUT_R_PROT_VALUE;
    static const int C_M_AXI_OUT_R_CACHE_VALUE;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_5DC0;
    static const sc_lv<32> ap_const_lv32_12C0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<13> ap_const_lv13_12BF;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<13> ap_const_lv13_12C0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<16> ap_const_lv16_7FFF;
    static const sc_lv<16> ap_const_lv16_8000;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<16> ap_const_lv16_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const11();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const10();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const9();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const12();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_B_ARVALID();
    void thread_B_RREADY();
    void thread_B_blk_n_AR();
    void thread_B_blk_n_R();
    void thread_IN_r_ARVALID();
    void thread_IN_r_RREADY();
    void thread_IN_r_blk_n_AR();
    void thread_IN_r_blk_n_R();
    void thread_OUT_r_AWVALID();
    void thread_OUT_r_BREADY();
    void thread_OUT_r_WVALID();
    void thread_OUT_r_blk_n_AW();
    void thread_OUT_r_blk_n_B();
    void thread_OUT_r_blk_n_W();
    void thread_Range1_all_ones_fu_501_p2();
    void thread_Range1_all_zeros_fu_507_p2();
    void thread_Range2_all_ones_fu_485_p2();
    void thread_W_ARVALID();
    void thread_W_RREADY();
    void thread_W_blk_n_AR();
    void thread_W_blk_n_R();
    void thread_add_ln203_fu_381_p2();
    void thread_and_ln779_fu_535_p2();
    void thread_and_ln781_fu_549_p2();
    void thread_and_ln786_fu_579_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state16_pp0_stage0_iter0();
    void thread_ap_block_state17_pp0_stage0_iter1();
    void thread_ap_block_state18_io();
    void thread_ap_block_state18_pp0_stage0_iter2();
    void thread_ap_block_state19_io();
    void thread_ap_block_state19_pp0_stage0_iter3();
    void thread_ap_block_state20_pp0_stage0_iter4();
    void thread_ap_block_state21_pp0_stage0_iter5();
    void thread_ap_block_state22_pp0_stage0_iter6();
    void thread_ap_block_state23_pp0_stage0_iter7();
    void thread_ap_block_state24_pp0_stage0_iter8();
    void thread_ap_block_state2_io();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_j_010_phi_fu_252_p4();
    void thread_ap_phi_mux_p_Val2_9_phi_fu_262_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_bias_V5_fu_278_p4();
    void thread_carry_1_fu_461_p2();
    void thread_deleted_ones_fu_541_p3();
    void thread_deleted_zeros_fu_513_p3();
    void thread_empty_4_fu_308_p1();
    void thread_empty_5_fu_328_p1();
    void thread_empty_fu_288_p1();
    void thread_i_fu_345_p2();
    void thread_icmp_ln10_fu_645_p2();
    void thread_icmp_ln13_1_fu_376_p2();
    void thread_icmp_ln13_fu_357_p2();
    void thread_in_V1_fu_318_p4();
    void thread_j_fu_351_p2();
    void thread_lhs_V_fu_395_p3();
    void thread_or_ln340_1_fu_615_p2();
    void thread_or_ln340_2_fu_609_p2();
    void thread_or_ln340_fu_603_p2();
    void thread_or_ln785_fu_561_p2();
    void thread_or_ln786_fu_585_p2();
    void thread_overflow_fu_573_p2();
    void thread_p_Result_1_fu_430_p3();
    void thread_p_Result_2_fu_467_p3();
    void thread_p_Result_s_fu_412_p3();
    void thread_p_Val2_s_fu_637_p3();
    void thread_p_cast15_fu_338_p1();
    void thread_ret_V_fu_407_p2();
    void thread_select_ln340_fu_621_p3();
    void thread_select_ln388_fu_629_p3();
    void thread_sext_ln728_fu_403_p1();
    void thread_tmp_1_fu_475_p4();
    void thread_tmp_2_fu_491_p4();
    void thread_tmp_7_fu_447_p3();
    void thread_tmp_9_fu_521_p3();
    void thread_tmp_V_3_fu_420_p4();
    void thread_tmp_V_4_fu_441_p2();
    void thread_underflow_fu_597_p2();
    void thread_weight_V3_fu_298_p4();
    void thread_xor_ln416_fu_455_p2();
    void thread_xor_ln779_fu_529_p2();
    void thread_xor_ln785_1_fu_567_p2();
    void thread_xor_ln785_fu_555_p2();
    void thread_xor_ln786_fu_591_p2();
    void thread_zext_ln11_fu_341_p1();
    void thread_zext_ln203_fu_385_p1();
    void thread_zext_ln415_fu_438_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
