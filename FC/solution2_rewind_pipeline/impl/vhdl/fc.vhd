-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_W_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W_USER_VALUE : INTEGER := 0;
    C_M_AXI_W_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IN_r_AWVALID : OUT STD_LOGIC;
    m_axi_IN_r_AWREADY : IN STD_LOGIC;
    m_axi_IN_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_IN_r_WVALID : OUT STD_LOGIC;
    m_axi_IN_r_WREADY : IN STD_LOGIC;
    m_axi_IN_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_IN_r_WLAST : OUT STD_LOGIC;
    m_axi_IN_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_IN_r_ARVALID : OUT STD_LOGIC;
    m_axi_IN_r_ARREADY : IN STD_LOGIC;
    m_axi_IN_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RVALID : IN STD_LOGIC;
    m_axi_IN_r_RREADY : OUT STD_LOGIC;
    m_axi_IN_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_RLAST : IN STD_LOGIC;
    m_axi_IN_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BVALID : IN STD_LOGIC;
    m_axi_IN_r_BREADY : OUT STD_LOGIC;
    m_axi_IN_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    m_axi_W_AWVALID : OUT STD_LOGIC;
    m_axi_W_AWREADY : IN STD_LOGIC;
    m_axi_W_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ADDR_WIDTH-1 downto 0);
    m_axi_W_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_AWUSER_WIDTH-1 downto 0);
    m_axi_W_WVALID : OUT STD_LOGIC;
    m_axi_W_WREADY : IN STD_LOGIC;
    m_axi_W_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DATA_WIDTH-1 downto 0);
    m_axi_W_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DATA_WIDTH/8-1 downto 0);
    m_axi_W_WLAST : OUT STD_LOGIC;
    m_axi_W_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_WUSER_WIDTH-1 downto 0);
    m_axi_W_ARVALID : OUT STD_LOGIC;
    m_axi_W_ARREADY : IN STD_LOGIC;
    m_axi_W_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ADDR_WIDTH-1 downto 0);
    m_axi_W_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ARUSER_WIDTH-1 downto 0);
    m_axi_W_RVALID : IN STD_LOGIC;
    m_axi_W_RREADY : OUT STD_LOGIC;
    m_axi_W_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W_DATA_WIDTH-1 downto 0);
    m_axi_W_RLAST : IN STD_LOGIC;
    m_axi_W_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_RUSER_WIDTH-1 downto 0);
    m_axi_W_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_BVALID : IN STD_LOGIC;
    m_axi_W_BREADY : OUT STD_LOGIC;
    m_axi_W_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_BUSER_WIDTH-1 downto 0);
    m_axi_B_AWVALID : OUT STD_LOGIC;
    m_axi_B_AWREADY : IN STD_LOGIC;
    m_axi_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_AWUSER_WIDTH-1 downto 0);
    m_axi_B_WVALID : OUT STD_LOGIC;
    m_axi_B_WREADY : IN STD_LOGIC;
    m_axi_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH/8-1 downto 0);
    m_axi_B_WLAST : OUT STD_LOGIC;
    m_axi_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_WUSER_WIDTH-1 downto 0);
    m_axi_B_ARVALID : OUT STD_LOGIC;
    m_axi_B_ARREADY : IN STD_LOGIC;
    m_axi_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ARUSER_WIDTH-1 downto 0);
    m_axi_B_RVALID : IN STD_LOGIC;
    m_axi_B_RREADY : OUT STD_LOGIC;
    m_axi_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_RLAST : IN STD_LOGIC;
    m_axi_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_RUSER_WIDTH-1 downto 0);
    m_axi_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BVALID : IN STD_LOGIC;
    m_axi_B_BREADY : OUT STD_LOGIC;
    m_axi_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_BUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=24087,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=1,HLS_SYN_FF=2827,HLS_SYN_LUT=3323,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5DC0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101110111000000";
    constant ap_const_lv32_12C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001011000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_12BF : STD_LOGIC_VECTOR (12 downto 0) := "1001010111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv13_12C0 : STD_LOGIC_VECTOR (12 downto 0) := "1001011000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_V : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal IN_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal W_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal W_blk_n_R : STD_LOGIC;
    signal B_blk_n_AR : STD_LOGIC;
    signal B_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln13_1_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln13_1_reg_731_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln13_1_reg_731_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_AWREADY : STD_LOGIC;
    signal IN_r_WREADY : STD_LOGIC;
    signal IN_r_ARVALID : STD_LOGIC;
    signal IN_r_ARREADY : STD_LOGIC;
    signal IN_r_RVALID : STD_LOGIC;
    signal IN_r_RREADY : STD_LOGIC;
    signal IN_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal IN_r_RLAST : STD_LOGIC;
    signal IN_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BVALID : STD_LOGIC;
    signal IN_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_AWREADY : STD_LOGIC;
    signal W_WREADY : STD_LOGIC;
    signal W_ARVALID : STD_LOGIC;
    signal W_ARREADY : STD_LOGIC;
    signal W_RVALID : STD_LOGIC;
    signal W_RREADY : STD_LOGIC;
    signal W_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal W_RLAST : STD_LOGIC;
    signal W_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_BVALID : STD_LOGIC;
    signal W_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_AWREADY : STD_LOGIC;
    signal B_WREADY : STD_LOGIC;
    signal B_ARVALID : STD_LOGIC;
    signal B_ARREADY : STD_LOGIC;
    signal B_RVALID : STD_LOGIC;
    signal B_RREADY : STD_LOGIC;
    signal B_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal B_RLAST : STD_LOGIC;
    signal B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal B_BVALID : STD_LOGIC;
    signal B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal j_010_reg_248 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_9_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_658 : STD_LOGIC_VECTOR (30 downto 0);
    signal B_addr_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_addr_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_addr_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast15_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast15_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_V_reg_686 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln11_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_fu_345_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_696 : STD_LOGIC_VECTOR (2 downto 0);
    signal IN_addr_read_reg_701 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state16_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal W_addr_read_reg_706 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_351_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_711 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln13_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_717_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_717_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_731_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_731_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_731_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_731_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_addr_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_637_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal i_011_reg_236 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln10_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_j_010_phi_fu_252_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_p_Val2_9_phi_fu_262_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_4_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bias_V5_fu_278_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal weight_V3_fu_298_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal in_V1_fu_318_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln203_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_395_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_407_p2 : signal is "no";
    signal tmp_V_3_fu_420_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_fu_441_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_475_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_491_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal carry_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_521_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_513_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_621_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_629_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component fc_mul_mul_16s_16bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_IN_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_W_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fc_CTRL_s_axi_U : component fc_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_V => in_V,
        weight_V => weight_V,
        bias_V => bias_V,
        out_V => out_V);

    fc_IN_r_m_axi_U : component fc_IN_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IN_r_AWVALID,
        AWREADY => m_axi_IN_r_AWREADY,
        AWADDR => m_axi_IN_r_AWADDR,
        AWID => m_axi_IN_r_AWID,
        AWLEN => m_axi_IN_r_AWLEN,
        AWSIZE => m_axi_IN_r_AWSIZE,
        AWBURST => m_axi_IN_r_AWBURST,
        AWLOCK => m_axi_IN_r_AWLOCK,
        AWCACHE => m_axi_IN_r_AWCACHE,
        AWPROT => m_axi_IN_r_AWPROT,
        AWQOS => m_axi_IN_r_AWQOS,
        AWREGION => m_axi_IN_r_AWREGION,
        AWUSER => m_axi_IN_r_AWUSER,
        WVALID => m_axi_IN_r_WVALID,
        WREADY => m_axi_IN_r_WREADY,
        WDATA => m_axi_IN_r_WDATA,
        WSTRB => m_axi_IN_r_WSTRB,
        WLAST => m_axi_IN_r_WLAST,
        WID => m_axi_IN_r_WID,
        WUSER => m_axi_IN_r_WUSER,
        ARVALID => m_axi_IN_r_ARVALID,
        ARREADY => m_axi_IN_r_ARREADY,
        ARADDR => m_axi_IN_r_ARADDR,
        ARID => m_axi_IN_r_ARID,
        ARLEN => m_axi_IN_r_ARLEN,
        ARSIZE => m_axi_IN_r_ARSIZE,
        ARBURST => m_axi_IN_r_ARBURST,
        ARLOCK => m_axi_IN_r_ARLOCK,
        ARCACHE => m_axi_IN_r_ARCACHE,
        ARPROT => m_axi_IN_r_ARPROT,
        ARQOS => m_axi_IN_r_ARQOS,
        ARREGION => m_axi_IN_r_ARREGION,
        ARUSER => m_axi_IN_r_ARUSER,
        RVALID => m_axi_IN_r_RVALID,
        RREADY => m_axi_IN_r_RREADY,
        RDATA => m_axi_IN_r_RDATA,
        RLAST => m_axi_IN_r_RLAST,
        RID => m_axi_IN_r_RID,
        RUSER => m_axi_IN_r_RUSER,
        RRESP => m_axi_IN_r_RRESP,
        BVALID => m_axi_IN_r_BVALID,
        BREADY => m_axi_IN_r_BREADY,
        BRESP => m_axi_IN_r_BRESP,
        BID => m_axi_IN_r_BID,
        BUSER => m_axi_IN_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IN_r_ARVALID,
        I_ARREADY => IN_r_ARREADY,
        I_ARADDR => IN_addr_reg_675,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_12C0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IN_r_RVALID,
        I_RREADY => IN_r_RREADY,
        I_RDATA => IN_r_RDATA,
        I_RID => IN_r_RID,
        I_RUSER => IN_r_RUSER,
        I_RRESP => IN_r_RRESP,
        I_RLAST => IN_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IN_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IN_r_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => IN_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IN_r_BRESP,
        I_BID => IN_r_BID,
        I_BUSER => IN_r_BUSER);

    fc_W_m_axi_U : component fc_W_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_W_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_W_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W_CACHE_VALUE)
    port map (
        AWVALID => m_axi_W_AWVALID,
        AWREADY => m_axi_W_AWREADY,
        AWADDR => m_axi_W_AWADDR,
        AWID => m_axi_W_AWID,
        AWLEN => m_axi_W_AWLEN,
        AWSIZE => m_axi_W_AWSIZE,
        AWBURST => m_axi_W_AWBURST,
        AWLOCK => m_axi_W_AWLOCK,
        AWCACHE => m_axi_W_AWCACHE,
        AWPROT => m_axi_W_AWPROT,
        AWQOS => m_axi_W_AWQOS,
        AWREGION => m_axi_W_AWREGION,
        AWUSER => m_axi_W_AWUSER,
        WVALID => m_axi_W_WVALID,
        WREADY => m_axi_W_WREADY,
        WDATA => m_axi_W_WDATA,
        WSTRB => m_axi_W_WSTRB,
        WLAST => m_axi_W_WLAST,
        WID => m_axi_W_WID,
        WUSER => m_axi_W_WUSER,
        ARVALID => m_axi_W_ARVALID,
        ARREADY => m_axi_W_ARREADY,
        ARADDR => m_axi_W_ARADDR,
        ARID => m_axi_W_ARID,
        ARLEN => m_axi_W_ARLEN,
        ARSIZE => m_axi_W_ARSIZE,
        ARBURST => m_axi_W_ARBURST,
        ARLOCK => m_axi_W_ARLOCK,
        ARCACHE => m_axi_W_ARCACHE,
        ARPROT => m_axi_W_ARPROT,
        ARQOS => m_axi_W_ARQOS,
        ARREGION => m_axi_W_ARREGION,
        ARUSER => m_axi_W_ARUSER,
        RVALID => m_axi_W_RVALID,
        RREADY => m_axi_W_RREADY,
        RDATA => m_axi_W_RDATA,
        RLAST => m_axi_W_RLAST,
        RID => m_axi_W_RID,
        RUSER => m_axi_W_RUSER,
        RRESP => m_axi_W_RRESP,
        BVALID => m_axi_W_BVALID,
        BREADY => m_axi_W_BREADY,
        BRESP => m_axi_W_BRESP,
        BID => m_axi_W_BID,
        BUSER => m_axi_W_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W_ARVALID,
        I_ARREADY => W_ARREADY,
        I_ARADDR => W_addr_reg_669,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_5DC0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => W_RVALID,
        I_RREADY => W_RREADY,
        I_RDATA => W_RDATA,
        I_RID => W_RID,
        I_RUSER => W_RUSER,
        I_RRESP => W_RRESP,
        I_RLAST => W_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => W_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => W_BRESP,
        I_BID => W_BID,
        I_BUSER => W_BUSER);

    fc_B_m_axi_U : component fc_B_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_B_AWVALID,
        AWREADY => m_axi_B_AWREADY,
        AWADDR => m_axi_B_AWADDR,
        AWID => m_axi_B_AWID,
        AWLEN => m_axi_B_AWLEN,
        AWSIZE => m_axi_B_AWSIZE,
        AWBURST => m_axi_B_AWBURST,
        AWLOCK => m_axi_B_AWLOCK,
        AWCACHE => m_axi_B_AWCACHE,
        AWPROT => m_axi_B_AWPROT,
        AWQOS => m_axi_B_AWQOS,
        AWREGION => m_axi_B_AWREGION,
        AWUSER => m_axi_B_AWUSER,
        WVALID => m_axi_B_WVALID,
        WREADY => m_axi_B_WREADY,
        WDATA => m_axi_B_WDATA,
        WSTRB => m_axi_B_WSTRB,
        WLAST => m_axi_B_WLAST,
        WID => m_axi_B_WID,
        WUSER => m_axi_B_WUSER,
        ARVALID => m_axi_B_ARVALID,
        ARREADY => m_axi_B_ARREADY,
        ARADDR => m_axi_B_ARADDR,
        ARID => m_axi_B_ARID,
        ARLEN => m_axi_B_ARLEN,
        ARSIZE => m_axi_B_ARSIZE,
        ARBURST => m_axi_B_ARBURST,
        ARLOCK => m_axi_B_ARLOCK,
        ARCACHE => m_axi_B_ARCACHE,
        ARPROT => m_axi_B_ARPROT,
        ARQOS => m_axi_B_ARQOS,
        ARREGION => m_axi_B_ARREGION,
        ARUSER => m_axi_B_ARUSER,
        RVALID => m_axi_B_RVALID,
        RREADY => m_axi_B_RREADY,
        RDATA => m_axi_B_RDATA,
        RLAST => m_axi_B_RLAST,
        RID => m_axi_B_RID,
        RUSER => m_axi_B_RUSER,
        RRESP => m_axi_B_RRESP,
        BVALID => m_axi_B_BVALID,
        BREADY => m_axi_B_BREADY,
        BRESP => m_axi_B_BRESP,
        BID => m_axi_B_BID,
        BUSER => m_axi_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B_ARVALID,
        I_ARREADY => B_ARREADY,
        I_ARADDR => B_addr_reg_663,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_5,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => B_RVALID,
        I_RREADY => B_RREADY,
        I_RDATA => B_RDATA,
        I_RID => B_RID,
        I_RUSER => B_RUSER,
        I_RRESP => B_RRESP,
        I_RLAST => B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => B_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => B_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => B_BRESP,
        I_BID => B_BID,
        I_BUSER => B_BUSER);

    fc_OUT_r_m_axi_U : component fc_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => OUT_addr_reg_735,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => p_Val2_s_reg_741,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);

    fc_mul_mul_16s_16bkb_U1 : component fc_mul_mul_16s_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => IN_addr_read_reg_701,
        din1 => W_addr_read_reg_706,
        dout => r_V_2_fu_651_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln13_fu_357_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_011_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_645_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_011_reg_236 <= i_reg_696;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_011_reg_236 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_010_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_010_reg_248 <= j_reg_711;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_010_reg_248 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    p_Val2_9_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_reg_717_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                p_Val2_9_reg_259 <= p_Val2_s_reg_741;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_Val2_9_reg_259 <= tmp_V_reg_686;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    B_addr_reg_663(30 downto 0) <= empty_fu_288_p1(32 - 1 downto 0)(30 downto 0);
                    IN_addr_reg_675(30 downto 0) <= empty_5_fu_328_p1(32 - 1 downto 0)(30 downto 0);
                    W_addr_reg_669(30 downto 0) <= empty_4_fu_308_p1(32 - 1 downto 0)(30 downto 0);
                tmp_3_reg_658 <= out_V(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                IN_addr_read_reg_701 <= IN_r_RDATA;
                W_addr_read_reg_706 <= W_RDATA;
                icmp_ln13_1_reg_731 <= icmp_ln13_1_fu_376_p2;
                icmp_ln13_reg_717 <= icmp_ln13_fu_357_p2;
                icmp_ln13_reg_717_pp0_iter1_reg <= icmp_ln13_reg_717;
                r_V_2_reg_721 <= r_V_2_fu_651_p2;
                tmp_6_reg_726 <= r_V_2_fu_651_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_1_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                OUT_addr_reg_735 <= zext_ln203_fu_385_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_reg_696 <= i_fu_345_p2;
                    zext_ln11_reg_691(2 downto 0) <= zext_ln11_fu_341_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln13_1_reg_731_pp0_iter2_reg <= icmp_ln13_1_reg_731;
                icmp_ln13_1_reg_731_pp0_iter3_reg <= icmp_ln13_1_reg_731_pp0_iter2_reg;
                icmp_ln13_1_reg_731_pp0_iter4_reg <= icmp_ln13_1_reg_731_pp0_iter3_reg;
                icmp_ln13_1_reg_731_pp0_iter5_reg <= icmp_ln13_1_reg_731_pp0_iter4_reg;
                icmp_ln13_1_reg_731_pp0_iter6_reg <= icmp_ln13_1_reg_731_pp0_iter5_reg;
                icmp_ln13_1_reg_731_pp0_iter7_reg <= icmp_ln13_1_reg_731_pp0_iter6_reg;
                icmp_ln13_reg_717_pp0_iter2_reg <= icmp_ln13_reg_717_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_reg_711 <= j_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                p_Val2_s_reg_741 <= p_Val2_s_fu_637_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    p_cast15_reg_681(30 downto 0) <= p_cast15_fu_338_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_V_reg_686 <= B_RDATA;
            end if;
        end if;
    end process;
    B_addr_reg_663(31) <= '0';
    W_addr_reg_669(31) <= '0';
    IN_addr_reg_675(31) <= '0';
    p_cast15_reg_681(31) <= '0';
    zext_ln11_reg_691(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state14, ap_enable_reg_pp0_iter8, IN_r_ARREADY, B_RVALID, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7, ap_CS_fsm_state25, icmp_ln10_fu_645_p2, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = IN_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln10_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    B_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_ARVALID <= ap_const_logic_1;
        else 
            B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    B_RREADY_assign_proc : process(ap_CS_fsm_state14, B_RVALID)
    begin
        if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            B_RREADY <= ap_const_logic_1;
        else 
            B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    B_blk_n_AR_assign_proc : process(m_axi_B_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_blk_n_AR <= m_axi_B_ARREADY;
        else 
            B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B_blk_n_R_assign_proc : process(m_axi_B_RVALID, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            B_blk_n_R <= m_axi_B_RVALID;
        else 
            B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_ARVALID_assign_proc : process(ap_CS_fsm_state9, IN_r_ARREADY)
    begin
        if (((ap_const_logic_1 = IN_r_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            IN_r_ARVALID <= ap_const_logic_1;
        else 
            IN_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN_r_RREADY <= ap_const_logic_1;
        else 
            IN_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_blk_n_AR_assign_proc : process(m_axi_IN_r_ARREADY, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            IN_r_blk_n_AR <= m_axi_IN_r_ARREADY;
        else 
            IN_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_blk_n_R_assign_proc : process(m_axi_IN_r_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IN_r_blk_n_R <= m_axi_IN_r_RVALID;
        else 
            IN_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln13_1_reg_731, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_1_reg_731 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln13_1_reg_731_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_1_reg_731_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln13_1_reg_731_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln13_1_reg_731_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln13_1_reg_731)
    begin
        if (((icmp_ln13_1_reg_731 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(m_axi_OUT_r_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln13_1_reg_731_pp0_iter7_reg)
    begin
        if (((icmp_ln13_1_reg_731_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(m_axi_OUT_r_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln13_1_reg_731_pp0_iter2_reg)
    begin
        if (((icmp_ln13_1_reg_731_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    Range1_all_ones_fu_501_p2 <= "1" when (tmp_2_fu_491_p4 = ap_const_lv6_3F) else "0";
    Range1_all_zeros_fu_507_p2 <= "1" when (tmp_2_fu_491_p4 = ap_const_lv6_0) else "0";
    Range2_all_ones_fu_485_p2 <= "1" when (tmp_1_fu_475_p4 = ap_const_lv5_1F) else "0";

    W_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            W_ARVALID <= ap_const_logic_1;
        else 
            W_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_RREADY <= ap_const_logic_1;
        else 
            W_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    W_blk_n_AR_assign_proc : process(m_axi_W_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W_blk_n_AR <= m_axi_W_ARREADY;
        else 
            W_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    W_blk_n_R_assign_proc : process(m_axi_W_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_blk_n_R <= m_axi_W_RVALID;
        else 
            W_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln203_fu_381_p2 <= std_logic_vector(unsigned(p_cast15_reg_681) + unsigned(zext_ln11_reg_691));
    and_ln779_fu_535_p2 <= (xor_ln779_fu_529_p2 and Range2_all_ones_fu_485_p2);
    and_ln781_fu_549_p2 <= (carry_1_fu_461_p2 and Range1_all_ones_fu_501_p2);
    and_ln786_fu_579_p2 <= (p_Result_2_fu_467_p3 and deleted_ones_fu_541_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(16);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, icmp_ln13_1_reg_731_pp0_iter7_reg, IN_r_RVALID, W_RVALID, OUT_r_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_0 = OUT_r_BVALID) and (icmp_ln13_1_reg_731_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = W_RVALID) or (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln13_1_reg_731_pp0_iter7_reg, IN_r_RVALID, W_RVALID, OUT_r_BVALID, ap_block_state18_io, ap_block_state19_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = OUT_r_BVALID) and (icmp_ln13_1_reg_731_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = W_RVALID) or (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln13_1_reg_731_pp0_iter7_reg, IN_r_RVALID, W_RVALID, OUT_r_BVALID, ap_block_state18_io, ap_block_state19_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = OUT_r_BVALID) and (icmp_ln13_1_reg_731_pp0_iter7_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state19_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = W_RVALID) or (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_state16_pp0_stage0_iter0_assign_proc : process(IN_r_RVALID, W_RVALID)
    begin
                ap_block_state16_pp0_stage0_iter0 <= ((ap_const_logic_0 = W_RVALID) or (ap_const_logic_0 = IN_r_RVALID));
    end process;

        ap_block_state17_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(icmp_ln13_1_reg_731, OUT_r_AWREADY)
    begin
                ap_block_state18_io <= ((ap_const_logic_0 = OUT_r_AWREADY) and (icmp_ln13_1_reg_731 = ap_const_lv1_1));
    end process;

        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(icmp_ln13_1_reg_731_pp0_iter2_reg, OUT_r_WREADY)
    begin
                ap_block_state19_io <= ((ap_const_logic_0 = OUT_r_WREADY) and (icmp_ln13_1_reg_731_pp0_iter2_reg = ap_const_lv1_1));
    end process;

        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_pp0_stage0_iter8_assign_proc : process(icmp_ln13_1_reg_731_pp0_iter7_reg, OUT_r_BVALID)
    begin
                ap_block_state24_pp0_stage0_iter8 <= ((ap_const_logic_0 = OUT_r_BVALID) and (icmp_ln13_1_reg_731_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_block_state2_io_assign_proc : process(W_ARREADY, B_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = B_ARREADY) or (ap_const_logic_0 = W_ARREADY));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25, icmp_ln10_fu_645_p2)
    begin
        if (((icmp_ln10_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_010_phi_fu_252_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_010_reg_248, j_reg_711, icmp_ln13_reg_717, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln13_reg_717 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_010_phi_fu_252_p4 <= j_reg_711;
        else 
            ap_phi_mux_j_010_phi_fu_252_p4 <= j_010_reg_248;
        end if; 
    end process;


    ap_phi_mux_p_Val2_9_phi_fu_262_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, p_Val2_9_reg_259, icmp_ln13_reg_717_pp0_iter2_reg, p_Val2_s_reg_741)
    begin
        if (((icmp_ln13_reg_717_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_p_Val2_9_phi_fu_262_p4 <= p_Val2_s_reg_741;
        else 
            ap_phi_mux_p_Val2_9_phi_fu_262_p4 <= p_Val2_9_reg_259;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, icmp_ln10_fu_645_p2)
    begin
        if (((icmp_ln10_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bias_V5_fu_278_p4 <= bias_V(31 downto 1);
    carry_1_fu_461_p2 <= (xor_ln416_fu_455_p2 and p_Result_1_fu_430_p3);
    deleted_ones_fu_541_p3 <= 
        and_ln779_fu_535_p2 when (carry_1_fu_461_p2(0) = '1') else 
        Range1_all_ones_fu_501_p2;
    deleted_zeros_fu_513_p3 <= 
        Range1_all_ones_fu_501_p2 when (carry_1_fu_461_p2(0) = '1') else 
        Range1_all_zeros_fu_507_p2;
    empty_4_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weight_V3_fu_298_p4),64));
    empty_5_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_V1_fu_318_p4),64));
    empty_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias_V5_fu_278_p4),64));
    i_fu_345_p2 <= std_logic_vector(unsigned(i_011_reg_236) + unsigned(ap_const_lv3_1));
    icmp_ln10_fu_645_p2 <= "1" when (i_011_reg_236 = ap_const_lv3_4) else "0";
    icmp_ln13_1_fu_376_p2 <= "1" when (j_reg_711 = ap_const_lv13_12C0) else "0";
    icmp_ln13_fu_357_p2 <= "1" when (ap_phi_mux_j_010_phi_fu_252_p4 = ap_const_lv13_12BF) else "0";
    in_V1_fu_318_p4 <= in_V(31 downto 1);
    j_fu_351_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(ap_phi_mux_j_010_phi_fu_252_p4));
    lhs_V_fu_395_p3 <= (ap_phi_mux_p_Val2_9_phi_fu_262_p4 & ap_const_lv10_0);
    or_ln340_1_fu_615_p2 <= (or_ln340_2_fu_609_p2 or and_ln781_fu_549_p2);
    or_ln340_2_fu_609_p2 <= (xor_ln785_1_fu_567_p2 or and_ln786_fu_579_p2);
    or_ln340_fu_603_p2 <= (underflow_fu_597_p2 or overflow_fu_573_p2);
    or_ln785_fu_561_p2 <= (xor_ln785_fu_555_p2 or p_Result_2_fu_467_p3);
    or_ln786_fu_585_p2 <= (and_ln786_fu_579_p2 or and_ln781_fu_549_p2);
    overflow_fu_573_p2 <= (xor_ln785_1_fu_567_p2 and or_ln785_fu_561_p2);
    p_Result_1_fu_430_p3 <= ret_V_fu_407_p2(25 downto 25);
    p_Result_2_fu_467_p3 <= tmp_V_4_fu_441_p2(15 downto 15);
    p_Result_s_fu_412_p3 <= ret_V_fu_407_p2(31 downto 31);
    p_Val2_s_fu_637_p3 <= 
        select_ln340_fu_621_p3 when (or_ln340_1_fu_615_p2(0) = '1') else 
        select_ln388_fu_629_p3;
    p_cast15_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_658),32));
    ret_V_fu_407_p2 <= std_logic_vector(signed(r_V_2_reg_721) + signed(sext_ln728_fu_403_p1));
    select_ln340_fu_621_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_fu_603_p2(0) = '1') else 
        tmp_V_4_fu_441_p2;
    select_ln388_fu_629_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_597_p2(0) = '1') else 
        tmp_V_4_fu_441_p2;
        sext_ln728_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_395_p3),32));

    tmp_1_fu_475_p4 <= ret_V_fu_407_p2(31 downto 27);
    tmp_2_fu_491_p4 <= ret_V_fu_407_p2(31 downto 26);
    tmp_7_fu_447_p3 <= tmp_V_4_fu_441_p2(15 downto 15);
    tmp_9_fu_521_p3 <= ret_V_fu_407_p2(26 downto 26);
    tmp_V_3_fu_420_p4 <= ret_V_fu_407_p2(25 downto 10);
    tmp_V_4_fu_441_p2 <= std_logic_vector(unsigned(tmp_V_3_fu_420_p4) + unsigned(zext_ln415_fu_438_p1));
    underflow_fu_597_p2 <= (xor_ln786_fu_591_p2 and p_Result_s_fu_412_p3);
    weight_V3_fu_298_p4 <= weight_V(31 downto 1);
    xor_ln416_fu_455_p2 <= (tmp_7_fu_447_p3 xor ap_const_lv1_1);
    xor_ln779_fu_529_p2 <= (tmp_9_fu_521_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_567_p2 <= (p_Result_s_fu_412_p3 xor ap_const_lv1_1);
    xor_ln785_fu_555_p2 <= (deleted_zeros_fu_513_p3 xor ap_const_lv1_1);
    xor_ln786_fu_591_p2 <= (or_ln786_fu_585_p2 xor ap_const_lv1_1);
    zext_ln11_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_011_reg_236),32));
    zext_ln203_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_fu_381_p2),64));
    zext_ln415_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_726),16));
end behav;
