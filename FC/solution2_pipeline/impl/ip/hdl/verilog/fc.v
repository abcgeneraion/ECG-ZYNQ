// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=24093,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=1,HLS_SYN_FF=2825,HLS_SYN_LUT=3329,HLS_VERSION=2019_2}" *)

module fc (
        ap_clk,
        ap_rst_n,
        m_axi_IN_r_AWVALID,
        m_axi_IN_r_AWREADY,
        m_axi_IN_r_AWADDR,
        m_axi_IN_r_AWID,
        m_axi_IN_r_AWLEN,
        m_axi_IN_r_AWSIZE,
        m_axi_IN_r_AWBURST,
        m_axi_IN_r_AWLOCK,
        m_axi_IN_r_AWCACHE,
        m_axi_IN_r_AWPROT,
        m_axi_IN_r_AWQOS,
        m_axi_IN_r_AWREGION,
        m_axi_IN_r_AWUSER,
        m_axi_IN_r_WVALID,
        m_axi_IN_r_WREADY,
        m_axi_IN_r_WDATA,
        m_axi_IN_r_WSTRB,
        m_axi_IN_r_WLAST,
        m_axi_IN_r_WID,
        m_axi_IN_r_WUSER,
        m_axi_IN_r_ARVALID,
        m_axi_IN_r_ARREADY,
        m_axi_IN_r_ARADDR,
        m_axi_IN_r_ARID,
        m_axi_IN_r_ARLEN,
        m_axi_IN_r_ARSIZE,
        m_axi_IN_r_ARBURST,
        m_axi_IN_r_ARLOCK,
        m_axi_IN_r_ARCACHE,
        m_axi_IN_r_ARPROT,
        m_axi_IN_r_ARQOS,
        m_axi_IN_r_ARREGION,
        m_axi_IN_r_ARUSER,
        m_axi_IN_r_RVALID,
        m_axi_IN_r_RREADY,
        m_axi_IN_r_RDATA,
        m_axi_IN_r_RLAST,
        m_axi_IN_r_RID,
        m_axi_IN_r_RUSER,
        m_axi_IN_r_RRESP,
        m_axi_IN_r_BVALID,
        m_axi_IN_r_BREADY,
        m_axi_IN_r_BRESP,
        m_axi_IN_r_BID,
        m_axi_IN_r_BUSER,
        m_axi_W_AWVALID,
        m_axi_W_AWREADY,
        m_axi_W_AWADDR,
        m_axi_W_AWID,
        m_axi_W_AWLEN,
        m_axi_W_AWSIZE,
        m_axi_W_AWBURST,
        m_axi_W_AWLOCK,
        m_axi_W_AWCACHE,
        m_axi_W_AWPROT,
        m_axi_W_AWQOS,
        m_axi_W_AWREGION,
        m_axi_W_AWUSER,
        m_axi_W_WVALID,
        m_axi_W_WREADY,
        m_axi_W_WDATA,
        m_axi_W_WSTRB,
        m_axi_W_WLAST,
        m_axi_W_WID,
        m_axi_W_WUSER,
        m_axi_W_ARVALID,
        m_axi_W_ARREADY,
        m_axi_W_ARADDR,
        m_axi_W_ARID,
        m_axi_W_ARLEN,
        m_axi_W_ARSIZE,
        m_axi_W_ARBURST,
        m_axi_W_ARLOCK,
        m_axi_W_ARCACHE,
        m_axi_W_ARPROT,
        m_axi_W_ARQOS,
        m_axi_W_ARREGION,
        m_axi_W_ARUSER,
        m_axi_W_RVALID,
        m_axi_W_RREADY,
        m_axi_W_RDATA,
        m_axi_W_RLAST,
        m_axi_W_RID,
        m_axi_W_RUSER,
        m_axi_W_RRESP,
        m_axi_W_BVALID,
        m_axi_W_BREADY,
        m_axi_W_BRESP,
        m_axi_W_BID,
        m_axi_W_BUSER,
        m_axi_B_AWVALID,
        m_axi_B_AWREADY,
        m_axi_B_AWADDR,
        m_axi_B_AWID,
        m_axi_B_AWLEN,
        m_axi_B_AWSIZE,
        m_axi_B_AWBURST,
        m_axi_B_AWLOCK,
        m_axi_B_AWCACHE,
        m_axi_B_AWPROT,
        m_axi_B_AWQOS,
        m_axi_B_AWREGION,
        m_axi_B_AWUSER,
        m_axi_B_WVALID,
        m_axi_B_WREADY,
        m_axi_B_WDATA,
        m_axi_B_WSTRB,
        m_axi_B_WLAST,
        m_axi_B_WID,
        m_axi_B_WUSER,
        m_axi_B_ARVALID,
        m_axi_B_ARREADY,
        m_axi_B_ARADDR,
        m_axi_B_ARID,
        m_axi_B_ARLEN,
        m_axi_B_ARSIZE,
        m_axi_B_ARBURST,
        m_axi_B_ARLOCK,
        m_axi_B_ARCACHE,
        m_axi_B_ARPROT,
        m_axi_B_ARQOS,
        m_axi_B_ARREGION,
        m_axi_B_ARUSER,
        m_axi_B_RVALID,
        m_axi_B_RREADY,
        m_axi_B_RDATA,
        m_axi_B_RLAST,
        m_axi_B_RID,
        m_axi_B_RUSER,
        m_axi_B_RRESP,
        m_axi_B_BVALID,
        m_axi_B_BREADY,
        m_axi_B_BRESP,
        m_axi_B_BID,
        m_axi_B_BUSER,
        m_axi_OUT_r_AWVALID,
        m_axi_OUT_r_AWREADY,
        m_axi_OUT_r_AWADDR,
        m_axi_OUT_r_AWID,
        m_axi_OUT_r_AWLEN,
        m_axi_OUT_r_AWSIZE,
        m_axi_OUT_r_AWBURST,
        m_axi_OUT_r_AWLOCK,
        m_axi_OUT_r_AWCACHE,
        m_axi_OUT_r_AWPROT,
        m_axi_OUT_r_AWQOS,
        m_axi_OUT_r_AWREGION,
        m_axi_OUT_r_AWUSER,
        m_axi_OUT_r_WVALID,
        m_axi_OUT_r_WREADY,
        m_axi_OUT_r_WDATA,
        m_axi_OUT_r_WSTRB,
        m_axi_OUT_r_WLAST,
        m_axi_OUT_r_WID,
        m_axi_OUT_r_WUSER,
        m_axi_OUT_r_ARVALID,
        m_axi_OUT_r_ARREADY,
        m_axi_OUT_r_ARADDR,
        m_axi_OUT_r_ARID,
        m_axi_OUT_r_ARLEN,
        m_axi_OUT_r_ARSIZE,
        m_axi_OUT_r_ARBURST,
        m_axi_OUT_r_ARLOCK,
        m_axi_OUT_r_ARCACHE,
        m_axi_OUT_r_ARPROT,
        m_axi_OUT_r_ARQOS,
        m_axi_OUT_r_ARREGION,
        m_axi_OUT_r_ARUSER,
        m_axi_OUT_r_RVALID,
        m_axi_OUT_r_RREADY,
        m_axi_OUT_r_RDATA,
        m_axi_OUT_r_RLAST,
        m_axi_OUT_r_RID,
        m_axi_OUT_r_RUSER,
        m_axi_OUT_r_RRESP,
        m_axi_OUT_r_BVALID,
        m_axi_OUT_r_BREADY,
        m_axi_OUT_r_BRESP,
        m_axi_OUT_r_BID,
        m_axi_OUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 17'd32768;
parameter    ap_ST_fsm_state26 = 17'd65536;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_W_ID_WIDTH = 1;
parameter    C_M_AXI_W_ADDR_WIDTH = 32;
parameter    C_M_AXI_W_DATA_WIDTH = 32;
parameter    C_M_AXI_W_AWUSER_WIDTH = 1;
parameter    C_M_AXI_W_ARUSER_WIDTH = 1;
parameter    C_M_AXI_W_WUSER_WIDTH = 1;
parameter    C_M_AXI_W_RUSER_WIDTH = 1;
parameter    C_M_AXI_W_BUSER_WIDTH = 1;
parameter    C_M_AXI_W_USER_VALUE = 0;
parameter    C_M_AXI_W_PROT_VALUE = 0;
parameter    C_M_AXI_W_CACHE_VALUE = 3;
parameter    C_M_AXI_B_ID_WIDTH = 1;
parameter    C_M_AXI_B_ADDR_WIDTH = 32;
parameter    C_M_AXI_B_DATA_WIDTH = 32;
parameter    C_M_AXI_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_USER_VALUE = 0;
parameter    C_M_AXI_B_PROT_VALUE = 0;
parameter    C_M_AXI_B_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_W_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IN_r_AWVALID;
input   m_axi_IN_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_AWID;
output  [7:0] m_axi_IN_r_AWLEN;
output  [2:0] m_axi_IN_r_AWSIZE;
output  [1:0] m_axi_IN_r_AWBURST;
output  [1:0] m_axi_IN_r_AWLOCK;
output  [3:0] m_axi_IN_r_AWCACHE;
output  [2:0] m_axi_IN_r_AWPROT;
output  [3:0] m_axi_IN_r_AWQOS;
output  [3:0] m_axi_IN_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1:0] m_axi_IN_r_AWUSER;
output   m_axi_IN_r_WVALID;
input   m_axi_IN_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1:0] m_axi_IN_r_WSTRB;
output   m_axi_IN_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1:0] m_axi_IN_r_WUSER;
output   m_axi_IN_r_ARVALID;
input   m_axi_IN_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_ARID;
output  [7:0] m_axi_IN_r_ARLEN;
output  [2:0] m_axi_IN_r_ARSIZE;
output  [1:0] m_axi_IN_r_ARBURST;
output  [1:0] m_axi_IN_r_ARLOCK;
output  [3:0] m_axi_IN_r_ARCACHE;
output  [2:0] m_axi_IN_r_ARPROT;
output  [3:0] m_axi_IN_r_ARQOS;
output  [3:0] m_axi_IN_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1:0] m_axi_IN_r_ARUSER;
input   m_axi_IN_r_RVALID;
output   m_axi_IN_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_RDATA;
input   m_axi_IN_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1:0] m_axi_IN_r_RUSER;
input  [1:0] m_axi_IN_r_RRESP;
input   m_axi_IN_r_BVALID;
output   m_axi_IN_r_BREADY;
input  [1:0] m_axi_IN_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1:0] m_axi_IN_r_BUSER;
output   m_axi_W_AWVALID;
input   m_axi_W_AWREADY;
output  [C_M_AXI_W_ADDR_WIDTH - 1:0] m_axi_W_AWADDR;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_AWID;
output  [7:0] m_axi_W_AWLEN;
output  [2:0] m_axi_W_AWSIZE;
output  [1:0] m_axi_W_AWBURST;
output  [1:0] m_axi_W_AWLOCK;
output  [3:0] m_axi_W_AWCACHE;
output  [2:0] m_axi_W_AWPROT;
output  [3:0] m_axi_W_AWQOS;
output  [3:0] m_axi_W_AWREGION;
output  [C_M_AXI_W_AWUSER_WIDTH - 1:0] m_axi_W_AWUSER;
output   m_axi_W_WVALID;
input   m_axi_W_WREADY;
output  [C_M_AXI_W_DATA_WIDTH - 1:0] m_axi_W_WDATA;
output  [C_M_AXI_W_WSTRB_WIDTH - 1:0] m_axi_W_WSTRB;
output   m_axi_W_WLAST;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_WID;
output  [C_M_AXI_W_WUSER_WIDTH - 1:0] m_axi_W_WUSER;
output   m_axi_W_ARVALID;
input   m_axi_W_ARREADY;
output  [C_M_AXI_W_ADDR_WIDTH - 1:0] m_axi_W_ARADDR;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_ARID;
output  [7:0] m_axi_W_ARLEN;
output  [2:0] m_axi_W_ARSIZE;
output  [1:0] m_axi_W_ARBURST;
output  [1:0] m_axi_W_ARLOCK;
output  [3:0] m_axi_W_ARCACHE;
output  [2:0] m_axi_W_ARPROT;
output  [3:0] m_axi_W_ARQOS;
output  [3:0] m_axi_W_ARREGION;
output  [C_M_AXI_W_ARUSER_WIDTH - 1:0] m_axi_W_ARUSER;
input   m_axi_W_RVALID;
output   m_axi_W_RREADY;
input  [C_M_AXI_W_DATA_WIDTH - 1:0] m_axi_W_RDATA;
input   m_axi_W_RLAST;
input  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_RID;
input  [C_M_AXI_W_RUSER_WIDTH - 1:0] m_axi_W_RUSER;
input  [1:0] m_axi_W_RRESP;
input   m_axi_W_BVALID;
output   m_axi_W_BREADY;
input  [1:0] m_axi_W_BRESP;
input  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_BID;
input  [C_M_AXI_W_BUSER_WIDTH - 1:0] m_axi_W_BUSER;
output   m_axi_B_AWVALID;
input   m_axi_B_AWREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_B_AWADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_AWID;
output  [7:0] m_axi_B_AWLEN;
output  [2:0] m_axi_B_AWSIZE;
output  [1:0] m_axi_B_AWBURST;
output  [1:0] m_axi_B_AWLOCK;
output  [3:0] m_axi_B_AWCACHE;
output  [2:0] m_axi_B_AWPROT;
output  [3:0] m_axi_B_AWQOS;
output  [3:0] m_axi_B_AWREGION;
output  [C_M_AXI_B_AWUSER_WIDTH - 1:0] m_axi_B_AWUSER;
output   m_axi_B_WVALID;
input   m_axi_B_WREADY;
output  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_B_WDATA;
output  [C_M_AXI_B_WSTRB_WIDTH - 1:0] m_axi_B_WSTRB;
output   m_axi_B_WLAST;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_WID;
output  [C_M_AXI_B_WUSER_WIDTH - 1:0] m_axi_B_WUSER;
output   m_axi_B_ARVALID;
input   m_axi_B_ARREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_B_ARADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_ARID;
output  [7:0] m_axi_B_ARLEN;
output  [2:0] m_axi_B_ARSIZE;
output  [1:0] m_axi_B_ARBURST;
output  [1:0] m_axi_B_ARLOCK;
output  [3:0] m_axi_B_ARCACHE;
output  [2:0] m_axi_B_ARPROT;
output  [3:0] m_axi_B_ARQOS;
output  [3:0] m_axi_B_ARREGION;
output  [C_M_AXI_B_ARUSER_WIDTH - 1:0] m_axi_B_ARUSER;
input   m_axi_B_RVALID;
output   m_axi_B_RREADY;
input  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_B_RDATA;
input   m_axi_B_RLAST;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_RID;
input  [C_M_AXI_B_RUSER_WIDTH - 1:0] m_axi_B_RUSER;
input  [1:0] m_axi_B_RRESP;
input   m_axi_B_BVALID;
output   m_axi_B_BREADY;
input  [1:0] m_axi_B_BRESP;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_BID;
input  [C_M_AXI_B_BUSER_WIDTH - 1:0] m_axi_B_BUSER;
output   m_axi_OUT_r_AWVALID;
input   m_axi_OUT_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_AWID;
output  [7:0] m_axi_OUT_r_AWLEN;
output  [2:0] m_axi_OUT_r_AWSIZE;
output  [1:0] m_axi_OUT_r_AWBURST;
output  [1:0] m_axi_OUT_r_AWLOCK;
output  [3:0] m_axi_OUT_r_AWCACHE;
output  [2:0] m_axi_OUT_r_AWPROT;
output  [3:0] m_axi_OUT_r_AWQOS;
output  [3:0] m_axi_OUT_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_OUT_r_AWUSER;
output   m_axi_OUT_r_WVALID;
input   m_axi_OUT_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_OUT_r_WSTRB;
output   m_axi_OUT_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_OUT_r_WUSER;
output   m_axi_OUT_r_ARVALID;
input   m_axi_OUT_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_ARID;
output  [7:0] m_axi_OUT_r_ARLEN;
output  [2:0] m_axi_OUT_r_ARSIZE;
output  [1:0] m_axi_OUT_r_ARBURST;
output  [1:0] m_axi_OUT_r_ARLOCK;
output  [3:0] m_axi_OUT_r_ARCACHE;
output  [2:0] m_axi_OUT_r_ARPROT;
output  [3:0] m_axi_OUT_r_ARQOS;
output  [3:0] m_axi_OUT_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_OUT_r_ARUSER;
input   m_axi_OUT_r_RVALID;
output   m_axi_OUT_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_RDATA;
input   m_axi_OUT_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_OUT_r_RUSER;
input  [1:0] m_axi_OUT_r_RRESP;
input   m_axi_OUT_r_BVALID;
output   m_axi_OUT_r_BREADY;
input  [1:0] m_axi_OUT_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_OUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_V;
wire   [31:0] weight_V;
wire   [31:0] bias_V;
wire   [31:0] out_V;
reg    IN_r_blk_n_AR;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln10_fu_337_p2;
reg    IN_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln12_reg_702;
reg    W_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    W_blk_n_R;
reg    B_blk_n_AR;
reg    B_blk_n_R;
wire    ap_CS_fsm_state14;
reg    OUT_r_blk_n_AW;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln12_1_reg_722;
reg   [0:0] icmp_ln12_1_reg_722_pp0_iter2_reg;
reg    OUT_r_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln12_1_reg_722_pp0_iter3_reg;
reg    OUT_r_blk_n_B;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln12_1_reg_722_pp0_iter8_reg;
wire    IN_r_AWREADY;
wire    IN_r_WREADY;
reg    IN_r_ARVALID;
wire    IN_r_ARREADY;
wire    IN_r_RVALID;
reg    IN_r_RREADY;
wire   [15:0] IN_r_RDATA;
wire    IN_r_RLAST;
wire   [0:0] IN_r_RID;
wire   [0:0] IN_r_RUSER;
wire   [1:0] IN_r_RRESP;
wire    IN_r_BVALID;
wire   [1:0] IN_r_BRESP;
wire   [0:0] IN_r_BID;
wire   [0:0] IN_r_BUSER;
wire    W_AWREADY;
wire    W_WREADY;
reg    W_ARVALID;
wire    W_ARREADY;
wire    W_RVALID;
reg    W_RREADY;
wire   [15:0] W_RDATA;
wire    W_RLAST;
wire   [0:0] W_RID;
wire   [0:0] W_RUSER;
wire   [1:0] W_RRESP;
wire    W_BVALID;
wire   [1:0] W_BRESP;
wire   [0:0] W_BID;
wire   [0:0] W_BUSER;
wire    B_AWREADY;
wire    B_WREADY;
reg    B_ARVALID;
wire    B_ARREADY;
wire    B_RVALID;
reg    B_RREADY;
wire   [15:0] B_RDATA;
wire    B_RLAST;
wire   [0:0] B_RID;
wire   [0:0] B_RUSER;
wire   [1:0] B_RRESP;
wire    B_BVALID;
wire   [1:0] B_BRESP;
wire   [0:0] B_BID;
wire   [0:0] B_BUSER;
reg    OUT_r_AWVALID;
wire    OUT_r_AWREADY;
reg    OUT_r_WVALID;
wire    OUT_r_WREADY;
wire    OUT_r_ARREADY;
wire    OUT_r_RVALID;
wire   [15:0] OUT_r_RDATA;
wire    OUT_r_RLAST;
wire   [0:0] OUT_r_RID;
wire   [0:0] OUT_r_RUSER;
wire   [1:0] OUT_r_RRESP;
wire    OUT_r_BVALID;
reg    OUT_r_BREADY;
wire   [1:0] OUT_r_BRESP;
wire   [0:0] OUT_r_BID;
wire   [0:0] OUT_r_BUSER;
reg   [15:0] p_Val2_s_reg_243;
reg   [12:0] j_0_reg_253;
reg   [30:0] tmp_3_reg_655;
reg   [31:0] B_addr_reg_660;
reg   [31:0] W_addr_reg_666;
reg   [31:0] IN_addr_reg_672;
wire   [31:0] p_cast11_fu_334_p1;
reg   [31:0] p_cast11_reg_678;
wire    ap_CS_fsm_state8;
wire   [2:0] i_fu_343_p2;
reg   [2:0] i_reg_686;
reg    ap_block_state9_io;
reg   [31:0] OUT_addr_reg_691;
reg   [15:0] tmp_V_reg_697;
wire   [0:0] icmp_ln12_fu_368_p2;
wire    ap_block_state16_pp0_stage0_iter0;
reg    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
reg    ap_block_state19_io;
wire    ap_block_state20_pp0_stage0_iter4;
reg    ap_block_state20_io;
wire    ap_block_state21_pp0_stage0_iter5;
wire    ap_block_state22_pp0_stage0_iter6;
wire    ap_block_state23_pp0_stage0_iter7;
wire    ap_block_state24_pp0_stage0_iter8;
reg    ap_block_state25_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln12_reg_702_pp0_iter1_reg;
reg   [0:0] icmp_ln12_reg_702_pp0_iter2_reg;
reg   [0:0] icmp_ln12_reg_702_pp0_iter3_reg;
wire   [12:0] j_fu_374_p2;
reg   [12:0] j_reg_706;
reg    ap_enable_reg_pp0_iter0;
reg  signed [15:0] IN_addr_read_reg_712;
reg  signed [15:0] W_addr_read_reg_717;
wire   [0:0] icmp_ln12_1_fu_380_p2;
reg   [0:0] icmp_ln12_1_reg_722_pp0_iter4_reg;
reg   [0:0] icmp_ln12_1_reg_722_pp0_iter5_reg;
reg   [0:0] icmp_ln12_1_reg_722_pp0_iter6_reg;
reg   [0:0] icmp_ln12_1_reg_722_pp0_iter7_reg;
wire  signed [31:0] r_V_2_fu_648_p2;
reg  signed [31:0] r_V_2_reg_726;
reg   [0:0] tmp_6_reg_731;
wire   [15:0] select_ln340_1_fu_640_p3;
reg   [15:0] select_ln340_1_reg_736;
wire    ap_CS_fsm_state15;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state16;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [2:0] i_0_reg_232;
wire    ap_CS_fsm_state26;
reg   [15:0] ap_phi_mux_p_Val2_s_phi_fu_246_p4;
reg   [12:0] ap_phi_mux_j_0_phi_fu_257_p4;
wire   [63:0] empty_fu_284_p1;
wire   [63:0] empty_4_fu_304_p1;
wire   [63:0] empty_5_fu_324_p1;
wire   [63:0] zext_ln203_fu_358_p1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] bias_V5_fu_274_p4;
wire   [30:0] weight_V3_fu_294_p4;
wire   [30:0] in_V1_fu_314_p4;
wire   [31:0] zext_ln11_fu_349_p1;
wire   [31:0] add_ln203_fu_353_p2;
wire   [25:0] lhs_V_fu_398_p3;
wire  signed [31:0] sext_ln728_fu_406_p1;
(* use_dsp48 = "no" *) wire   [31:0] ret_V_fu_410_p2;
wire   [15:0] tmp_V_3_fu_423_p4;
wire   [15:0] zext_ln415_fu_441_p1;
wire   [15:0] tmp_V_4_fu_444_p2;
wire   [0:0] tmp_7_fu_450_p3;
wire   [0:0] p_Result_1_fu_433_p3;
wire   [0:0] xor_ln416_fu_458_p2;
wire   [4:0] tmp_1_fu_478_p4;
wire   [5:0] tmp_2_fu_494_p4;
wire   [0:0] carry_1_fu_464_p2;
wire   [0:0] Range1_all_ones_fu_504_p2;
wire   [0:0] Range1_all_zeros_fu_510_p2;
wire   [0:0] tmp_9_fu_524_p3;
wire   [0:0] Range2_all_ones_fu_488_p2;
wire   [0:0] xor_ln779_fu_532_p2;
wire   [0:0] and_ln779_fu_538_p2;
wire   [0:0] deleted_zeros_fu_516_p3;
wire   [0:0] p_Result_2_fu_470_p3;
wire   [0:0] xor_ln785_fu_558_p2;
wire   [0:0] p_Result_s_fu_415_p3;
wire   [0:0] or_ln785_fu_564_p2;
wire   [0:0] xor_ln785_1_fu_570_p2;
wire   [0:0] deleted_ones_fu_544_p3;
wire   [0:0] and_ln781_fu_552_p2;
wire   [0:0] and_ln786_fu_582_p2;
wire   [0:0] or_ln786_fu_588_p2;
wire   [0:0] xor_ln786_fu_594_p2;
wire   [0:0] underflow_fu_600_p2;
wire   [0:0] overflow_fu_576_p2;
wire   [0:0] or_ln340_2_fu_612_p2;
wire   [0:0] or_ln340_fu_606_p2;
wire   [0:0] or_ln340_1_fu_618_p2;
wire   [15:0] select_ln340_fu_624_p3;
wire   [15:0] select_ln388_fu_632_p3;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

fc_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
fc_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_V(in_V),
    .weight_V(weight_V),
    .bias_V(bias_V),
    .out_V(out_V)
);

fc_IN_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ))
fc_IN_r_m_axi_U(
    .AWVALID(m_axi_IN_r_AWVALID),
    .AWREADY(m_axi_IN_r_AWREADY),
    .AWADDR(m_axi_IN_r_AWADDR),
    .AWID(m_axi_IN_r_AWID),
    .AWLEN(m_axi_IN_r_AWLEN),
    .AWSIZE(m_axi_IN_r_AWSIZE),
    .AWBURST(m_axi_IN_r_AWBURST),
    .AWLOCK(m_axi_IN_r_AWLOCK),
    .AWCACHE(m_axi_IN_r_AWCACHE),
    .AWPROT(m_axi_IN_r_AWPROT),
    .AWQOS(m_axi_IN_r_AWQOS),
    .AWREGION(m_axi_IN_r_AWREGION),
    .AWUSER(m_axi_IN_r_AWUSER),
    .WVALID(m_axi_IN_r_WVALID),
    .WREADY(m_axi_IN_r_WREADY),
    .WDATA(m_axi_IN_r_WDATA),
    .WSTRB(m_axi_IN_r_WSTRB),
    .WLAST(m_axi_IN_r_WLAST),
    .WID(m_axi_IN_r_WID),
    .WUSER(m_axi_IN_r_WUSER),
    .ARVALID(m_axi_IN_r_ARVALID),
    .ARREADY(m_axi_IN_r_ARREADY),
    .ARADDR(m_axi_IN_r_ARADDR),
    .ARID(m_axi_IN_r_ARID),
    .ARLEN(m_axi_IN_r_ARLEN),
    .ARSIZE(m_axi_IN_r_ARSIZE),
    .ARBURST(m_axi_IN_r_ARBURST),
    .ARLOCK(m_axi_IN_r_ARLOCK),
    .ARCACHE(m_axi_IN_r_ARCACHE),
    .ARPROT(m_axi_IN_r_ARPROT),
    .ARQOS(m_axi_IN_r_ARQOS),
    .ARREGION(m_axi_IN_r_ARREGION),
    .ARUSER(m_axi_IN_r_ARUSER),
    .RVALID(m_axi_IN_r_RVALID),
    .RREADY(m_axi_IN_r_RREADY),
    .RDATA(m_axi_IN_r_RDATA),
    .RLAST(m_axi_IN_r_RLAST),
    .RID(m_axi_IN_r_RID),
    .RUSER(m_axi_IN_r_RUSER),
    .RRESP(m_axi_IN_r_RRESP),
    .BVALID(m_axi_IN_r_BVALID),
    .BREADY(m_axi_IN_r_BREADY),
    .BRESP(m_axi_IN_r_BRESP),
    .BID(m_axi_IN_r_BID),
    .BUSER(m_axi_IN_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IN_r_ARVALID),
    .I_ARREADY(IN_r_ARREADY),
    .I_ARADDR(IN_addr_reg_672),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4800),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IN_r_RVALID),
    .I_RREADY(IN_r_RREADY),
    .I_RDATA(IN_r_RDATA),
    .I_RID(IN_r_RID),
    .I_RUSER(IN_r_RUSER),
    .I_RRESP(IN_r_RRESP),
    .I_RLAST(IN_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IN_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IN_r_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(IN_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IN_r_BRESP),
    .I_BID(IN_r_BID),
    .I_BUSER(IN_r_BUSER)
);

fc_W_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_W_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_W_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_W_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_W_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_W_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_W_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_W_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_W_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_W_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_W_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_W_CACHE_VALUE ))
fc_W_m_axi_U(
    .AWVALID(m_axi_W_AWVALID),
    .AWREADY(m_axi_W_AWREADY),
    .AWADDR(m_axi_W_AWADDR),
    .AWID(m_axi_W_AWID),
    .AWLEN(m_axi_W_AWLEN),
    .AWSIZE(m_axi_W_AWSIZE),
    .AWBURST(m_axi_W_AWBURST),
    .AWLOCK(m_axi_W_AWLOCK),
    .AWCACHE(m_axi_W_AWCACHE),
    .AWPROT(m_axi_W_AWPROT),
    .AWQOS(m_axi_W_AWQOS),
    .AWREGION(m_axi_W_AWREGION),
    .AWUSER(m_axi_W_AWUSER),
    .WVALID(m_axi_W_WVALID),
    .WREADY(m_axi_W_WREADY),
    .WDATA(m_axi_W_WDATA),
    .WSTRB(m_axi_W_WSTRB),
    .WLAST(m_axi_W_WLAST),
    .WID(m_axi_W_WID),
    .WUSER(m_axi_W_WUSER),
    .ARVALID(m_axi_W_ARVALID),
    .ARREADY(m_axi_W_ARREADY),
    .ARADDR(m_axi_W_ARADDR),
    .ARID(m_axi_W_ARID),
    .ARLEN(m_axi_W_ARLEN),
    .ARSIZE(m_axi_W_ARSIZE),
    .ARBURST(m_axi_W_ARBURST),
    .ARLOCK(m_axi_W_ARLOCK),
    .ARCACHE(m_axi_W_ARCACHE),
    .ARPROT(m_axi_W_ARPROT),
    .ARQOS(m_axi_W_ARQOS),
    .ARREGION(m_axi_W_ARREGION),
    .ARUSER(m_axi_W_ARUSER),
    .RVALID(m_axi_W_RVALID),
    .RREADY(m_axi_W_RREADY),
    .RDATA(m_axi_W_RDATA),
    .RLAST(m_axi_W_RLAST),
    .RID(m_axi_W_RID),
    .RUSER(m_axi_W_RUSER),
    .RRESP(m_axi_W_RRESP),
    .BVALID(m_axi_W_BVALID),
    .BREADY(m_axi_W_BREADY),
    .BRESP(m_axi_W_BRESP),
    .BID(m_axi_W_BID),
    .BUSER(m_axi_W_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(W_ARVALID),
    .I_ARREADY(W_ARREADY),
    .I_ARADDR(W_addr_reg_666),
    .I_ARID(1'd0),
    .I_ARLEN(32'd24000),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(W_RVALID),
    .I_RREADY(W_RREADY),
    .I_RDATA(W_RDATA),
    .I_RID(W_RID),
    .I_RUSER(W_RUSER),
    .I_RRESP(W_RRESP),
    .I_RLAST(W_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(W_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(W_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(W_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(W_BRESP),
    .I_BID(W_BID),
    .I_BUSER(W_BUSER)
);

fc_B_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B_CACHE_VALUE ))
fc_B_m_axi_U(
    .AWVALID(m_axi_B_AWVALID),
    .AWREADY(m_axi_B_AWREADY),
    .AWADDR(m_axi_B_AWADDR),
    .AWID(m_axi_B_AWID),
    .AWLEN(m_axi_B_AWLEN),
    .AWSIZE(m_axi_B_AWSIZE),
    .AWBURST(m_axi_B_AWBURST),
    .AWLOCK(m_axi_B_AWLOCK),
    .AWCACHE(m_axi_B_AWCACHE),
    .AWPROT(m_axi_B_AWPROT),
    .AWQOS(m_axi_B_AWQOS),
    .AWREGION(m_axi_B_AWREGION),
    .AWUSER(m_axi_B_AWUSER),
    .WVALID(m_axi_B_WVALID),
    .WREADY(m_axi_B_WREADY),
    .WDATA(m_axi_B_WDATA),
    .WSTRB(m_axi_B_WSTRB),
    .WLAST(m_axi_B_WLAST),
    .WID(m_axi_B_WID),
    .WUSER(m_axi_B_WUSER),
    .ARVALID(m_axi_B_ARVALID),
    .ARREADY(m_axi_B_ARREADY),
    .ARADDR(m_axi_B_ARADDR),
    .ARID(m_axi_B_ARID),
    .ARLEN(m_axi_B_ARLEN),
    .ARSIZE(m_axi_B_ARSIZE),
    .ARBURST(m_axi_B_ARBURST),
    .ARLOCK(m_axi_B_ARLOCK),
    .ARCACHE(m_axi_B_ARCACHE),
    .ARPROT(m_axi_B_ARPROT),
    .ARQOS(m_axi_B_ARQOS),
    .ARREGION(m_axi_B_ARREGION),
    .ARUSER(m_axi_B_ARUSER),
    .RVALID(m_axi_B_RVALID),
    .RREADY(m_axi_B_RREADY),
    .RDATA(m_axi_B_RDATA),
    .RLAST(m_axi_B_RLAST),
    .RID(m_axi_B_RID),
    .RUSER(m_axi_B_RUSER),
    .RRESP(m_axi_B_RRESP),
    .BVALID(m_axi_B_BVALID),
    .BREADY(m_axi_B_BREADY),
    .BRESP(m_axi_B_BRESP),
    .BID(m_axi_B_BID),
    .BUSER(m_axi_B_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(B_ARVALID),
    .I_ARREADY(B_ARREADY),
    .I_ARADDR(B_addr_reg_660),
    .I_ARID(1'd0),
    .I_ARLEN(32'd5),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(B_RVALID),
    .I_RREADY(B_RREADY),
    .I_RDATA(B_RDATA),
    .I_RID(B_RID),
    .I_RUSER(B_RUSER),
    .I_RRESP(B_RRESP),
    .I_RLAST(B_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(B_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(B_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(B_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(B_BRESP),
    .I_BID(B_BID),
    .I_BUSER(B_BUSER)
);

fc_OUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
fc_OUT_r_m_axi_U(
    .AWVALID(m_axi_OUT_r_AWVALID),
    .AWREADY(m_axi_OUT_r_AWREADY),
    .AWADDR(m_axi_OUT_r_AWADDR),
    .AWID(m_axi_OUT_r_AWID),
    .AWLEN(m_axi_OUT_r_AWLEN),
    .AWSIZE(m_axi_OUT_r_AWSIZE),
    .AWBURST(m_axi_OUT_r_AWBURST),
    .AWLOCK(m_axi_OUT_r_AWLOCK),
    .AWCACHE(m_axi_OUT_r_AWCACHE),
    .AWPROT(m_axi_OUT_r_AWPROT),
    .AWQOS(m_axi_OUT_r_AWQOS),
    .AWREGION(m_axi_OUT_r_AWREGION),
    .AWUSER(m_axi_OUT_r_AWUSER),
    .WVALID(m_axi_OUT_r_WVALID),
    .WREADY(m_axi_OUT_r_WREADY),
    .WDATA(m_axi_OUT_r_WDATA),
    .WSTRB(m_axi_OUT_r_WSTRB),
    .WLAST(m_axi_OUT_r_WLAST),
    .WID(m_axi_OUT_r_WID),
    .WUSER(m_axi_OUT_r_WUSER),
    .ARVALID(m_axi_OUT_r_ARVALID),
    .ARREADY(m_axi_OUT_r_ARREADY),
    .ARADDR(m_axi_OUT_r_ARADDR),
    .ARID(m_axi_OUT_r_ARID),
    .ARLEN(m_axi_OUT_r_ARLEN),
    .ARSIZE(m_axi_OUT_r_ARSIZE),
    .ARBURST(m_axi_OUT_r_ARBURST),
    .ARLOCK(m_axi_OUT_r_ARLOCK),
    .ARCACHE(m_axi_OUT_r_ARCACHE),
    .ARPROT(m_axi_OUT_r_ARPROT),
    .ARQOS(m_axi_OUT_r_ARQOS),
    .ARREGION(m_axi_OUT_r_ARREGION),
    .ARUSER(m_axi_OUT_r_ARUSER),
    .RVALID(m_axi_OUT_r_RVALID),
    .RREADY(m_axi_OUT_r_RREADY),
    .RDATA(m_axi_OUT_r_RDATA),
    .RLAST(m_axi_OUT_r_RLAST),
    .RID(m_axi_OUT_r_RID),
    .RUSER(m_axi_OUT_r_RUSER),
    .RRESP(m_axi_OUT_r_RRESP),
    .BVALID(m_axi_OUT_r_BVALID),
    .BREADY(m_axi_OUT_r_BREADY),
    .BRESP(m_axi_OUT_r_BRESP),
    .BID(m_axi_OUT_r_BID),
    .BUSER(m_axi_OUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUT_r_RDATA),
    .I_RID(OUT_r_RID),
    .I_RUSER(OUT_r_RUSER),
    .I_RRESP(OUT_r_RRESP),
    .I_RLAST(OUT_r_RLAST),
    .I_AWVALID(OUT_r_AWVALID),
    .I_AWREADY(OUT_r_AWREADY),
    .I_AWADDR(OUT_addr_reg_691),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUT_r_WVALID),
    .I_WREADY(OUT_r_WREADY),
    .I_WDATA(select_ln340_1_reg_736),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(OUT_r_BVALID),
    .I_BREADY(OUT_r_BREADY),
    .I_BRESP(OUT_r_BRESP),
    .I_BID(OUT_r_BID),
    .I_BUSER(OUT_r_BUSER)
);

fc_mul_mul_16s_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fc_mul_mul_16s_16bkb_U1(
    .din0(IN_addr_read_reg_712),
    .din1(W_addr_read_reg_717),
    .dout(r_V_2_fu_648_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state16)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_0_reg_232 <= i_reg_686;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_232 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_702 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_253 <= j_reg_706;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_reg_253 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_702_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_Val2_s_reg_243 <= select_ln340_1_reg_736;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Val2_s_reg_243 <= tmp_V_reg_697;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        B_addr_reg_660[30 : 0] <= empty_fu_284_p1[30 : 0];
        IN_addr_reg_672[30 : 0] <= empty_5_fu_324_p1[30 : 0];
        W_addr_reg_666[30 : 0] <= empty_4_fu_304_p1[30 : 0];
        tmp_3_reg_655 <= {{out_V[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_702 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_addr_read_reg_712 <= IN_r_RDATA;
        W_addr_read_reg_717 <= W_RDATA;
        icmp_ln12_1_reg_722 <= icmp_ln12_1_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state9_io) & (icmp_ln10_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        OUT_addr_reg_691 <= zext_ln203_fu_358_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state9_io) & (1'b1 == ap_CS_fsm_state9))) begin
        i_reg_686 <= i_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln12_1_reg_722_pp0_iter2_reg <= icmp_ln12_1_reg_722;
        icmp_ln12_1_reg_722_pp0_iter3_reg <= icmp_ln12_1_reg_722_pp0_iter2_reg;
        icmp_ln12_1_reg_722_pp0_iter4_reg <= icmp_ln12_1_reg_722_pp0_iter3_reg;
        icmp_ln12_1_reg_722_pp0_iter5_reg <= icmp_ln12_1_reg_722_pp0_iter4_reg;
        icmp_ln12_1_reg_722_pp0_iter6_reg <= icmp_ln12_1_reg_722_pp0_iter5_reg;
        icmp_ln12_1_reg_722_pp0_iter7_reg <= icmp_ln12_1_reg_722_pp0_iter6_reg;
        icmp_ln12_1_reg_722_pp0_iter8_reg <= icmp_ln12_1_reg_722_pp0_iter7_reg;
        icmp_ln12_reg_702_pp0_iter2_reg <= icmp_ln12_reg_702_pp0_iter1_reg;
        icmp_ln12_reg_702_pp0_iter3_reg <= icmp_ln12_reg_702_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_702 <= icmp_ln12_fu_368_p2;
        icmp_ln12_reg_702_pp0_iter1_reg <= icmp_ln12_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_706 <= j_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_cast11_reg_678[30 : 0] <= p_cast11_fu_334_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_702_pp0_iter1_reg == 1'd0))) begin
        r_V_2_reg_726 <= r_V_2_fu_648_p2;
        tmp_6_reg_731 <= r_V_2_fu_648_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_702_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        select_ln340_1_reg_736 <= select_ln340_1_fu_640_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_V_reg_697 <= B_RDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        B_ARVALID = 1'b1;
    end else begin
        B_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state14))) begin
        B_RREADY = 1'b1;
    end else begin
        B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_blk_n_AR = m_axi_B_ARREADY;
    end else begin
        B_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        B_blk_n_R = m_axi_B_RVALID;
    end else begin
        B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state9_io) & (icmp_ln10_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        IN_r_ARVALID = 1'b1;
    end else begin
        IN_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_702 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_RREADY = 1'b1;
    end else begin
        IN_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        IN_r_blk_n_AR = m_axi_IN_r_ARREADY;
    end else begin
        IN_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln12_reg_702 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IN_r_blk_n_R = m_axi_IN_r_RVALID;
    end else begin
        IN_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_1_reg_722_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OUT_r_AWVALID = 1'b1;
    end else begin
        OUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_1_reg_722_pp0_iter8_reg == 1'd1) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        OUT_r_BREADY = 1'b1;
    end else begin
        OUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_1_reg_722_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        OUT_r_WVALID = 1'b1;
    end else begin
        OUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_1_reg_722_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OUT_r_blk_n_AW = m_axi_OUT_r_AWREADY;
    end else begin
        OUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln12_1_reg_722_pp0_iter8_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        OUT_r_blk_n_B = m_axi_OUT_r_BVALID;
    end else begin
        OUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln12_1_reg_722_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        OUT_r_blk_n_W = m_axi_OUT_r_WREADY;
    end else begin
        OUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        W_ARVALID = 1'b1;
    end else begin
        W_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln12_reg_702 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_RREADY = 1'b1;
    end else begin
        W_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        W_blk_n_AR = m_axi_W_ARREADY;
    end else begin
        W_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln12_reg_702 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_blk_n_R = m_axi_W_RVALID;
    end else begin
        W_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln12_fu_368_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state9_io) & (icmp_ln10_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln12_reg_702 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_257_p4 = j_reg_706;
    end else begin
        ap_phi_mux_j_0_phi_fu_257_p4 = j_0_reg_253;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln12_reg_702_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_phi_mux_p_Val2_s_phi_fu_246_p4 = select_ln340_1_reg_736;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_246_p4 = p_Val2_s_reg_243;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state9_io) & (icmp_ln10_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b0 == ap_block_state9_io) & (icmp_ln10_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state9_io) & (icmp_ln10_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln12_fu_368_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln12_fu_368_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_504_p2 = ((tmp_2_fu_494_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_510_p2 = ((tmp_2_fu_494_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_488_p2 = ((tmp_1_fu_478_p4 == 5'd31) ? 1'b1 : 1'b0);

assign add_ln203_fu_353_p2 = (zext_ln11_fu_349_p1 + p_cast11_reg_678);

assign and_ln779_fu_538_p2 = (xor_ln779_fu_532_p2 & Range2_all_ones_fu_488_p2);

assign and_ln781_fu_552_p2 = (carry_1_fu_464_p2 & Range1_all_ones_fu_504_p2);

assign and_ln786_fu_582_p2 = (p_Result_2_fu_470_p3 & deleted_ones_fu_544_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b0 == OUT_r_BVALID) & (icmp_ln12_1_reg_722_pp0_iter8_reg == 1'd1) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == W_RVALID) & (icmp_ln12_reg_702 == 1'd0)) | ((1'b0 == IN_r_RVALID) & (icmp_ln12_reg_702 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == OUT_r_BVALID) & (icmp_ln12_1_reg_722_pp0_iter8_reg == 1'd1) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == W_RVALID) & (icmp_ln12_reg_702 == 1'd0)) | ((1'b0 == IN_r_RVALID) & (icmp_ln12_reg_702 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == OUT_r_BVALID) & (icmp_ln12_1_reg_722_pp0_iter8_reg == 1'd1) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == W_RVALID) & (icmp_ln12_reg_702 == 1'd0)) | ((1'b0 == IN_r_RVALID) & (icmp_ln12_reg_702 == 1'd0)))));
end

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = (((1'b0 == W_RVALID) & (icmp_ln12_reg_702 == 1'd0)) | ((1'b0 == IN_r_RVALID) & (icmp_ln12_reg_702 == 1'd0)));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((1'b0 == OUT_r_AWREADY) & (icmp_ln12_1_reg_722_pp0_iter2_reg == 1'd1));
end

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((1'b0 == OUT_r_WREADY) & (icmp_ln12_1_reg_722_pp0_iter3_reg == 1'd1));
end

assign ap_block_state20_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp0_stage0_iter9 = ((1'b0 == OUT_r_BVALID) & (icmp_ln12_1_reg_722_pp0_iter8_reg == 1'd1));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == B_ARREADY) | (1'b0 == W_ARREADY));
end

always @ (*) begin
    ap_block_state9_io = ((1'b0 == IN_r_ARREADY) & (icmp_ln10_fu_337_p2 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias_V5_fu_274_p4 = {{bias_V[31:1]}};

assign carry_1_fu_464_p2 = (xor_ln416_fu_458_p2 & p_Result_1_fu_433_p3);

assign deleted_ones_fu_544_p3 = ((carry_1_fu_464_p2[0:0] === 1'b1) ? and_ln779_fu_538_p2 : Range1_all_ones_fu_504_p2);

assign deleted_zeros_fu_516_p3 = ((carry_1_fu_464_p2[0:0] === 1'b1) ? Range1_all_ones_fu_504_p2 : Range1_all_zeros_fu_510_p2);

assign empty_4_fu_304_p1 = weight_V3_fu_294_p4;

assign empty_5_fu_324_p1 = in_V1_fu_314_p4;

assign empty_fu_284_p1 = bias_V5_fu_274_p4;

assign i_fu_343_p2 = (i_0_reg_232 + 3'd1);

assign icmp_ln10_fu_337_p2 = ((i_0_reg_232 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln12_1_fu_380_p2 = ((j_reg_706 == 13'd4800) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_368_p2 = ((ap_phi_mux_j_0_phi_fu_257_p4 == 13'd4800) ? 1'b1 : 1'b0);

assign in_V1_fu_314_p4 = {{in_V[31:1]}};

assign j_fu_374_p2 = (ap_phi_mux_j_0_phi_fu_257_p4 + 13'd1);

assign lhs_V_fu_398_p3 = {{ap_phi_mux_p_Val2_s_phi_fu_246_p4}, {10'd0}};

assign or_ln340_1_fu_618_p2 = (or_ln340_2_fu_612_p2 | and_ln781_fu_552_p2);

assign or_ln340_2_fu_612_p2 = (xor_ln785_1_fu_570_p2 | and_ln786_fu_582_p2);

assign or_ln340_fu_606_p2 = (underflow_fu_600_p2 | overflow_fu_576_p2);

assign or_ln785_fu_564_p2 = (xor_ln785_fu_558_p2 | p_Result_2_fu_470_p3);

assign or_ln786_fu_588_p2 = (and_ln786_fu_582_p2 | and_ln781_fu_552_p2);

assign overflow_fu_576_p2 = (xor_ln785_1_fu_570_p2 & or_ln785_fu_564_p2);

assign p_Result_1_fu_433_p3 = ret_V_fu_410_p2[32'd25];

assign p_Result_2_fu_470_p3 = tmp_V_4_fu_444_p2[32'd15];

assign p_Result_s_fu_415_p3 = ret_V_fu_410_p2[32'd31];

assign p_cast11_fu_334_p1 = tmp_3_reg_655;

assign ret_V_fu_410_p2 = ($signed(r_V_2_reg_726) + $signed(sext_ln728_fu_406_p1));

assign select_ln340_1_fu_640_p3 = ((or_ln340_1_fu_618_p2[0:0] === 1'b1) ? select_ln340_fu_624_p3 : select_ln388_fu_632_p3);

assign select_ln340_fu_624_p3 = ((or_ln340_fu_606_p2[0:0] === 1'b1) ? 16'd32767 : tmp_V_4_fu_444_p2);

assign select_ln388_fu_632_p3 = ((underflow_fu_600_p2[0:0] === 1'b1) ? 16'd32768 : tmp_V_4_fu_444_p2);

assign sext_ln728_fu_406_p1 = $signed(lhs_V_fu_398_p3);

assign tmp_1_fu_478_p4 = {{ret_V_fu_410_p2[31:27]}};

assign tmp_2_fu_494_p4 = {{ret_V_fu_410_p2[31:26]}};

assign tmp_7_fu_450_p3 = tmp_V_4_fu_444_p2[32'd15];

assign tmp_9_fu_524_p3 = ret_V_fu_410_p2[32'd26];

assign tmp_V_3_fu_423_p4 = {{ret_V_fu_410_p2[25:10]}};

assign tmp_V_4_fu_444_p2 = (tmp_V_3_fu_423_p4 + zext_ln415_fu_441_p1);

assign underflow_fu_600_p2 = (xor_ln786_fu_594_p2 & p_Result_s_fu_415_p3);

assign weight_V3_fu_294_p4 = {{weight_V[31:1]}};

assign xor_ln416_fu_458_p2 = (tmp_7_fu_450_p3 ^ 1'd1);

assign xor_ln779_fu_532_p2 = (tmp_9_fu_524_p3 ^ 1'd1);

assign xor_ln785_1_fu_570_p2 = (p_Result_s_fu_415_p3 ^ 1'd1);

assign xor_ln785_fu_558_p2 = (deleted_zeros_fu_516_p3 ^ 1'd1);

assign xor_ln786_fu_594_p2 = (or_ln786_fu_588_p2 ^ 1'd1);

assign zext_ln11_fu_349_p1 = i_0_reg_232;

assign zext_ln203_fu_358_p1 = add_ln203_fu_353_p2;

assign zext_ln415_fu_441_p1 = tmp_6_reg_731;

always @ (posedge ap_clk) begin
    B_addr_reg_660[31] <= 1'b0;
    W_addr_reg_666[31] <= 1'b0;
    IN_addr_reg_672[31] <= 1'b0;
    p_cast11_reg_678[31] <= 1'b0;
end

endmodule //fc
