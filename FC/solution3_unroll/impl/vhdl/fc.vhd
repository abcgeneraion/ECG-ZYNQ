-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_W_ID_WIDTH : INTEGER := 1;
    C_M_AXI_W_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_W_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_W_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_B_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_W_USER_VALUE : INTEGER := 0;
    C_M_AXI_W_PROT_VALUE : INTEGER := 0;
    C_M_AXI_W_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B_USER_VALUE : INTEGER := 0;
    C_M_AXI_B_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IN_r_AWVALID : OUT STD_LOGIC;
    m_axi_IN_r_AWREADY : IN STD_LOGIC;
    m_axi_IN_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_IN_r_WVALID : OUT STD_LOGIC;
    m_axi_IN_r_WREADY : IN STD_LOGIC;
    m_axi_IN_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_IN_r_WLAST : OUT STD_LOGIC;
    m_axi_IN_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_IN_r_ARVALID : OUT STD_LOGIC;
    m_axi_IN_r_ARREADY : IN STD_LOGIC;
    m_axi_IN_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_IN_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IN_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IN_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IN_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RVALID : IN STD_LOGIC;
    m_axi_IN_r_RREADY : OUT STD_LOGIC;
    m_axi_IN_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_IN_r_RLAST : IN STD_LOGIC;
    m_axi_IN_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_IN_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BVALID : IN STD_LOGIC;
    m_axi_IN_r_BREADY : OUT STD_LOGIC;
    m_axi_IN_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IN_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_IN_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    m_axi_W_AWVALID : OUT STD_LOGIC;
    m_axi_W_AWREADY : IN STD_LOGIC;
    m_axi_W_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ADDR_WIDTH-1 downto 0);
    m_axi_W_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_AWUSER_WIDTH-1 downto 0);
    m_axi_W_WVALID : OUT STD_LOGIC;
    m_axi_W_WREADY : IN STD_LOGIC;
    m_axi_W_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DATA_WIDTH-1 downto 0);
    m_axi_W_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_W_DATA_WIDTH/8-1 downto 0);
    m_axi_W_WLAST : OUT STD_LOGIC;
    m_axi_W_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_WUSER_WIDTH-1 downto 0);
    m_axi_W_ARVALID : OUT STD_LOGIC;
    m_axi_W_ARREADY : IN STD_LOGIC;
    m_axi_W_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ADDR_WIDTH-1 downto 0);
    m_axi_W_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_W_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_W_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_W_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_W_ARUSER_WIDTH-1 downto 0);
    m_axi_W_RVALID : IN STD_LOGIC;
    m_axi_W_RREADY : OUT STD_LOGIC;
    m_axi_W_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_W_DATA_WIDTH-1 downto 0);
    m_axi_W_RLAST : IN STD_LOGIC;
    m_axi_W_RID : IN STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_RUSER_WIDTH-1 downto 0);
    m_axi_W_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_BVALID : IN STD_LOGIC;
    m_axi_W_BREADY : OUT STD_LOGIC;
    m_axi_W_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_W_BID : IN STD_LOGIC_VECTOR (C_M_AXI_W_ID_WIDTH-1 downto 0);
    m_axi_W_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_W_BUSER_WIDTH-1 downto 0);
    m_axi_B_AWVALID : OUT STD_LOGIC;
    m_axi_B_AWREADY : IN STD_LOGIC;
    m_axi_B_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_AWUSER_WIDTH-1 downto 0);
    m_axi_B_WVALID : OUT STD_LOGIC;
    m_axi_B_WREADY : IN STD_LOGIC;
    m_axi_B_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH/8-1 downto 0);
    m_axi_B_WLAST : OUT STD_LOGIC;
    m_axi_B_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_WUSER_WIDTH-1 downto 0);
    m_axi_B_ARVALID : OUT STD_LOGIC;
    m_axi_B_ARREADY : IN STD_LOGIC;
    m_axi_B_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ADDR_WIDTH-1 downto 0);
    m_axi_B_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_B_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_B_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_B_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B_ARUSER_WIDTH-1 downto 0);
    m_axi_B_RVALID : IN STD_LOGIC;
    m_axi_B_RREADY : OUT STD_LOGIC;
    m_axi_B_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B_DATA_WIDTH-1 downto 0);
    m_axi_B_RLAST : IN STD_LOGIC;
    m_axi_B_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_RUSER_WIDTH-1 downto 0);
    m_axi_B_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BVALID : IN STD_LOGIC;
    m_axi_B_BREADY : OUT STD_LOGIC;
    m_axi_B_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_B_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B_ID_WIDTH-1 downto 0);
    m_axi_B_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B_BUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=24072,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=5,HLS_SYN_FF=3862,HLS_SYN_LUT=4440,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_12C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001011000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv13_12C0 : STD_LOGIC_VECTOR (12 downto 0) := "1001011000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_2580 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010010110000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3840 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011100001000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_4B00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100101100000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_V : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal IN_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal IN_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln14_reg_2264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln14_1_reg_2310 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln14_2_reg_2362 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln14_3_reg_2414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln14_4_reg_2466 : STD_LOGIC_VECTOR (0 downto 0);
    signal W_blk_n_AR : STD_LOGIC;
    signal W_blk_n_R : STD_LOGIC;
    signal B_blk_n_AR : STD_LOGIC;
    signal B_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal OUT_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal OUT_r_blk_n_W : STD_LOGIC;
    signal OUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal IN_r_AWREADY : STD_LOGIC;
    signal IN_r_WREADY : STD_LOGIC;
    signal IN_r_ARVALID : STD_LOGIC;
    signal IN_r_ARREADY : STD_LOGIC;
    signal IN_r_RVALID : STD_LOGIC;
    signal IN_r_RREADY : STD_LOGIC;
    signal IN_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal IN_r_RLAST : STD_LOGIC;
    signal IN_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BVALID : STD_LOGIC;
    signal IN_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IN_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_AWREADY : STD_LOGIC;
    signal W_WREADY : STD_LOGIC;
    signal W_ARVALID : STD_LOGIC;
    signal W_ARREADY : STD_LOGIC;
    signal W_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal W_RVALID : STD_LOGIC;
    signal W_RREADY : STD_LOGIC;
    signal W_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal W_RLAST : STD_LOGIC;
    signal W_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal W_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_BVALID : STD_LOGIC;
    signal W_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal W_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal W_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_AWREADY : STD_LOGIC;
    signal B_WREADY : STD_LOGIC;
    signal B_ARVALID : STD_LOGIC;
    signal B_ARREADY : STD_LOGIC;
    signal B_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal B_RVALID : STD_LOGIC;
    signal B_RREADY : STD_LOGIC;
    signal B_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal B_RLAST : STD_LOGIC;
    signal B_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal B_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal B_BVALID : STD_LOGIC;
    signal B_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal B_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal B_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_AWVALID : STD_LOGIC;
    signal OUT_r_AWREADY : STD_LOGIC;
    signal OUT_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal OUT_r_WVALID : STD_LOGIC;
    signal OUT_r_WREADY : STD_LOGIC;
    signal OUT_r_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_ARREADY : STD_LOGIC;
    signal OUT_r_RVALID : STD_LOGIC;
    signal OUT_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal OUT_r_RLAST : STD_LOGIC;
    signal OUT_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BVALID : STD_LOGIC;
    signal OUT_r_BREADY : STD_LOGIC;
    signal OUT_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal OUT_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_0_reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_0_reg_407 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_1_reg_418 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_1_reg_429 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_2_reg_440 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_2_reg_451 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_3_reg_462 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_3_reg_473 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_4_reg_484 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_4_reg_495 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_block_state53_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state54_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state55_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state56_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_block_state67_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state68_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state69_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state70_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal out_V7_reg_2193 : STD_LOGIC_VECTOR (30 downto 0);
    signal bias_V5_reg_2199 : STD_LOGIC_VECTOR (30 downto 0);
    signal weight_V3_reg_2205 : STD_LOGIC_VECTOR (30 downto 0);
    signal IN_addr_reg_2211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal B_addr_read_reg_2229 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast29_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast29_reg_2234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal OUT_addr_reg_2242 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast28_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast28_reg_2248 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast27_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast27_reg_2256 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_2264_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_2264_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_604_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal W_addr_read_reg_2273 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_2158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_reg_2278 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_2283 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_5_fu_866_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal B_addr_1_reg_2293 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_addr_1_reg_2299 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_addr_1_read_reg_2305 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_1_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_2310_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_2310_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_1_fu_910_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal W_addr_1_read_reg_2319 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_2165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_reg_2324 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_2329 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_1172_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal OUT_addr_1_reg_2339 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal B_addr_2_reg_2345 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_addr_2_reg_2351 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_addr_2_read_reg_2357 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_2_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_2_reg_2362_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_2_reg_2362_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_2_fu_1231_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal W_addr_2_read_reg_2371 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_2_fu_2172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_2_reg_2376 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_2381 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_7_fu_1493_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal OUT_addr_2_reg_2391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal B_addr_3_reg_2397 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_addr_3_reg_2403 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_addr_3_read_reg_2409 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_3_fu_1546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_3_reg_2414_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_3_reg_2414_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_3_fu_1552_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal W_addr_3_read_reg_2423 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_3_fu_2179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_3_reg_2428 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_2433 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_1814_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal OUT_addr_3_reg_2443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal B_addr_4_reg_2449 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_addr_4_reg_2455 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_addr_4_read_reg_2461 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_4_fu_1867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_4_reg_2466_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_4_reg_2466_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_4_fu_1873_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal W_addr_4_read_reg_2475 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_4_fu_2186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_4_reg_2480 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_2485 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_9_fu_2135_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal OUT_addr_4_reg_2495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state25 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state39 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state53 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state67 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal empty_6_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_4_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_1185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_1_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_1_fu_1215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_1_fu_1506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_2_fu_1521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_2_fu_1536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_2_fu_1827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_3_fu_1842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_3_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_3_fu_2148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state30_io : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_state58_io : BOOLEAN;
    signal in_V1_fu_540_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_624_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_fu_636_p2 : signal is "no";
    signal trunc_ln1_fu_649_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_667_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_fu_670_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_659_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_704_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_720_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_750_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_742_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_fu_770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_850_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_858_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln12_fu_874_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1117_fu_889_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln728_1_fu_930_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_1_fu_938_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_1_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_1_fu_942_p2 : signal is "no";
    signal trunc_ln708_1_fu_955_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_1_fu_973_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_1_fu_976_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_982_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_965_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1010_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_1026_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_1_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_1_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_1_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_1_fu_1048_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1002_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_5_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_6_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_1_fu_1076_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_1_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_1_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_6_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_1_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_1156_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_1164_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln203_fu_1180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_1_fu_1195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1117_1_fu_1210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln728_2_fu_1251_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_2_fu_1259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_2_fu_1263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_2_fu_1263_p2 : signal is "no";
    signal trunc_ln708_2_fu_1276_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_2_fu_1294_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_2_fu_1297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_1303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1331_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_1347_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_2_fu_1317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_5_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_2_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1377_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_2_fu_1385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_2_fu_1391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_2_fu_1369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_1323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_fu_1417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_7_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_2_fu_1397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_2_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_1435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_2_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_2_fu_1429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_10_fu_1465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_1459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_1471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_1477_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_2_fu_1485_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln203_1_fu_1501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_2_fu_1516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1117_2_fu_1531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln728_3_fu_1572_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_3_fu_1580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_3_fu_1584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_3_fu_1584_p2 : signal is "no";
    signal trunc_ln708_3_fu_1597_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_3_fu_1615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_3_fu_1618_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_1624_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_1607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_1632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_1652_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_1668_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_3_fu_1638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_fu_1678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_3_fu_1684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_1698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_6_fu_1662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_3_fu_1706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_3_fu_1712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_3_fu_1690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_3_fu_1732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_1589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_3_fu_1738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_8_fu_1744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_3_fu_1718_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_3_fu_1726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_1756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_3_fu_1762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_1768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_8_fu_1774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_3_fu_1750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_12_fu_1786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_1780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_11_fu_1792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_1798_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_3_fu_1806_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln203_2_fu_1822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_3_fu_1837_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1117_3_fu_1852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln728_4_fu_1893_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_4_fu_1901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_4_fu_1905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_4_fu_1905_p2 : signal is "no";
    signal trunc_ln708_4_fu_1918_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_4_fu_1936_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_4_fu_1939_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_1945_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1928_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_4_fu_1953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1973_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_1989_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_4_fu_1959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_9_fu_1999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_4_fu_2005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_2019_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_8_fu_1983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_4_fu_2027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_4_fu_2033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_4_fu_2011_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1965_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_4_fu_2053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1910_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_4_fu_2059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_9_fu_2065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_4_fu_2039_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_4_fu_2047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_fu_2077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_4_fu_2083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_2089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_9_fu_2095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_4_fu_2071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_14_fu_2107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_2101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_13_fu_2113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_2119_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_4_fu_2127_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln203_3_fu_2143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component fc_mul_mul_16s_16bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        weight_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_IN_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_W_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_B_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_OUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fc_CTRL_s_axi_U : component fc_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        in_V => in_V,
        weight_V => weight_V,
        bias_V => bias_V,
        out_V => out_V);

    fc_IN_r_m_axi_U : component fc_IN_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IN_r_AWVALID,
        AWREADY => m_axi_IN_r_AWREADY,
        AWADDR => m_axi_IN_r_AWADDR,
        AWID => m_axi_IN_r_AWID,
        AWLEN => m_axi_IN_r_AWLEN,
        AWSIZE => m_axi_IN_r_AWSIZE,
        AWBURST => m_axi_IN_r_AWBURST,
        AWLOCK => m_axi_IN_r_AWLOCK,
        AWCACHE => m_axi_IN_r_AWCACHE,
        AWPROT => m_axi_IN_r_AWPROT,
        AWQOS => m_axi_IN_r_AWQOS,
        AWREGION => m_axi_IN_r_AWREGION,
        AWUSER => m_axi_IN_r_AWUSER,
        WVALID => m_axi_IN_r_WVALID,
        WREADY => m_axi_IN_r_WREADY,
        WDATA => m_axi_IN_r_WDATA,
        WSTRB => m_axi_IN_r_WSTRB,
        WLAST => m_axi_IN_r_WLAST,
        WID => m_axi_IN_r_WID,
        WUSER => m_axi_IN_r_WUSER,
        ARVALID => m_axi_IN_r_ARVALID,
        ARREADY => m_axi_IN_r_ARREADY,
        ARADDR => m_axi_IN_r_ARADDR,
        ARID => m_axi_IN_r_ARID,
        ARLEN => m_axi_IN_r_ARLEN,
        ARSIZE => m_axi_IN_r_ARSIZE,
        ARBURST => m_axi_IN_r_ARBURST,
        ARLOCK => m_axi_IN_r_ARLOCK,
        ARCACHE => m_axi_IN_r_ARCACHE,
        ARPROT => m_axi_IN_r_ARPROT,
        ARQOS => m_axi_IN_r_ARQOS,
        ARREGION => m_axi_IN_r_ARREGION,
        ARUSER => m_axi_IN_r_ARUSER,
        RVALID => m_axi_IN_r_RVALID,
        RREADY => m_axi_IN_r_RREADY,
        RDATA => m_axi_IN_r_RDATA,
        RLAST => m_axi_IN_r_RLAST,
        RID => m_axi_IN_r_RID,
        RUSER => m_axi_IN_r_RUSER,
        RRESP => m_axi_IN_r_RRESP,
        BVALID => m_axi_IN_r_BVALID,
        BREADY => m_axi_IN_r_BREADY,
        BRESP => m_axi_IN_r_BRESP,
        BID => m_axi_IN_r_BID,
        BUSER => m_axi_IN_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IN_r_ARVALID,
        I_ARREADY => IN_r_ARREADY,
        I_ARADDR => IN_addr_reg_2211,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_12C0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IN_r_RVALID,
        I_RREADY => IN_r_RREADY,
        I_RDATA => IN_r_RDATA,
        I_RID => IN_r_RID,
        I_RUSER => IN_r_RUSER,
        I_RRESP => IN_r_RRESP,
        I_RLAST => IN_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IN_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IN_r_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => IN_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IN_r_BRESP,
        I_BID => IN_r_BID,
        I_BUSER => IN_r_BUSER);

    fc_W_m_axi_U : component fc_W_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_W_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_W_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_W_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_W_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_W_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_W_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_W_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_W_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_W_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_W_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_W_CACHE_VALUE)
    port map (
        AWVALID => m_axi_W_AWVALID,
        AWREADY => m_axi_W_AWREADY,
        AWADDR => m_axi_W_AWADDR,
        AWID => m_axi_W_AWID,
        AWLEN => m_axi_W_AWLEN,
        AWSIZE => m_axi_W_AWSIZE,
        AWBURST => m_axi_W_AWBURST,
        AWLOCK => m_axi_W_AWLOCK,
        AWCACHE => m_axi_W_AWCACHE,
        AWPROT => m_axi_W_AWPROT,
        AWQOS => m_axi_W_AWQOS,
        AWREGION => m_axi_W_AWREGION,
        AWUSER => m_axi_W_AWUSER,
        WVALID => m_axi_W_WVALID,
        WREADY => m_axi_W_WREADY,
        WDATA => m_axi_W_WDATA,
        WSTRB => m_axi_W_WSTRB,
        WLAST => m_axi_W_WLAST,
        WID => m_axi_W_WID,
        WUSER => m_axi_W_WUSER,
        ARVALID => m_axi_W_ARVALID,
        ARREADY => m_axi_W_ARREADY,
        ARADDR => m_axi_W_ARADDR,
        ARID => m_axi_W_ARID,
        ARLEN => m_axi_W_ARLEN,
        ARSIZE => m_axi_W_ARSIZE,
        ARBURST => m_axi_W_ARBURST,
        ARLOCK => m_axi_W_ARLOCK,
        ARCACHE => m_axi_W_ARCACHE,
        ARPROT => m_axi_W_ARPROT,
        ARQOS => m_axi_W_ARQOS,
        ARREGION => m_axi_W_ARREGION,
        ARUSER => m_axi_W_ARUSER,
        RVALID => m_axi_W_RVALID,
        RREADY => m_axi_W_RREADY,
        RDATA => m_axi_W_RDATA,
        RLAST => m_axi_W_RLAST,
        RID => m_axi_W_RID,
        RUSER => m_axi_W_RUSER,
        RRESP => m_axi_W_RRESP,
        BVALID => m_axi_W_BVALID,
        BREADY => m_axi_W_BREADY,
        BRESP => m_axi_W_BRESP,
        BID => m_axi_W_BID,
        BUSER => m_axi_W_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => W_ARVALID,
        I_ARREADY => W_ARREADY,
        I_ARADDR => W_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_12C0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => W_RVALID,
        I_RREADY => W_RREADY,
        I_RDATA => W_RDATA,
        I_RID => W_RID,
        I_RUSER => W_RUSER,
        I_RRESP => W_RRESP,
        I_RLAST => W_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => W_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => W_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => W_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => W_BRESP,
        I_BID => W_BID,
        I_BUSER => W_BUSER);

    fc_B_m_axi_U : component fc_B_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B_CACHE_VALUE)
    port map (
        AWVALID => m_axi_B_AWVALID,
        AWREADY => m_axi_B_AWREADY,
        AWADDR => m_axi_B_AWADDR,
        AWID => m_axi_B_AWID,
        AWLEN => m_axi_B_AWLEN,
        AWSIZE => m_axi_B_AWSIZE,
        AWBURST => m_axi_B_AWBURST,
        AWLOCK => m_axi_B_AWLOCK,
        AWCACHE => m_axi_B_AWCACHE,
        AWPROT => m_axi_B_AWPROT,
        AWQOS => m_axi_B_AWQOS,
        AWREGION => m_axi_B_AWREGION,
        AWUSER => m_axi_B_AWUSER,
        WVALID => m_axi_B_WVALID,
        WREADY => m_axi_B_WREADY,
        WDATA => m_axi_B_WDATA,
        WSTRB => m_axi_B_WSTRB,
        WLAST => m_axi_B_WLAST,
        WID => m_axi_B_WID,
        WUSER => m_axi_B_WUSER,
        ARVALID => m_axi_B_ARVALID,
        ARREADY => m_axi_B_ARREADY,
        ARADDR => m_axi_B_ARADDR,
        ARID => m_axi_B_ARID,
        ARLEN => m_axi_B_ARLEN,
        ARSIZE => m_axi_B_ARSIZE,
        ARBURST => m_axi_B_ARBURST,
        ARLOCK => m_axi_B_ARLOCK,
        ARCACHE => m_axi_B_ARCACHE,
        ARPROT => m_axi_B_ARPROT,
        ARQOS => m_axi_B_ARQOS,
        ARREGION => m_axi_B_ARREGION,
        ARUSER => m_axi_B_ARUSER,
        RVALID => m_axi_B_RVALID,
        RREADY => m_axi_B_RREADY,
        RDATA => m_axi_B_RDATA,
        RLAST => m_axi_B_RLAST,
        RID => m_axi_B_RID,
        RUSER => m_axi_B_RUSER,
        RRESP => m_axi_B_RRESP,
        BVALID => m_axi_B_BVALID,
        BREADY => m_axi_B_BREADY,
        BRESP => m_axi_B_BRESP,
        BID => m_axi_B_BID,
        BUSER => m_axi_B_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => B_ARVALID,
        I_ARREADY => B_ARREADY,
        I_ARADDR => B_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => B_RVALID,
        I_RREADY => B_RREADY,
        I_RDATA => B_RDATA,
        I_RID => B_RID,
        I_RUSER => B_RUSER,
        I_RRESP => B_RRESP,
        I_RLAST => B_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => B_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => B_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => B_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => B_BRESP,
        I_BID => B_BID,
        I_BUSER => B_BUSER);

    fc_OUT_r_m_axi_U : component fc_OUT_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_OUT_r_AWVALID,
        AWREADY => m_axi_OUT_r_AWREADY,
        AWADDR => m_axi_OUT_r_AWADDR,
        AWID => m_axi_OUT_r_AWID,
        AWLEN => m_axi_OUT_r_AWLEN,
        AWSIZE => m_axi_OUT_r_AWSIZE,
        AWBURST => m_axi_OUT_r_AWBURST,
        AWLOCK => m_axi_OUT_r_AWLOCK,
        AWCACHE => m_axi_OUT_r_AWCACHE,
        AWPROT => m_axi_OUT_r_AWPROT,
        AWQOS => m_axi_OUT_r_AWQOS,
        AWREGION => m_axi_OUT_r_AWREGION,
        AWUSER => m_axi_OUT_r_AWUSER,
        WVALID => m_axi_OUT_r_WVALID,
        WREADY => m_axi_OUT_r_WREADY,
        WDATA => m_axi_OUT_r_WDATA,
        WSTRB => m_axi_OUT_r_WSTRB,
        WLAST => m_axi_OUT_r_WLAST,
        WID => m_axi_OUT_r_WID,
        WUSER => m_axi_OUT_r_WUSER,
        ARVALID => m_axi_OUT_r_ARVALID,
        ARREADY => m_axi_OUT_r_ARREADY,
        ARADDR => m_axi_OUT_r_ARADDR,
        ARID => m_axi_OUT_r_ARID,
        ARLEN => m_axi_OUT_r_ARLEN,
        ARSIZE => m_axi_OUT_r_ARSIZE,
        ARBURST => m_axi_OUT_r_ARBURST,
        ARLOCK => m_axi_OUT_r_ARLOCK,
        ARCACHE => m_axi_OUT_r_ARCACHE,
        ARPROT => m_axi_OUT_r_ARPROT,
        ARQOS => m_axi_OUT_r_ARQOS,
        ARREGION => m_axi_OUT_r_ARREGION,
        ARUSER => m_axi_OUT_r_ARUSER,
        RVALID => m_axi_OUT_r_RVALID,
        RREADY => m_axi_OUT_r_RREADY,
        RDATA => m_axi_OUT_r_RDATA,
        RLAST => m_axi_OUT_r_RLAST,
        RID => m_axi_OUT_r_RID,
        RUSER => m_axi_OUT_r_RUSER,
        RRESP => m_axi_OUT_r_RRESP,
        BVALID => m_axi_OUT_r_BVALID,
        BREADY => m_axi_OUT_r_BREADY,
        BRESP => m_axi_OUT_r_BRESP,
        BID => m_axi_OUT_r_BID,
        BUSER => m_axi_OUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUT_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => OUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUT_r_RDATA,
        I_RID => OUT_r_RID,
        I_RUSER => OUT_r_RUSER,
        I_RRESP => OUT_r_RRESP,
        I_RLAST => OUT_r_RLAST,
        I_AWVALID => OUT_r_AWVALID,
        I_AWREADY => OUT_r_AWREADY,
        I_AWADDR => OUT_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => OUT_r_WVALID,
        I_WREADY => OUT_r_WREADY,
        I_WDATA => OUT_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => OUT_r_BVALID,
        I_BREADY => OUT_r_BREADY,
        I_BRESP => OUT_r_BRESP,
        I_BID => OUT_r_BID,
        I_BUSER => OUT_r_BUSER);

    fc_mul_mul_16s_16bkb_U1 : component fc_mul_mul_16s_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_506,
        din1 => W_addr_read_reg_2273,
        dout => mul_ln1118_fu_2158_p2);

    fc_mul_mul_16s_16bkb_U2 : component fc_mul_mul_16s_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_506,
        din1 => W_addr_1_read_reg_2319,
        dout => mul_ln1118_1_fu_2165_p2);

    fc_mul_mul_16s_16bkb_U3 : component fc_mul_mul_16s_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_506,
        din1 => W_addr_2_read_reg_2371,
        dout => mul_ln1118_2_fu_2172_p2);

    fc_mul_mul_16s_16bkb_U4 : component fc_mul_mul_16s_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_506,
        din1 => W_addr_3_read_reg_2423,
        dout => mul_ln1118_3_fu_2179_p2);

    fc_mul_mul_16s_16bkb_U5 : component fc_mul_mul_16s_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_506,
        din1 => W_addr_4_read_reg_2475,
        dout => mul_ln1118_4_fu_2186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state25);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state39) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state39)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state39);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state53) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state53)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state53);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state67) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state67)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state67);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                    ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_0_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_598_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_0_reg_407 <= add_ln14_fu_604_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_0_0_reg_407 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    j_0_1_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln14_1_fu_904_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                j_0_1_reg_429 <= add_ln14_1_fu_910_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_0_1_reg_429 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    j_0_2_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln14_2_fu_1225_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                j_0_2_reg_451 <= add_ln14_2_fu_1231_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                j_0_2_reg_451 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    j_0_3_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln14_3_fu_1546_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
                j_0_3_reg_473 <= add_ln14_3_fu_1552_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                j_0_3_reg_473 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    j_0_4_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln14_4_fu_1867_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
                j_0_4_reg_495 <= add_ln14_4_fu_1873_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                j_0_4_reg_495 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    p_Val2_0_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_2264_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                p_Val2_0_reg_396 <= select_ln340_5_fu_866_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_0_reg_396 <= B_addr_read_reg_2229;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln14_1_reg_2310_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
                p_Val2_1_reg_418 <= select_ln340_6_fu_1172_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                p_Val2_1_reg_418 <= B_addr_1_read_reg_2305;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln14_2_reg_2362_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
                p_Val2_2_reg_440 <= select_ln340_7_fu_1493_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                p_Val2_2_reg_440 <= B_addr_2_read_reg_2357;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln14_3_reg_2414_pp3_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_1))) then 
                p_Val2_3_reg_462 <= select_ln340_8_fu_1814_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                p_Val2_3_reg_462 <= B_addr_3_read_reg_2409;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln14_4_reg_2466_pp4_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_1))) then 
                p_Val2_4_reg_484 <= select_ln340_9_fu_2135_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                p_Val2_4_reg_484 <= B_addr_4_read_reg_2461;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                B_addr_1_read_reg_2305 <= B_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                B_addr_1_reg_2293 <= zext_ln12_fu_879_p1(32 - 1 downto 0);
                W_addr_1_reg_2299 <= zext_ln1117_fu_894_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                B_addr_2_read_reg_2357 <= B_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                B_addr_2_reg_2345 <= zext_ln12_1_fu_1200_p1(32 - 1 downto 0);
                OUT_addr_1_reg_2339 <= zext_ln203_fu_1185_p1(32 - 1 downto 0);
                W_addr_2_reg_2351 <= zext_ln1117_1_fu_1215_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                B_addr_3_read_reg_2409 <= B_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                B_addr_3_reg_2397 <= zext_ln12_2_fu_1521_p1(32 - 1 downto 0);
                OUT_addr_2_reg_2391 <= zext_ln203_1_fu_1506_p1(32 - 1 downto 0);
                W_addr_3_reg_2403 <= zext_ln1117_2_fu_1536_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                B_addr_4_read_reg_2461 <= B_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                B_addr_4_reg_2449 <= zext_ln12_3_fu_1842_p1(32 - 1 downto 0);
                OUT_addr_3_reg_2443 <= zext_ln203_2_fu_1827_p1(32 - 1 downto 0);
                W_addr_4_reg_2455 <= zext_ln1117_3_fu_1857_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                B_addr_read_reg_2229 <= B_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    IN_addr_reg_2211(30 downto 0) <= empty_6_fu_550_p1(32 - 1 downto 0)(30 downto 0);
                bias_V5_reg_2199 <= bias_V(31 downto 1);
                out_V7_reg_2193 <= out_V(31 downto 1);
                weight_V3_reg_2205 <= weight_V(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                OUT_addr_4_reg_2495 <= zext_ln203_3_fu_2148_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    OUT_addr_reg_2242(30 downto 0) <= empty_fu_580_p1(32 - 1 downto 0)(30 downto 0);
                    p_cast27_reg_2256(30 downto 0) <= p_cast27_fu_595_p1(30 downto 0);
                    p_cast28_reg_2248(30 downto 0) <= p_cast28_fu_592_p1(30 downto 0);
                    p_cast29_reg_2234(30 downto 0) <= p_cast29_fu_583_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                W_addr_1_read_reg_2319 <= W_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                W_addr_2_read_reg_2371 <= W_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                W_addr_3_read_reg_2423 <= W_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                W_addr_4_read_reg_2475 <= W_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                W_addr_read_reg_2273 <= W_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln14_1_reg_2310 <= icmp_ln14_1_fu_904_p2;
                icmp_ln14_1_reg_2310_pp1_iter1_reg <= icmp_ln14_1_reg_2310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln14_1_reg_2310_pp1_iter2_reg <= icmp_ln14_1_reg_2310_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln14_2_reg_2362 <= icmp_ln14_2_fu_1225_p2;
                icmp_ln14_2_reg_2362_pp2_iter1_reg <= icmp_ln14_2_reg_2362;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln14_2_reg_2362_pp2_iter2_reg <= icmp_ln14_2_reg_2362_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln14_3_reg_2414 <= icmp_ln14_3_fu_1546_p2;
                icmp_ln14_3_reg_2414_pp3_iter1_reg <= icmp_ln14_3_reg_2414;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln14_3_reg_2414_pp3_iter2_reg <= icmp_ln14_3_reg_2414_pp3_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln14_4_reg_2466 <= icmp_ln14_4_fu_1867_p2;
                icmp_ln14_4_reg_2466_pp4_iter1_reg <= icmp_ln14_4_reg_2466;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln14_4_reg_2466_pp4_iter2_reg <= icmp_ln14_4_reg_2466_pp4_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln14_reg_2264 <= icmp_ln14_fu_598_p2;
                icmp_ln14_reg_2264_pp0_iter1_reg <= icmp_ln14_reg_2264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln14_reg_2264_pp0_iter2_reg <= icmp_ln14_reg_2264_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln14_1_reg_2310_pp1_iter1_reg = ap_const_lv1_0))) then
                mul_ln1118_1_reg_2324 <= mul_ln1118_1_fu_2165_p2;
                tmp_27_reg_2329 <= mul_ln1118_1_fu_2165_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln14_2_reg_2362_pp2_iter1_reg = ap_const_lv1_0))) then
                mul_ln1118_2_reg_2376 <= mul_ln1118_2_fu_2172_p2;
                tmp_33_reg_2381 <= mul_ln1118_2_fu_2172_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln14_3_reg_2414_pp3_iter1_reg = ap_const_lv1_0))) then
                mul_ln1118_3_reg_2428 <= mul_ln1118_3_fu_2179_p2;
                tmp_39_reg_2433 <= mul_ln1118_3_fu_2179_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln14_4_reg_2466_pp4_iter1_reg = ap_const_lv1_0))) then
                mul_ln1118_4_reg_2480 <= mul_ln1118_4_fu_2186_p2;
                tmp_45_reg_2485 <= mul_ln1118_4_fu_2186_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_2264_pp0_iter1_reg = ap_const_lv1_0))) then
                mul_ln1118_reg_2278 <= mul_ln1118_fu_2158_p2;
                tmp_21_reg_2283 <= mul_ln1118_fu_2158_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_506 <= IN_r_RDATA;
            end if;
        end if;
    end process;
    IN_addr_reg_2211(31) <= '0';
    p_cast29_reg_2234(31) <= '0';
    OUT_addr_reg_2242(31) <= '0';
    p_cast28_reg_2248(31) <= '0';
    p_cast27_reg_2256(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_enable_reg_pp0_iter1, ap_CS_fsm_state30, ap_enable_reg_pp1_iter1, ap_CS_fsm_state44, ap_enable_reg_pp2_iter1, ap_CS_fsm_state58, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state37, ap_CS_fsm_state51, ap_CS_fsm_state65, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state31, ap_CS_fsm_state36, ap_CS_fsm_state45, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state78, B_RVALID, OUT_r_AWREADY, OUT_r_WREADY, OUT_r_BVALID, ap_block_state2_io, icmp_ln14_fu_598_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, icmp_ln14_1_fu_904_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, icmp_ln14_2_fu_1225_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3, icmp_ln14_3_fu_1546_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter3, icmp_ln14_4_fu_1867_p2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2, ap_block_state16_io, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln14_fu_598_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln14_fu_598_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln14_1_fu_904_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln14_1_fu_904_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln14_2_fu_1225_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln14_2_fu_1225_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln14_3_fu_1546_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter3 = ap_const_logic_1) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln14_3_fu_1546_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln14_4_fu_1867_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln14_4_fu_1867_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state78))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    B_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_block_state2_io, B_addr_1_reg_2293, B_addr_2_reg_2345, B_addr_3_reg_2397, B_addr_4_reg_2449, empty_4_fu_560_p1, ap_block_state16_io, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io))) then 
            B_ARADDR <= B_addr_4_reg_2449;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io))) then 
            B_ARADDR <= B_addr_3_reg_2397;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io))) then 
            B_ARADDR <= B_addr_2_reg_2345;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_io))) then 
            B_ARADDR <= B_addr_1_reg_2293;
        elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_ARADDR <= empty_4_fu_560_p1(32 - 1 downto 0);
        else 
            B_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_block_state2_io, ap_block_state16_io, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_io)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            B_ARVALID <= ap_const_logic_1;
        else 
            B_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    B_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state37, ap_CS_fsm_state51, ap_CS_fsm_state65, B_RVALID)
    begin
        if ((((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_logic_1 = B_RVALID) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            B_RREADY <= ap_const_logic_1;
        else 
            B_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    B_blk_n_AR_assign_proc : process(m_axi_B_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            B_blk_n_AR <= m_axi_B_ARREADY;
        else 
            B_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    B_blk_n_R_assign_proc : process(m_axi_B_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state37, ap_CS_fsm_state51, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            B_blk_n_R <= m_axi_B_RVALID;
        else 
            B_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_block_state2_io, ap_block_state16_io, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_io)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IN_r_ARVALID <= ap_const_logic_1;
        else 
            IN_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_2264, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln14_1_reg_2310, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln14_2_reg_2362, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln14_3_reg_2414, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, icmp_ln14_4_reg_2466, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            IN_r_RREADY <= ap_const_logic_1;
        else 
            IN_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IN_r_blk_n_AR_assign_proc : process(m_axi_IN_r_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_r_blk_n_AR <= m_axi_IN_r_ARREADY;
        else 
            IN_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IN_r_blk_n_R_assign_proc : process(m_axi_IN_r_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln14_reg_2264, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln14_1_reg_2310, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln14_2_reg_2362, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln14_3_reg_2414, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, icmp_ln14_4_reg_2466)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0) and (icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            IN_r_blk_n_R <= m_axi_IN_r_RVALID;
        else 
            IN_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_AWADDR_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_CS_fsm_state15, ap_CS_fsm_state72, OUT_r_AWREADY, OUT_addr_reg_2242, OUT_addr_1_reg_2339, OUT_addr_2_reg_2391, OUT_addr_3_reg_2443, OUT_addr_4_reg_2495, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        if (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            OUT_r_AWADDR <= OUT_addr_4_reg_2495;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io))) then 
            OUT_r_AWADDR <= OUT_addr_3_reg_2443;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io))) then 
            OUT_r_AWADDR <= OUT_addr_2_reg_2391;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io))) then 
            OUT_r_AWADDR <= OUT_addr_1_reg_2339;
        elsif (((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUT_r_AWADDR <= OUT_addr_reg_2242;
        else 
            OUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_CS_fsm_state15, ap_CS_fsm_state72, OUT_r_AWREADY, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        if ((((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state72)) or ((ap_const_logic_1 = OUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io)))) then 
            OUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_BREADY_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state64, ap_CS_fsm_state78, OUT_r_BVALID)
    begin
        if ((((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state50)) or ((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            OUT_r_BREADY <= ap_const_logic_1;
        else 
            OUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_WDATA_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state45, ap_CS_fsm_state59, ap_CS_fsm_state73, p_Val2_0_reg_396, p_Val2_1_reg_418, p_Val2_2_reg_440, p_Val2_3_reg_462, p_Val2_4_reg_484)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            OUT_r_WDATA <= p_Val2_4_reg_484;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            OUT_r_WDATA <= p_Val2_3_reg_462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            OUT_r_WDATA <= p_Val2_2_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            OUT_r_WDATA <= p_Val2_1_reg_418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            OUT_r_WDATA <= p_Val2_0_reg_396;
        else 
            OUT_r_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_r_WVALID_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state45, ap_CS_fsm_state59, ap_CS_fsm_state73, OUT_r_WREADY, ap_block_state16_io)
    begin
        if ((((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state59)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((ap_const_logic_1 = OUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_io)))) then 
            OUT_r_WVALID <= ap_const_logic_1;
        else 
            OUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUT_r_blk_n_AW_assign_proc : process(m_axi_OUT_r_AWREADY, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_CS_fsm_state15, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            OUT_r_blk_n_AW <= m_axi_OUT_r_AWREADY;
        else 
            OUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_B_assign_proc : process(m_axi_OUT_r_BVALID, ap_CS_fsm_state21, ap_CS_fsm_state36, ap_CS_fsm_state50, ap_CS_fsm_state64, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            OUT_r_blk_n_B <= m_axi_OUT_r_BVALID;
        else 
            OUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUT_r_blk_n_W_assign_proc : process(m_axi_OUT_r_WREADY, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state45, ap_CS_fsm_state59, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            OUT_r_blk_n_W <= m_axi_OUT_r_WREADY;
        else 
            OUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    W_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_block_state2_io, W_addr_1_reg_2299, W_addr_2_reg_2351, W_addr_3_reg_2403, W_addr_4_reg_2455, empty_5_fu_570_p1, ap_block_state16_io, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io))) then 
            W_ARADDR <= W_addr_4_reg_2455;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io))) then 
            W_ARADDR <= W_addr_3_reg_2403;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io))) then 
            W_ARADDR <= W_addr_2_reg_2351;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_io))) then 
            W_ARADDR <= W_addr_1_reg_2299;
        elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            W_ARADDR <= empty_5_fu_570_p1(32 - 1 downto 0);
        else 
            W_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    W_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58, ap_block_state2_io, ap_block_state16_io, ap_block_state30_io, ap_block_state44_io, ap_block_state58_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_boolean_0 = ap_block_state58_io)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_boolean_0 = ap_block_state44_io)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_io)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_io)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            W_ARVALID <= ap_const_logic_1;
        else 
            W_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    W_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_2264, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln14_1_reg_2310, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln14_2_reg_2362, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln14_3_reg_2414, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, icmp_ln14_4_reg_2466, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            W_RREADY <= ap_const_logic_1;
        else 
            W_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    W_blk_n_AR_assign_proc : process(m_axi_W_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state44, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            W_blk_n_AR <= m_axi_W_ARREADY;
        else 
            W_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    W_blk_n_R_assign_proc : process(m_axi_W_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln14_reg_2264, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln14_1_reg_2310, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln14_2_reg_2362, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln14_3_reg_2414, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, icmp_ln14_4_reg_2466)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0) and (icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            W_blk_n_R <= m_axi_W_RVALID;
        else 
            W_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln1117_1_fu_1210_p2 <= std_logic_vector(unsigned(p_cast27_reg_2256) + unsigned(ap_const_lv32_2580));
    add_ln1117_2_fu_1531_p2 <= std_logic_vector(unsigned(p_cast27_reg_2256) + unsigned(ap_const_lv32_3840));
    add_ln1117_3_fu_1852_p2 <= std_logic_vector(unsigned(p_cast27_reg_2256) + unsigned(ap_const_lv32_4B00));
    add_ln1117_fu_889_p2 <= std_logic_vector(unsigned(p_cast27_reg_2256) + unsigned(ap_const_lv32_12C0));
    add_ln1192_1_fu_942_p2 <= std_logic_vector(signed(mul_ln1118_1_reg_2324) + signed(sext_ln728_1_fu_938_p1));
    add_ln1192_2_fu_1263_p2 <= std_logic_vector(signed(mul_ln1118_2_reg_2376) + signed(sext_ln728_2_fu_1259_p1));
    add_ln1192_3_fu_1584_p2 <= std_logic_vector(signed(mul_ln1118_3_reg_2428) + signed(sext_ln728_3_fu_1580_p1));
    add_ln1192_4_fu_1905_p2 <= std_logic_vector(signed(mul_ln1118_4_reg_2480) + signed(sext_ln728_4_fu_1901_p1));
    add_ln1192_fu_636_p2 <= std_logic_vector(signed(mul_ln1118_reg_2278) + signed(sext_ln728_fu_632_p1));
    add_ln12_1_fu_1195_p2 <= std_logic_vector(unsigned(p_cast28_reg_2248) + unsigned(ap_const_lv32_2));
    add_ln12_2_fu_1516_p2 <= std_logic_vector(unsigned(p_cast28_reg_2248) + unsigned(ap_const_lv32_3));
    add_ln12_3_fu_1837_p2 <= std_logic_vector(unsigned(p_cast28_reg_2248) + unsigned(ap_const_lv32_4));
    add_ln12_fu_874_p2 <= std_logic_vector(unsigned(p_cast28_reg_2248) + unsigned(ap_const_lv32_1));
    add_ln14_1_fu_910_p2 <= std_logic_vector(unsigned(j_0_1_reg_429) + unsigned(ap_const_lv13_1));
    add_ln14_2_fu_1231_p2 <= std_logic_vector(unsigned(j_0_2_reg_451) + unsigned(ap_const_lv13_1));
    add_ln14_3_fu_1552_p2 <= std_logic_vector(unsigned(j_0_3_reg_473) + unsigned(ap_const_lv13_1));
    add_ln14_4_fu_1873_p2 <= std_logic_vector(unsigned(j_0_4_reg_495) + unsigned(ap_const_lv13_1));
    add_ln14_fu_604_p2 <= std_logic_vector(unsigned(j_0_0_reg_407) + unsigned(ap_const_lv13_1));
    add_ln203_1_fu_1501_p2 <= std_logic_vector(unsigned(p_cast29_reg_2234) + unsigned(ap_const_lv32_2));
    add_ln203_2_fu_1822_p2 <= std_logic_vector(unsigned(p_cast29_reg_2234) + unsigned(ap_const_lv32_3));
    add_ln203_3_fu_2143_p2 <= std_logic_vector(unsigned(p_cast29_reg_2234) + unsigned(ap_const_lv32_4));
    add_ln203_fu_1180_p2 <= std_logic_vector(unsigned(p_cast29_reg_2234) + unsigned(ap_const_lv32_1));
    add_ln415_1_fu_976_p2 <= std_logic_vector(unsigned(trunc_ln708_1_fu_955_p4) + unsigned(zext_ln415_1_fu_973_p1));
    add_ln415_2_fu_1297_p2 <= std_logic_vector(unsigned(trunc_ln708_2_fu_1276_p4) + unsigned(zext_ln415_2_fu_1294_p1));
    add_ln415_3_fu_1618_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_1597_p4) + unsigned(zext_ln415_3_fu_1615_p1));
    add_ln415_4_fu_1939_p2 <= std_logic_vector(unsigned(trunc_ln708_4_fu_1918_p4) + unsigned(zext_ln415_4_fu_1936_p1));
    add_ln415_fu_670_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_649_p4) + unsigned(zext_ln415_fu_667_p1));
    and_ln416_1_fu_996_p2 <= (xor_ln416_1_fu_990_p2 and tmp_26_fu_965_p3);
    and_ln416_2_fu_1317_p2 <= (xor_ln416_2_fu_1311_p2 and tmp_32_fu_1286_p3);
    and_ln416_3_fu_1638_p2 <= (xor_ln416_3_fu_1632_p2 and tmp_38_fu_1607_p3);
    and_ln416_4_fu_1959_p2 <= (xor_ln416_4_fu_1953_p2 and tmp_44_fu_1928_p3);
    and_ln416_fu_690_p2 <= (xor_ln416_fu_684_p2 and tmp_20_fu_659_p3);
    and_ln779_1_fu_1070_p2 <= (xor_ln779_1_fu_1064_p2 and icmp_ln879_2_fu_1020_p2);
    and_ln779_2_fu_1391_p2 <= (xor_ln779_2_fu_1385_p2 and icmp_ln879_4_fu_1341_p2);
    and_ln779_3_fu_1712_p2 <= (xor_ln779_3_fu_1706_p2 and icmp_ln879_6_fu_1662_p2);
    and_ln779_4_fu_2033_p2 <= (xor_ln779_4_fu_2027_p2 and icmp_ln879_8_fu_1983_p2);
    and_ln779_fu_764_p2 <= (xor_ln779_fu_758_p2 and icmp_ln879_fu_714_p2);
    and_ln781_1_fu_1084_p2 <= (icmp_ln879_3_fu_1036_p2 and and_ln416_1_fu_996_p2);
    and_ln781_2_fu_1405_p2 <= (icmp_ln879_5_fu_1357_p2 and and_ln416_2_fu_1317_p2);
    and_ln781_3_fu_1726_p2 <= (icmp_ln879_7_fu_1678_p2 and and_ln416_3_fu_1638_p2);
    and_ln781_4_fu_2047_p2 <= (icmp_ln879_9_fu_1999_p2 and and_ln416_4_fu_1959_p2);
    and_ln781_fu_778_p2 <= (icmp_ln879_1_fu_730_p2 and and_ln416_fu_690_p2);
    and_ln785_1_fu_1108_p2 <= (xor_ln785_6_fu_1102_p2 and or_ln785_1_fu_1096_p2);
    and_ln785_2_fu_1429_p2 <= (xor_ln785_7_fu_1423_p2 and or_ln785_2_fu_1417_p2);
    and_ln785_3_fu_1750_p2 <= (xor_ln785_8_fu_1744_p2 and or_ln785_3_fu_1738_p2);
    and_ln785_4_fu_2071_p2 <= (xor_ln785_9_fu_2065_p2 and or_ln785_4_fu_2059_p2);
    and_ln785_fu_802_p2 <= (xor_ln785_1_fu_796_p2 and or_ln785_fu_790_p2);
    and_ln786_1_fu_1114_p2 <= (tmp_29_fu_1002_p3 and select_ln416_1_fu_1076_p3);
    and_ln786_2_fu_1435_p2 <= (tmp_35_fu_1323_p3 and select_ln416_2_fu_1397_p3);
    and_ln786_3_fu_1756_p2 <= (tmp_41_fu_1644_p3 and select_ln416_3_fu_1718_p3);
    and_ln786_4_fu_2077_p2 <= (tmp_47_fu_1965_p3 and select_ln416_4_fu_2039_p3);
    and_ln786_5_fu_826_p2 <= (xor_ln786_fu_820_p2 and tmp_19_fu_641_p3);
    and_ln786_6_fu_1132_p2 <= (xor_ln786_1_fu_1126_p2 and tmp_25_fu_947_p3);
    and_ln786_7_fu_1453_p2 <= (xor_ln786_2_fu_1447_p2 and tmp_31_fu_1268_p3);
    and_ln786_8_fu_1774_p2 <= (xor_ln786_3_fu_1768_p2 and tmp_37_fu_1589_p3);
    and_ln786_9_fu_2095_p2 <= (xor_ln786_4_fu_2089_p2 and tmp_43_fu_1910_p3);
    and_ln786_fu_808_p2 <= (tmp_23_fu_696_p3 and select_ln416_fu_770_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(43);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(54);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state29 <= ap_CS_fsm(22);
    ap_CS_fsm_state30 <= ap_CS_fsm(23);
    ap_CS_fsm_state31 <= ap_CS_fsm(24);
    ap_CS_fsm_state36 <= ap_CS_fsm(29);
    ap_CS_fsm_state37 <= ap_CS_fsm(30);
    ap_CS_fsm_state38 <= ap_CS_fsm(31);
    ap_CS_fsm_state43 <= ap_CS_fsm(33);
    ap_CS_fsm_state44 <= ap_CS_fsm(34);
    ap_CS_fsm_state45 <= ap_CS_fsm(35);
    ap_CS_fsm_state50 <= ap_CS_fsm(40);
    ap_CS_fsm_state51 <= ap_CS_fsm(41);
    ap_CS_fsm_state52 <= ap_CS_fsm(42);
    ap_CS_fsm_state57 <= ap_CS_fsm(44);
    ap_CS_fsm_state58 <= ap_CS_fsm(45);
    ap_CS_fsm_state59 <= ap_CS_fsm(46);
    ap_CS_fsm_state64 <= ap_CS_fsm(51);
    ap_CS_fsm_state65 <= ap_CS_fsm(52);
    ap_CS_fsm_state66 <= ap_CS_fsm(53);
    ap_CS_fsm_state71 <= ap_CS_fsm(55);
    ap_CS_fsm_state72 <= ap_CS_fsm(56);
    ap_CS_fsm_state73 <= ap_CS_fsm(57);
    ap_CS_fsm_state78 <= ap_CS_fsm(62);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln14_reg_2264, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln14_reg_2264, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln14_1_reg_2310, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln14_1_reg_2310, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln14_2_reg_2362, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (((icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln14_2_reg_2362, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (((icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln14_3_reg_2414, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (((icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln14_3_reg_2414, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (((icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter1, icmp_ln14_4_reg_2466, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (((icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter1, icmp_ln14_4_reg_2466, IN_r_RVALID, W_RVALID)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (((icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID))));
    end process;

        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter1_assign_proc : process(icmp_ln14_reg_2264, IN_r_RVALID, W_RVALID)
    begin
                ap_block_state12_pp0_stage0_iter1 <= (((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_reg_2264 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;

        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(IN_r_ARREADY, W_ARREADY, B_ARREADY, OUT_r_WREADY)
    begin
                ap_block_state16_io <= ((ap_const_logic_0 = OUT_r_WREADY) or (ap_const_logic_0 = B_ARREADY) or (ap_const_logic_0 = W_ARREADY) or (ap_const_logic_0 = IN_r_ARREADY));
    end process;

        ap_block_state25_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_pp1_stage0_iter1_assign_proc : process(icmp_ln14_1_reg_2310, IN_r_RVALID, W_RVALID)
    begin
                ap_block_state26_pp1_stage0_iter1 <= (((icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_1_reg_2310 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;

        ap_block_state27_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(IN_r_ARREADY, W_ARREADY, B_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = B_ARREADY) or (ap_const_logic_0 = W_ARREADY) or (ap_const_logic_0 = IN_r_ARREADY));
    end process;


    ap_block_state30_io_assign_proc : process(IN_r_ARREADY, W_ARREADY, B_ARREADY, OUT_r_AWREADY)
    begin
                ap_block_state30_io <= ((ap_const_logic_0 = OUT_r_AWREADY) or (ap_const_logic_0 = B_ARREADY) or (ap_const_logic_0 = W_ARREADY) or (ap_const_logic_0 = IN_r_ARREADY));
    end process;

        ap_block_state39_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_pp2_stage0_iter1_assign_proc : process(icmp_ln14_2_reg_2362, IN_r_RVALID, W_RVALID)
    begin
                ap_block_state40_pp2_stage0_iter1 <= (((icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_2_reg_2362 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;

        ap_block_state41_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_io_assign_proc : process(IN_r_ARREADY, W_ARREADY, B_ARREADY, OUT_r_AWREADY)
    begin
                ap_block_state44_io <= ((ap_const_logic_0 = OUT_r_AWREADY) or (ap_const_logic_0 = B_ARREADY) or (ap_const_logic_0 = W_ARREADY) or (ap_const_logic_0 = IN_r_ARREADY));
    end process;

        ap_block_state53_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_pp3_stage0_iter1_assign_proc : process(icmp_ln14_3_reg_2414, IN_r_RVALID, W_RVALID)
    begin
                ap_block_state54_pp3_stage0_iter1 <= (((icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_3_reg_2414 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;

        ap_block_state55_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state58_io_assign_proc : process(IN_r_ARREADY, W_ARREADY, B_ARREADY, OUT_r_AWREADY)
    begin
                ap_block_state58_io <= ((ap_const_logic_0 = OUT_r_AWREADY) or (ap_const_logic_0 = B_ARREADY) or (ap_const_logic_0 = W_ARREADY) or (ap_const_logic_0 = IN_r_ARREADY));
    end process;

        ap_block_state67_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state68_pp4_stage0_iter1_assign_proc : process(icmp_ln14_4_reg_2466, IN_r_RVALID, W_RVALID)
    begin
                ap_block_state68_pp4_stage0_iter1 <= (((icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_const_logic_0 = W_RVALID)) or ((icmp_ln14_4_reg_2466 = ap_const_lv1_0) and (ap_const_logic_0 = IN_r_RVALID)));
    end process;

        ap_block_state69_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state11_assign_proc : process(icmp_ln14_fu_598_p2)
    begin
        if ((icmp_ln14_fu_598_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state25_assign_proc : process(icmp_ln14_1_fu_904_p2)
    begin
        if ((icmp_ln14_1_fu_904_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state39_assign_proc : process(icmp_ln14_2_fu_1225_p2)
    begin
        if ((icmp_ln14_2_fu_1225_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state53_assign_proc : process(icmp_ln14_3_fu_1546_p2)
    begin
        if ((icmp_ln14_3_fu_1546_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state53 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state53 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state67_assign_proc : process(icmp_ln14_4_fu_1867_p2)
    begin
        if ((icmp_ln14_4_fu_1867_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state67 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state78, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state78, OUT_r_BVALID)
    begin
        if (((ap_const_logic_1 = OUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_4_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias_V5_reg_2199),64));
    empty_5_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weight_V3_reg_2205),64));
    empty_6_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_V1_fu_540_p4),64));
    empty_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_V7_reg_2193),64));
    icmp_ln14_1_fu_904_p2 <= "1" when (j_0_1_reg_429 = ap_const_lv13_12C0) else "0";
    icmp_ln14_2_fu_1225_p2 <= "1" when (j_0_2_reg_451 = ap_const_lv13_12C0) else "0";
    icmp_ln14_3_fu_1546_p2 <= "1" when (j_0_3_reg_473 = ap_const_lv13_12C0) else "0";
    icmp_ln14_4_fu_1867_p2 <= "1" when (j_0_4_reg_495 = ap_const_lv13_12C0) else "0";
    icmp_ln14_fu_598_p2 <= "1" when (j_0_0_reg_407 = ap_const_lv13_12C0) else "0";
    icmp_ln768_1_fu_1042_p2 <= "1" when (tmp_12_fu_1026_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_2_fu_1363_p2 <= "1" when (tmp_14_fu_1347_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_3_fu_1684_p2 <= "1" when (tmp_16_fu_1668_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_4_fu_2005_p2 <= "1" when (tmp_18_fu_1989_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_fu_736_p2 <= "1" when (tmp_10_fu_720_p4 = ap_const_lv6_0) else "0";
    icmp_ln879_1_fu_730_p2 <= "1" when (tmp_10_fu_720_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_2_fu_1020_p2 <= "1" when (tmp_11_fu_1010_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_3_fu_1036_p2 <= "1" when (tmp_12_fu_1026_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_4_fu_1341_p2 <= "1" when (tmp_13_fu_1331_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_5_fu_1357_p2 <= "1" when (tmp_14_fu_1347_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_6_fu_1662_p2 <= "1" when (tmp_15_fu_1652_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_7_fu_1678_p2 <= "1" when (tmp_16_fu_1668_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_8_fu_1983_p2 <= "1" when (tmp_17_fu_1973_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_9_fu_1999_p2 <= "1" when (tmp_18_fu_1989_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_fu_714_p2 <= "1" when (tmp_s_fu_704_p4 = ap_const_lv5_1F) else "0";
    in_V1_fu_540_p4 <= in_V(31 downto 1);
    or_ln340_10_fu_1465_p2 <= (xor_ln785_7_fu_1423_p2 or and_ln786_2_fu_1435_p2);
    or_ln340_11_fu_1792_p2 <= (or_ln340_12_fu_1786_p2 or and_ln781_3_fu_1726_p2);
    or_ln340_12_fu_1786_p2 <= (xor_ln785_8_fu_1744_p2 or and_ln786_3_fu_1756_p2);
    or_ln340_13_fu_2113_p2 <= (or_ln340_14_fu_2107_p2 or and_ln781_4_fu_2047_p2);
    or_ln340_14_fu_2107_p2 <= (xor_ln785_9_fu_2065_p2 or and_ln786_4_fu_2077_p2);
    or_ln340_1_fu_844_p2 <= (or_ln340_2_fu_838_p2 or and_ln781_fu_778_p2);
    or_ln340_2_fu_838_p2 <= (xor_ln785_1_fu_796_p2 or and_ln786_fu_808_p2);
    or_ln340_3_fu_1780_p2 <= (and_ln786_8_fu_1774_p2 or and_ln785_3_fu_1750_p2);
    or_ln340_4_fu_2101_p2 <= (and_ln786_9_fu_2095_p2 or and_ln785_4_fu_2071_p2);
    or_ln340_5_fu_1138_p2 <= (and_ln786_6_fu_1132_p2 or and_ln785_1_fu_1108_p2);
    or_ln340_6_fu_1150_p2 <= (or_ln340_7_fu_1144_p2 or and_ln781_1_fu_1084_p2);
    or_ln340_7_fu_1144_p2 <= (xor_ln785_6_fu_1102_p2 or and_ln786_1_fu_1114_p2);
    or_ln340_8_fu_1459_p2 <= (and_ln786_7_fu_1453_p2 or and_ln785_2_fu_1429_p2);
    or_ln340_9_fu_1471_p2 <= (or_ln340_10_fu_1465_p2 or and_ln781_2_fu_1405_p2);
    or_ln340_fu_832_p2 <= (and_ln786_5_fu_826_p2 or and_ln785_fu_802_p2);
    or_ln785_1_fu_1096_p2 <= (xor_ln785_5_fu_1090_p2 or tmp_29_fu_1002_p3);
    or_ln785_2_fu_1417_p2 <= (xor_ln785_2_fu_1411_p2 or tmp_35_fu_1323_p3);
    or_ln785_3_fu_1738_p2 <= (xor_ln785_3_fu_1732_p2 or tmp_41_fu_1644_p3);
    or_ln785_4_fu_2059_p2 <= (xor_ln785_4_fu_2053_p2 or tmp_47_fu_1965_p3);
    or_ln785_fu_790_p2 <= (xor_ln785_fu_784_p2 or tmp_23_fu_696_p3);
    or_ln786_1_fu_1120_p2 <= (and_ln786_1_fu_1114_p2 or and_ln781_1_fu_1084_p2);
    or_ln786_2_fu_1441_p2 <= (and_ln786_2_fu_1435_p2 or and_ln781_2_fu_1405_p2);
    or_ln786_3_fu_1762_p2 <= (and_ln786_3_fu_1756_p2 or and_ln781_3_fu_1726_p2);
    or_ln786_4_fu_2083_p2 <= (and_ln786_4_fu_2077_p2 or and_ln781_4_fu_2047_p2);
    or_ln786_fu_814_p2 <= (and_ln786_fu_808_p2 or and_ln781_fu_778_p2);
    p_cast27_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weight_V3_reg_2205),32));
    p_cast28_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias_V5_reg_2199),32));
    p_cast29_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_V7_reg_2193),32));
    select_ln340_1_fu_1156_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_5_fu_1138_p2(0) = '1') else 
        add_ln415_1_fu_976_p2;
    select_ln340_2_fu_1477_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_8_fu_1459_p2(0) = '1') else 
        add_ln415_2_fu_1297_p2;
    select_ln340_3_fu_1798_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_3_fu_1780_p2(0) = '1') else 
        add_ln415_3_fu_1618_p2;
    select_ln340_4_fu_2119_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_4_fu_2101_p2(0) = '1') else 
        add_ln415_4_fu_1939_p2;
    select_ln340_5_fu_866_p3 <= 
        select_ln340_fu_850_p3 when (or_ln340_1_fu_844_p2(0) = '1') else 
        select_ln388_fu_858_p3;
    select_ln340_6_fu_1172_p3 <= 
        select_ln340_1_fu_1156_p3 when (or_ln340_6_fu_1150_p2(0) = '1') else 
        select_ln388_1_fu_1164_p3;
    select_ln340_7_fu_1493_p3 <= 
        select_ln340_2_fu_1477_p3 when (or_ln340_9_fu_1471_p2(0) = '1') else 
        select_ln388_2_fu_1485_p3;
    select_ln340_8_fu_1814_p3 <= 
        select_ln340_3_fu_1798_p3 when (or_ln340_11_fu_1792_p2(0) = '1') else 
        select_ln388_3_fu_1806_p3;
    select_ln340_9_fu_2135_p3 <= 
        select_ln340_4_fu_2119_p3 when (or_ln340_13_fu_2113_p2(0) = '1') else 
        select_ln388_4_fu_2127_p3;
    select_ln340_fu_850_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_fu_832_p2(0) = '1') else 
        add_ln415_fu_670_p2;
    select_ln388_1_fu_1164_p3 <= 
        ap_const_lv16_8000 when (and_ln786_6_fu_1132_p2(0) = '1') else 
        add_ln415_1_fu_976_p2;
    select_ln388_2_fu_1485_p3 <= 
        ap_const_lv16_8000 when (and_ln786_7_fu_1453_p2(0) = '1') else 
        add_ln415_2_fu_1297_p2;
    select_ln388_3_fu_1806_p3 <= 
        ap_const_lv16_8000 when (and_ln786_8_fu_1774_p2(0) = '1') else 
        add_ln415_3_fu_1618_p2;
    select_ln388_4_fu_2127_p3 <= 
        ap_const_lv16_8000 when (and_ln786_9_fu_2095_p2(0) = '1') else 
        add_ln415_4_fu_1939_p2;
    select_ln388_fu_858_p3 <= 
        ap_const_lv16_8000 when (and_ln786_5_fu_826_p2(0) = '1') else 
        add_ln415_fu_670_p2;
    select_ln416_1_fu_1076_p3 <= 
        and_ln779_1_fu_1070_p2 when (and_ln416_1_fu_996_p2(0) = '1') else 
        icmp_ln879_3_fu_1036_p2;
    select_ln416_2_fu_1397_p3 <= 
        and_ln779_2_fu_1391_p2 when (and_ln416_2_fu_1317_p2(0) = '1') else 
        icmp_ln879_5_fu_1357_p2;
    select_ln416_3_fu_1718_p3 <= 
        and_ln779_3_fu_1712_p2 when (and_ln416_3_fu_1638_p2(0) = '1') else 
        icmp_ln879_7_fu_1678_p2;
    select_ln416_4_fu_2039_p3 <= 
        and_ln779_4_fu_2033_p2 when (and_ln416_4_fu_1959_p2(0) = '1') else 
        icmp_ln879_9_fu_1999_p2;
    select_ln416_fu_770_p3 <= 
        and_ln779_fu_764_p2 when (and_ln416_fu_690_p2(0) = '1') else 
        icmp_ln879_1_fu_730_p2;
    select_ln777_1_fu_1048_p3 <= 
        icmp_ln879_3_fu_1036_p2 when (and_ln416_1_fu_996_p2(0) = '1') else 
        icmp_ln768_1_fu_1042_p2;
    select_ln777_2_fu_1369_p3 <= 
        icmp_ln879_5_fu_1357_p2 when (and_ln416_2_fu_1317_p2(0) = '1') else 
        icmp_ln768_2_fu_1363_p2;
    select_ln777_3_fu_1690_p3 <= 
        icmp_ln879_7_fu_1678_p2 when (and_ln416_3_fu_1638_p2(0) = '1') else 
        icmp_ln768_3_fu_1684_p2;
    select_ln777_4_fu_2011_p3 <= 
        icmp_ln879_9_fu_1999_p2 when (and_ln416_4_fu_1959_p2(0) = '1') else 
        icmp_ln768_4_fu_2005_p2;
    select_ln777_fu_742_p3 <= 
        icmp_ln879_1_fu_730_p2 when (and_ln416_fu_690_p2(0) = '1') else 
        icmp_ln768_fu_736_p2;
        sext_ln728_1_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_1_fu_930_p3),32));

        sext_ln728_2_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_2_fu_1251_p3),32));

        sext_ln728_3_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_3_fu_1572_p3),32));

        sext_ln728_4_fu_1901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln728_4_fu_1893_p3),32));

        sext_ln728_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_624_p3),32));

    shl_ln728_1_fu_930_p3 <= (p_Val2_1_reg_418 & ap_const_lv10_0);
    shl_ln728_2_fu_1251_p3 <= (p_Val2_2_reg_440 & ap_const_lv10_0);
    shl_ln728_3_fu_1572_p3 <= (p_Val2_3_reg_462 & ap_const_lv10_0);
    shl_ln728_4_fu_1893_p3 <= (p_Val2_4_reg_484 & ap_const_lv10_0);
    shl_ln_fu_624_p3 <= (p_Val2_0_reg_396 & ap_const_lv10_0);
    tmp_10_fu_720_p4 <= add_ln1192_fu_636_p2(31 downto 26);
    tmp_11_fu_1010_p4 <= add_ln1192_1_fu_942_p2(31 downto 27);
    tmp_12_fu_1026_p4 <= add_ln1192_1_fu_942_p2(31 downto 26);
    tmp_13_fu_1331_p4 <= add_ln1192_2_fu_1263_p2(31 downto 27);
    tmp_14_fu_1347_p4 <= add_ln1192_2_fu_1263_p2(31 downto 26);
    tmp_15_fu_1652_p4 <= add_ln1192_3_fu_1584_p2(31 downto 27);
    tmp_16_fu_1668_p4 <= add_ln1192_3_fu_1584_p2(31 downto 26);
    tmp_17_fu_1973_p4 <= add_ln1192_4_fu_1905_p2(31 downto 27);
    tmp_18_fu_1989_p4 <= add_ln1192_4_fu_1905_p2(31 downto 26);
    tmp_19_fu_641_p3 <= add_ln1192_fu_636_p2(31 downto 31);
    tmp_20_fu_659_p3 <= add_ln1192_fu_636_p2(25 downto 25);
    tmp_22_fu_676_p3 <= add_ln415_fu_670_p2(15 downto 15);
    tmp_23_fu_696_p3 <= add_ln415_fu_670_p2(15 downto 15);
    tmp_24_fu_750_p3 <= add_ln1192_fu_636_p2(26 downto 26);
    tmp_25_fu_947_p3 <= add_ln1192_1_fu_942_p2(31 downto 31);
    tmp_26_fu_965_p3 <= add_ln1192_1_fu_942_p2(25 downto 25);
    tmp_28_fu_982_p3 <= add_ln415_1_fu_976_p2(15 downto 15);
    tmp_29_fu_1002_p3 <= add_ln415_1_fu_976_p2(15 downto 15);
    tmp_30_fu_1056_p3 <= add_ln1192_1_fu_942_p2(26 downto 26);
    tmp_31_fu_1268_p3 <= add_ln1192_2_fu_1263_p2(31 downto 31);
    tmp_32_fu_1286_p3 <= add_ln1192_2_fu_1263_p2(25 downto 25);
    tmp_34_fu_1303_p3 <= add_ln415_2_fu_1297_p2(15 downto 15);
    tmp_35_fu_1323_p3 <= add_ln415_2_fu_1297_p2(15 downto 15);
    tmp_36_fu_1377_p3 <= add_ln1192_2_fu_1263_p2(26 downto 26);
    tmp_37_fu_1589_p3 <= add_ln1192_3_fu_1584_p2(31 downto 31);
    tmp_38_fu_1607_p3 <= add_ln1192_3_fu_1584_p2(25 downto 25);
    tmp_40_fu_1624_p3 <= add_ln415_3_fu_1618_p2(15 downto 15);
    tmp_41_fu_1644_p3 <= add_ln415_3_fu_1618_p2(15 downto 15);
    tmp_42_fu_1698_p3 <= add_ln1192_3_fu_1584_p2(26 downto 26);
    tmp_43_fu_1910_p3 <= add_ln1192_4_fu_1905_p2(31 downto 31);
    tmp_44_fu_1928_p3 <= add_ln1192_4_fu_1905_p2(25 downto 25);
    tmp_46_fu_1945_p3 <= add_ln415_4_fu_1939_p2(15 downto 15);
    tmp_47_fu_1965_p3 <= add_ln415_4_fu_1939_p2(15 downto 15);
    tmp_48_fu_2019_p3 <= add_ln1192_4_fu_1905_p2(26 downto 26);
    tmp_s_fu_704_p4 <= add_ln1192_fu_636_p2(31 downto 27);
    trunc_ln1_fu_649_p4 <= add_ln1192_fu_636_p2(25 downto 10);
    trunc_ln708_1_fu_955_p4 <= add_ln1192_1_fu_942_p2(25 downto 10);
    trunc_ln708_2_fu_1276_p4 <= add_ln1192_2_fu_1263_p2(25 downto 10);
    trunc_ln708_3_fu_1597_p4 <= add_ln1192_3_fu_1584_p2(25 downto 10);
    trunc_ln708_4_fu_1918_p4 <= add_ln1192_4_fu_1905_p2(25 downto 10);
    xor_ln416_1_fu_990_p2 <= (tmp_28_fu_982_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_1311_p2 <= (tmp_34_fu_1303_p3 xor ap_const_lv1_1);
    xor_ln416_3_fu_1632_p2 <= (tmp_40_fu_1624_p3 xor ap_const_lv1_1);
    xor_ln416_4_fu_1953_p2 <= (tmp_46_fu_1945_p3 xor ap_const_lv1_1);
    xor_ln416_fu_684_p2 <= (tmp_22_fu_676_p3 xor ap_const_lv1_1);
    xor_ln779_1_fu_1064_p2 <= (tmp_30_fu_1056_p3 xor ap_const_lv1_1);
    xor_ln779_2_fu_1385_p2 <= (tmp_36_fu_1377_p3 xor ap_const_lv1_1);
    xor_ln779_3_fu_1706_p2 <= (tmp_42_fu_1698_p3 xor ap_const_lv1_1);
    xor_ln779_4_fu_2027_p2 <= (tmp_48_fu_2019_p3 xor ap_const_lv1_1);
    xor_ln779_fu_758_p2 <= (tmp_24_fu_750_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_796_p2 <= (tmp_19_fu_641_p3 xor ap_const_lv1_1);
    xor_ln785_2_fu_1411_p2 <= (select_ln777_2_fu_1369_p3 xor ap_const_lv1_1);
    xor_ln785_3_fu_1732_p2 <= (select_ln777_3_fu_1690_p3 xor ap_const_lv1_1);
    xor_ln785_4_fu_2053_p2 <= (select_ln777_4_fu_2011_p3 xor ap_const_lv1_1);
    xor_ln785_5_fu_1090_p2 <= (select_ln777_1_fu_1048_p3 xor ap_const_lv1_1);
    xor_ln785_6_fu_1102_p2 <= (tmp_25_fu_947_p3 xor ap_const_lv1_1);
    xor_ln785_7_fu_1423_p2 <= (tmp_31_fu_1268_p3 xor ap_const_lv1_1);
    xor_ln785_8_fu_1744_p2 <= (tmp_37_fu_1589_p3 xor ap_const_lv1_1);
    xor_ln785_9_fu_2065_p2 <= (tmp_43_fu_1910_p3 xor ap_const_lv1_1);
    xor_ln785_fu_784_p2 <= (select_ln777_fu_742_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_1126_p2 <= (or_ln786_1_fu_1120_p2 xor ap_const_lv1_1);
    xor_ln786_2_fu_1447_p2 <= (or_ln786_2_fu_1441_p2 xor ap_const_lv1_1);
    xor_ln786_3_fu_1768_p2 <= (or_ln786_3_fu_1762_p2 xor ap_const_lv1_1);
    xor_ln786_4_fu_2089_p2 <= (or_ln786_4_fu_2083_p2 xor ap_const_lv1_1);
    xor_ln786_fu_820_p2 <= (or_ln786_fu_814_p2 xor ap_const_lv1_1);
    zext_ln1117_1_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_1_fu_1210_p2),64));
    zext_ln1117_2_fu_1536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_2_fu_1531_p2),64));
    zext_ln1117_3_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_3_fu_1852_p2),64));
    zext_ln1117_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_889_p2),64));
    zext_ln12_1_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_1_fu_1195_p2),64));
    zext_ln12_2_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_2_fu_1516_p2),64));
    zext_ln12_3_fu_1842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_3_fu_1837_p2),64));
    zext_ln12_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_fu_874_p2),64));
    zext_ln203_1_fu_1506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_fu_1501_p2),64));
    zext_ln203_2_fu_1827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_2_fu_1822_p2),64));
    zext_ln203_3_fu_2148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_3_fu_2143_p2),64));
    zext_ln203_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_fu_1180_p2),64));
    zext_ln415_1_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_reg_2329),16));
    zext_ln415_2_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_2381),16));
    zext_ln415_3_fu_1615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_reg_2433),16));
    zext_ln415_4_fu_1936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_reg_2485),16));
    zext_ln415_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_2283),16));
end behav;
