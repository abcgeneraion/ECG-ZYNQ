// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=24072,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=5,HLS_SYN_FF=3862,HLS_SYN_LUT=4440,HLS_VERSION=2019_2}" *)

module fc (
        ap_clk,
        ap_rst_n,
        m_axi_IN_r_AWVALID,
        m_axi_IN_r_AWREADY,
        m_axi_IN_r_AWADDR,
        m_axi_IN_r_AWID,
        m_axi_IN_r_AWLEN,
        m_axi_IN_r_AWSIZE,
        m_axi_IN_r_AWBURST,
        m_axi_IN_r_AWLOCK,
        m_axi_IN_r_AWCACHE,
        m_axi_IN_r_AWPROT,
        m_axi_IN_r_AWQOS,
        m_axi_IN_r_AWREGION,
        m_axi_IN_r_AWUSER,
        m_axi_IN_r_WVALID,
        m_axi_IN_r_WREADY,
        m_axi_IN_r_WDATA,
        m_axi_IN_r_WSTRB,
        m_axi_IN_r_WLAST,
        m_axi_IN_r_WID,
        m_axi_IN_r_WUSER,
        m_axi_IN_r_ARVALID,
        m_axi_IN_r_ARREADY,
        m_axi_IN_r_ARADDR,
        m_axi_IN_r_ARID,
        m_axi_IN_r_ARLEN,
        m_axi_IN_r_ARSIZE,
        m_axi_IN_r_ARBURST,
        m_axi_IN_r_ARLOCK,
        m_axi_IN_r_ARCACHE,
        m_axi_IN_r_ARPROT,
        m_axi_IN_r_ARQOS,
        m_axi_IN_r_ARREGION,
        m_axi_IN_r_ARUSER,
        m_axi_IN_r_RVALID,
        m_axi_IN_r_RREADY,
        m_axi_IN_r_RDATA,
        m_axi_IN_r_RLAST,
        m_axi_IN_r_RID,
        m_axi_IN_r_RUSER,
        m_axi_IN_r_RRESP,
        m_axi_IN_r_BVALID,
        m_axi_IN_r_BREADY,
        m_axi_IN_r_BRESP,
        m_axi_IN_r_BID,
        m_axi_IN_r_BUSER,
        m_axi_W_AWVALID,
        m_axi_W_AWREADY,
        m_axi_W_AWADDR,
        m_axi_W_AWID,
        m_axi_W_AWLEN,
        m_axi_W_AWSIZE,
        m_axi_W_AWBURST,
        m_axi_W_AWLOCK,
        m_axi_W_AWCACHE,
        m_axi_W_AWPROT,
        m_axi_W_AWQOS,
        m_axi_W_AWREGION,
        m_axi_W_AWUSER,
        m_axi_W_WVALID,
        m_axi_W_WREADY,
        m_axi_W_WDATA,
        m_axi_W_WSTRB,
        m_axi_W_WLAST,
        m_axi_W_WID,
        m_axi_W_WUSER,
        m_axi_W_ARVALID,
        m_axi_W_ARREADY,
        m_axi_W_ARADDR,
        m_axi_W_ARID,
        m_axi_W_ARLEN,
        m_axi_W_ARSIZE,
        m_axi_W_ARBURST,
        m_axi_W_ARLOCK,
        m_axi_W_ARCACHE,
        m_axi_W_ARPROT,
        m_axi_W_ARQOS,
        m_axi_W_ARREGION,
        m_axi_W_ARUSER,
        m_axi_W_RVALID,
        m_axi_W_RREADY,
        m_axi_W_RDATA,
        m_axi_W_RLAST,
        m_axi_W_RID,
        m_axi_W_RUSER,
        m_axi_W_RRESP,
        m_axi_W_BVALID,
        m_axi_W_BREADY,
        m_axi_W_BRESP,
        m_axi_W_BID,
        m_axi_W_BUSER,
        m_axi_B_AWVALID,
        m_axi_B_AWREADY,
        m_axi_B_AWADDR,
        m_axi_B_AWID,
        m_axi_B_AWLEN,
        m_axi_B_AWSIZE,
        m_axi_B_AWBURST,
        m_axi_B_AWLOCK,
        m_axi_B_AWCACHE,
        m_axi_B_AWPROT,
        m_axi_B_AWQOS,
        m_axi_B_AWREGION,
        m_axi_B_AWUSER,
        m_axi_B_WVALID,
        m_axi_B_WREADY,
        m_axi_B_WDATA,
        m_axi_B_WSTRB,
        m_axi_B_WLAST,
        m_axi_B_WID,
        m_axi_B_WUSER,
        m_axi_B_ARVALID,
        m_axi_B_ARREADY,
        m_axi_B_ARADDR,
        m_axi_B_ARID,
        m_axi_B_ARLEN,
        m_axi_B_ARSIZE,
        m_axi_B_ARBURST,
        m_axi_B_ARLOCK,
        m_axi_B_ARCACHE,
        m_axi_B_ARPROT,
        m_axi_B_ARQOS,
        m_axi_B_ARREGION,
        m_axi_B_ARUSER,
        m_axi_B_RVALID,
        m_axi_B_RREADY,
        m_axi_B_RDATA,
        m_axi_B_RLAST,
        m_axi_B_RID,
        m_axi_B_RUSER,
        m_axi_B_RRESP,
        m_axi_B_BVALID,
        m_axi_B_BREADY,
        m_axi_B_BRESP,
        m_axi_B_BID,
        m_axi_B_BUSER,
        m_axi_OUT_r_AWVALID,
        m_axi_OUT_r_AWREADY,
        m_axi_OUT_r_AWADDR,
        m_axi_OUT_r_AWID,
        m_axi_OUT_r_AWLEN,
        m_axi_OUT_r_AWSIZE,
        m_axi_OUT_r_AWBURST,
        m_axi_OUT_r_AWLOCK,
        m_axi_OUT_r_AWCACHE,
        m_axi_OUT_r_AWPROT,
        m_axi_OUT_r_AWQOS,
        m_axi_OUT_r_AWREGION,
        m_axi_OUT_r_AWUSER,
        m_axi_OUT_r_WVALID,
        m_axi_OUT_r_WREADY,
        m_axi_OUT_r_WDATA,
        m_axi_OUT_r_WSTRB,
        m_axi_OUT_r_WLAST,
        m_axi_OUT_r_WID,
        m_axi_OUT_r_WUSER,
        m_axi_OUT_r_ARVALID,
        m_axi_OUT_r_ARREADY,
        m_axi_OUT_r_ARADDR,
        m_axi_OUT_r_ARID,
        m_axi_OUT_r_ARLEN,
        m_axi_OUT_r_ARSIZE,
        m_axi_OUT_r_ARBURST,
        m_axi_OUT_r_ARLOCK,
        m_axi_OUT_r_ARCACHE,
        m_axi_OUT_r_ARPROT,
        m_axi_OUT_r_ARQOS,
        m_axi_OUT_r_ARREGION,
        m_axi_OUT_r_ARUSER,
        m_axi_OUT_r_RVALID,
        m_axi_OUT_r_RREADY,
        m_axi_OUT_r_RDATA,
        m_axi_OUT_r_RLAST,
        m_axi_OUT_r_RID,
        m_axi_OUT_r_RUSER,
        m_axi_OUT_r_RRESP,
        m_axi_OUT_r_BVALID,
        m_axi_OUT_r_BREADY,
        m_axi_OUT_r_BRESP,
        m_axi_OUT_r_BID,
        m_axi_OUT_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_pp0_stage0 = 63'd1024;
parameter    ap_ST_fsm_state15 = 63'd2048;
parameter    ap_ST_fsm_state16 = 63'd4096;
parameter    ap_ST_fsm_state17 = 63'd8192;
parameter    ap_ST_fsm_state18 = 63'd16384;
parameter    ap_ST_fsm_state19 = 63'd32768;
parameter    ap_ST_fsm_state20 = 63'd65536;
parameter    ap_ST_fsm_state21 = 63'd131072;
parameter    ap_ST_fsm_state22 = 63'd262144;
parameter    ap_ST_fsm_state23 = 63'd524288;
parameter    ap_ST_fsm_state24 = 63'd1048576;
parameter    ap_ST_fsm_pp1_stage0 = 63'd2097152;
parameter    ap_ST_fsm_state29 = 63'd4194304;
parameter    ap_ST_fsm_state30 = 63'd8388608;
parameter    ap_ST_fsm_state31 = 63'd16777216;
parameter    ap_ST_fsm_state32 = 63'd33554432;
parameter    ap_ST_fsm_state33 = 63'd67108864;
parameter    ap_ST_fsm_state34 = 63'd134217728;
parameter    ap_ST_fsm_state35 = 63'd268435456;
parameter    ap_ST_fsm_state36 = 63'd536870912;
parameter    ap_ST_fsm_state37 = 63'd1073741824;
parameter    ap_ST_fsm_state38 = 63'd2147483648;
parameter    ap_ST_fsm_pp2_stage0 = 63'd4294967296;
parameter    ap_ST_fsm_state43 = 63'd8589934592;
parameter    ap_ST_fsm_state44 = 63'd17179869184;
parameter    ap_ST_fsm_state45 = 63'd34359738368;
parameter    ap_ST_fsm_state46 = 63'd68719476736;
parameter    ap_ST_fsm_state47 = 63'd137438953472;
parameter    ap_ST_fsm_state48 = 63'd274877906944;
parameter    ap_ST_fsm_state49 = 63'd549755813888;
parameter    ap_ST_fsm_state50 = 63'd1099511627776;
parameter    ap_ST_fsm_state51 = 63'd2199023255552;
parameter    ap_ST_fsm_state52 = 63'd4398046511104;
parameter    ap_ST_fsm_pp3_stage0 = 63'd8796093022208;
parameter    ap_ST_fsm_state57 = 63'd17592186044416;
parameter    ap_ST_fsm_state58 = 63'd35184372088832;
parameter    ap_ST_fsm_state59 = 63'd70368744177664;
parameter    ap_ST_fsm_state60 = 63'd140737488355328;
parameter    ap_ST_fsm_state61 = 63'd281474976710656;
parameter    ap_ST_fsm_state62 = 63'd562949953421312;
parameter    ap_ST_fsm_state63 = 63'd1125899906842624;
parameter    ap_ST_fsm_state64 = 63'd2251799813685248;
parameter    ap_ST_fsm_state65 = 63'd4503599627370496;
parameter    ap_ST_fsm_state66 = 63'd9007199254740992;
parameter    ap_ST_fsm_pp4_stage0 = 63'd18014398509481984;
parameter    ap_ST_fsm_state71 = 63'd36028797018963968;
parameter    ap_ST_fsm_state72 = 63'd72057594037927936;
parameter    ap_ST_fsm_state73 = 63'd144115188075855872;
parameter    ap_ST_fsm_state74 = 63'd288230376151711744;
parameter    ap_ST_fsm_state75 = 63'd576460752303423488;
parameter    ap_ST_fsm_state76 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state77 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state78 = 63'd4611686018427387904;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_W_ID_WIDTH = 1;
parameter    C_M_AXI_W_ADDR_WIDTH = 32;
parameter    C_M_AXI_W_DATA_WIDTH = 32;
parameter    C_M_AXI_W_AWUSER_WIDTH = 1;
parameter    C_M_AXI_W_ARUSER_WIDTH = 1;
parameter    C_M_AXI_W_WUSER_WIDTH = 1;
parameter    C_M_AXI_W_RUSER_WIDTH = 1;
parameter    C_M_AXI_W_BUSER_WIDTH = 1;
parameter    C_M_AXI_W_USER_VALUE = 0;
parameter    C_M_AXI_W_PROT_VALUE = 0;
parameter    C_M_AXI_W_CACHE_VALUE = 3;
parameter    C_M_AXI_B_ID_WIDTH = 1;
parameter    C_M_AXI_B_ADDR_WIDTH = 32;
parameter    C_M_AXI_B_DATA_WIDTH = 32;
parameter    C_M_AXI_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_USER_VALUE = 0;
parameter    C_M_AXI_B_PROT_VALUE = 0;
parameter    C_M_AXI_B_CACHE_VALUE = 3;
parameter    C_M_AXI_OUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUT_R_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IN_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_W_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUT_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_IN_r_AWVALID;
input   m_axi_IN_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_AWID;
output  [7:0] m_axi_IN_r_AWLEN;
output  [2:0] m_axi_IN_r_AWSIZE;
output  [1:0] m_axi_IN_r_AWBURST;
output  [1:0] m_axi_IN_r_AWLOCK;
output  [3:0] m_axi_IN_r_AWCACHE;
output  [2:0] m_axi_IN_r_AWPROT;
output  [3:0] m_axi_IN_r_AWQOS;
output  [3:0] m_axi_IN_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1:0] m_axi_IN_r_AWUSER;
output   m_axi_IN_r_WVALID;
input   m_axi_IN_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1:0] m_axi_IN_r_WSTRB;
output   m_axi_IN_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1:0] m_axi_IN_r_WUSER;
output   m_axi_IN_r_ARVALID;
input   m_axi_IN_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1:0] m_axi_IN_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_ARID;
output  [7:0] m_axi_IN_r_ARLEN;
output  [2:0] m_axi_IN_r_ARSIZE;
output  [1:0] m_axi_IN_r_ARBURST;
output  [1:0] m_axi_IN_r_ARLOCK;
output  [3:0] m_axi_IN_r_ARCACHE;
output  [2:0] m_axi_IN_r_ARPROT;
output  [3:0] m_axi_IN_r_ARQOS;
output  [3:0] m_axi_IN_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1:0] m_axi_IN_r_ARUSER;
input   m_axi_IN_r_RVALID;
output   m_axi_IN_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1:0] m_axi_IN_r_RDATA;
input   m_axi_IN_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1:0] m_axi_IN_r_RUSER;
input  [1:0] m_axi_IN_r_RRESP;
input   m_axi_IN_r_BVALID;
output   m_axi_IN_r_BREADY;
input  [1:0] m_axi_IN_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1:0] m_axi_IN_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1:0] m_axi_IN_r_BUSER;
output   m_axi_W_AWVALID;
input   m_axi_W_AWREADY;
output  [C_M_AXI_W_ADDR_WIDTH - 1:0] m_axi_W_AWADDR;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_AWID;
output  [7:0] m_axi_W_AWLEN;
output  [2:0] m_axi_W_AWSIZE;
output  [1:0] m_axi_W_AWBURST;
output  [1:0] m_axi_W_AWLOCK;
output  [3:0] m_axi_W_AWCACHE;
output  [2:0] m_axi_W_AWPROT;
output  [3:0] m_axi_W_AWQOS;
output  [3:0] m_axi_W_AWREGION;
output  [C_M_AXI_W_AWUSER_WIDTH - 1:0] m_axi_W_AWUSER;
output   m_axi_W_WVALID;
input   m_axi_W_WREADY;
output  [C_M_AXI_W_DATA_WIDTH - 1:0] m_axi_W_WDATA;
output  [C_M_AXI_W_WSTRB_WIDTH - 1:0] m_axi_W_WSTRB;
output   m_axi_W_WLAST;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_WID;
output  [C_M_AXI_W_WUSER_WIDTH - 1:0] m_axi_W_WUSER;
output   m_axi_W_ARVALID;
input   m_axi_W_ARREADY;
output  [C_M_AXI_W_ADDR_WIDTH - 1:0] m_axi_W_ARADDR;
output  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_ARID;
output  [7:0] m_axi_W_ARLEN;
output  [2:0] m_axi_W_ARSIZE;
output  [1:0] m_axi_W_ARBURST;
output  [1:0] m_axi_W_ARLOCK;
output  [3:0] m_axi_W_ARCACHE;
output  [2:0] m_axi_W_ARPROT;
output  [3:0] m_axi_W_ARQOS;
output  [3:0] m_axi_W_ARREGION;
output  [C_M_AXI_W_ARUSER_WIDTH - 1:0] m_axi_W_ARUSER;
input   m_axi_W_RVALID;
output   m_axi_W_RREADY;
input  [C_M_AXI_W_DATA_WIDTH - 1:0] m_axi_W_RDATA;
input   m_axi_W_RLAST;
input  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_RID;
input  [C_M_AXI_W_RUSER_WIDTH - 1:0] m_axi_W_RUSER;
input  [1:0] m_axi_W_RRESP;
input   m_axi_W_BVALID;
output   m_axi_W_BREADY;
input  [1:0] m_axi_W_BRESP;
input  [C_M_AXI_W_ID_WIDTH - 1:0] m_axi_W_BID;
input  [C_M_AXI_W_BUSER_WIDTH - 1:0] m_axi_W_BUSER;
output   m_axi_B_AWVALID;
input   m_axi_B_AWREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_B_AWADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_AWID;
output  [7:0] m_axi_B_AWLEN;
output  [2:0] m_axi_B_AWSIZE;
output  [1:0] m_axi_B_AWBURST;
output  [1:0] m_axi_B_AWLOCK;
output  [3:0] m_axi_B_AWCACHE;
output  [2:0] m_axi_B_AWPROT;
output  [3:0] m_axi_B_AWQOS;
output  [3:0] m_axi_B_AWREGION;
output  [C_M_AXI_B_AWUSER_WIDTH - 1:0] m_axi_B_AWUSER;
output   m_axi_B_WVALID;
input   m_axi_B_WREADY;
output  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_B_WDATA;
output  [C_M_AXI_B_WSTRB_WIDTH - 1:0] m_axi_B_WSTRB;
output   m_axi_B_WLAST;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_WID;
output  [C_M_AXI_B_WUSER_WIDTH - 1:0] m_axi_B_WUSER;
output   m_axi_B_ARVALID;
input   m_axi_B_ARREADY;
output  [C_M_AXI_B_ADDR_WIDTH - 1:0] m_axi_B_ARADDR;
output  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_ARID;
output  [7:0] m_axi_B_ARLEN;
output  [2:0] m_axi_B_ARSIZE;
output  [1:0] m_axi_B_ARBURST;
output  [1:0] m_axi_B_ARLOCK;
output  [3:0] m_axi_B_ARCACHE;
output  [2:0] m_axi_B_ARPROT;
output  [3:0] m_axi_B_ARQOS;
output  [3:0] m_axi_B_ARREGION;
output  [C_M_AXI_B_ARUSER_WIDTH - 1:0] m_axi_B_ARUSER;
input   m_axi_B_RVALID;
output   m_axi_B_RREADY;
input  [C_M_AXI_B_DATA_WIDTH - 1:0] m_axi_B_RDATA;
input   m_axi_B_RLAST;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_RID;
input  [C_M_AXI_B_RUSER_WIDTH - 1:0] m_axi_B_RUSER;
input  [1:0] m_axi_B_RRESP;
input   m_axi_B_BVALID;
output   m_axi_B_BREADY;
input  [1:0] m_axi_B_BRESP;
input  [C_M_AXI_B_ID_WIDTH - 1:0] m_axi_B_BID;
input  [C_M_AXI_B_BUSER_WIDTH - 1:0] m_axi_B_BUSER;
output   m_axi_OUT_r_AWVALID;
input   m_axi_OUT_r_AWREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_AWADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_AWID;
output  [7:0] m_axi_OUT_r_AWLEN;
output  [2:0] m_axi_OUT_r_AWSIZE;
output  [1:0] m_axi_OUT_r_AWBURST;
output  [1:0] m_axi_OUT_r_AWLOCK;
output  [3:0] m_axi_OUT_r_AWCACHE;
output  [2:0] m_axi_OUT_r_AWPROT;
output  [3:0] m_axi_OUT_r_AWQOS;
output  [3:0] m_axi_OUT_r_AWREGION;
output  [C_M_AXI_OUT_R_AWUSER_WIDTH - 1:0] m_axi_OUT_r_AWUSER;
output   m_axi_OUT_r_WVALID;
input   m_axi_OUT_r_WREADY;
output  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_WDATA;
output  [C_M_AXI_OUT_R_WSTRB_WIDTH - 1:0] m_axi_OUT_r_WSTRB;
output   m_axi_OUT_r_WLAST;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_WID;
output  [C_M_AXI_OUT_R_WUSER_WIDTH - 1:0] m_axi_OUT_r_WUSER;
output   m_axi_OUT_r_ARVALID;
input   m_axi_OUT_r_ARREADY;
output  [C_M_AXI_OUT_R_ADDR_WIDTH - 1:0] m_axi_OUT_r_ARADDR;
output  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_ARID;
output  [7:0] m_axi_OUT_r_ARLEN;
output  [2:0] m_axi_OUT_r_ARSIZE;
output  [1:0] m_axi_OUT_r_ARBURST;
output  [1:0] m_axi_OUT_r_ARLOCK;
output  [3:0] m_axi_OUT_r_ARCACHE;
output  [2:0] m_axi_OUT_r_ARPROT;
output  [3:0] m_axi_OUT_r_ARQOS;
output  [3:0] m_axi_OUT_r_ARREGION;
output  [C_M_AXI_OUT_R_ARUSER_WIDTH - 1:0] m_axi_OUT_r_ARUSER;
input   m_axi_OUT_r_RVALID;
output   m_axi_OUT_r_RREADY;
input  [C_M_AXI_OUT_R_DATA_WIDTH - 1:0] m_axi_OUT_r_RDATA;
input   m_axi_OUT_r_RLAST;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_RID;
input  [C_M_AXI_OUT_R_RUSER_WIDTH - 1:0] m_axi_OUT_r_RUSER;
input  [1:0] m_axi_OUT_r_RRESP;
input   m_axi_OUT_r_BVALID;
output   m_axi_OUT_r_BREADY;
input  [1:0] m_axi_OUT_r_BRESP;
input  [C_M_AXI_OUT_R_ID_WIDTH - 1:0] m_axi_OUT_r_BID;
input  [C_M_AXI_OUT_R_BUSER_WIDTH - 1:0] m_axi_OUT_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in_V;
wire   [31:0] weight_V;
wire   [31:0] bias_V;
wire   [31:0] out_V;
reg    IN_r_blk_n_AR;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state16;
reg    IN_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln14_reg_2264;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln14_1_reg_2310;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln14_2_reg_2362;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln14_3_reg_2414;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln14_4_reg_2466;
reg    W_blk_n_AR;
reg    W_blk_n_R;
reg    B_blk_n_AR;
reg    B_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state65;
reg    OUT_r_blk_n_AW;
wire    ap_CS_fsm_state15;
reg    OUT_r_blk_n_W;
reg    OUT_r_blk_n_B;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state78;
wire    IN_r_AWREADY;
wire    IN_r_WREADY;
reg    IN_r_ARVALID;
wire    IN_r_ARREADY;
wire    IN_r_RVALID;
reg    IN_r_RREADY;
wire   [15:0] IN_r_RDATA;
wire    IN_r_RLAST;
wire   [0:0] IN_r_RID;
wire   [0:0] IN_r_RUSER;
wire   [1:0] IN_r_RRESP;
wire    IN_r_BVALID;
wire   [1:0] IN_r_BRESP;
wire   [0:0] IN_r_BID;
wire   [0:0] IN_r_BUSER;
wire    W_AWREADY;
wire    W_WREADY;
reg    W_ARVALID;
wire    W_ARREADY;
reg   [31:0] W_ARADDR;
wire    W_RVALID;
reg    W_RREADY;
wire   [15:0] W_RDATA;
wire    W_RLAST;
wire   [0:0] W_RID;
wire   [0:0] W_RUSER;
wire   [1:0] W_RRESP;
wire    W_BVALID;
wire   [1:0] W_BRESP;
wire   [0:0] W_BID;
wire   [0:0] W_BUSER;
wire    B_AWREADY;
wire    B_WREADY;
reg    B_ARVALID;
wire    B_ARREADY;
reg   [31:0] B_ARADDR;
wire    B_RVALID;
reg    B_RREADY;
wire   [15:0] B_RDATA;
wire    B_RLAST;
wire   [0:0] B_RID;
wire   [0:0] B_RUSER;
wire   [1:0] B_RRESP;
wire    B_BVALID;
wire   [1:0] B_BRESP;
wire   [0:0] B_BID;
wire   [0:0] B_BUSER;
reg    OUT_r_AWVALID;
wire    OUT_r_AWREADY;
reg   [31:0] OUT_r_AWADDR;
reg    OUT_r_WVALID;
wire    OUT_r_WREADY;
reg   [15:0] OUT_r_WDATA;
wire    OUT_r_ARREADY;
wire    OUT_r_RVALID;
wire   [15:0] OUT_r_RDATA;
wire    OUT_r_RLAST;
wire   [0:0] OUT_r_RID;
wire   [0:0] OUT_r_RUSER;
wire   [1:0] OUT_r_RRESP;
wire    OUT_r_BVALID;
reg    OUT_r_BREADY;
wire   [1:0] OUT_r_BRESP;
wire   [0:0] OUT_r_BID;
wire   [0:0] OUT_r_BUSER;
reg   [15:0] p_Val2_0_reg_396;
reg   [12:0] j_0_0_reg_407;
reg   [15:0] p_Val2_1_reg_418;
reg   [12:0] j_0_1_reg_429;
reg   [15:0] p_Val2_2_reg_440;
reg   [12:0] j_0_2_reg_451;
reg   [15:0] p_Val2_3_reg_462;
reg   [12:0] j_0_3_reg_473;
reg   [15:0] p_Val2_4_reg_484;
reg   [12:0] j_0_4_reg_495;
reg  signed [15:0] reg_506;
wire    ap_block_state11_pp0_stage0_iter0;
reg    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state14_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire    ap_block_state25_pp1_stage0_iter0;
reg    ap_block_state26_pp1_stage0_iter1;
wire    ap_block_state27_pp1_stage0_iter2;
wire    ap_block_state28_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire    ap_block_state39_pp2_stage0_iter0;
reg    ap_block_state40_pp2_stage0_iter1;
wire    ap_block_state41_pp2_stage0_iter2;
wire    ap_block_state42_pp2_stage0_iter3;
reg    ap_block_pp2_stage0_11001;
wire    ap_block_state53_pp3_stage0_iter0;
reg    ap_block_state54_pp3_stage0_iter1;
wire    ap_block_state55_pp3_stage0_iter2;
wire    ap_block_state56_pp3_stage0_iter3;
reg    ap_block_pp3_stage0_11001;
wire    ap_block_state67_pp4_stage0_iter0;
reg    ap_block_state68_pp4_stage0_iter1;
wire    ap_block_state69_pp4_stage0_iter2;
wire    ap_block_state70_pp4_stage0_iter3;
reg    ap_block_pp4_stage0_11001;
reg   [30:0] out_V7_reg_2193;
reg   [30:0] bias_V5_reg_2199;
reg   [30:0] weight_V3_reg_2205;
reg   [31:0] IN_addr_reg_2211;
reg    ap_block_state2_io;
reg   [15:0] B_addr_read_reg_2229;
wire   [31:0] p_cast29_fu_583_p1;
reg   [31:0] p_cast29_reg_2234;
wire    ap_CS_fsm_state10;
reg   [31:0] OUT_addr_reg_2242;
wire   [31:0] p_cast28_fu_592_p1;
reg   [31:0] p_cast28_reg_2248;
wire   [31:0] p_cast27_fu_595_p1;
reg   [31:0] p_cast27_reg_2256;
wire   [0:0] icmp_ln14_fu_598_p2;
reg   [0:0] icmp_ln14_reg_2264_pp0_iter1_reg;
reg   [0:0] icmp_ln14_reg_2264_pp0_iter2_reg;
wire   [12:0] add_ln14_fu_604_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [15:0] W_addr_read_reg_2273;
wire  signed [31:0] mul_ln1118_fu_2158_p2;
reg  signed [31:0] mul_ln1118_reg_2278;
reg   [0:0] tmp_21_reg_2283;
wire   [15:0] select_ln340_5_fu_866_p3;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] B_addr_1_reg_2293;
reg   [31:0] W_addr_1_reg_2299;
reg   [15:0] B_addr_1_read_reg_2305;
wire   [0:0] icmp_ln14_1_fu_904_p2;
reg   [0:0] icmp_ln14_1_reg_2310_pp1_iter1_reg;
reg   [0:0] icmp_ln14_1_reg_2310_pp1_iter2_reg;
wire   [12:0] add_ln14_1_fu_910_p2;
reg    ap_enable_reg_pp1_iter0;
reg  signed [15:0] W_addr_1_read_reg_2319;
wire  signed [31:0] mul_ln1118_1_fu_2165_p2;
reg  signed [31:0] mul_ln1118_1_reg_2324;
reg   [0:0] tmp_27_reg_2329;
wire   [15:0] select_ln340_6_fu_1172_p3;
reg    ap_enable_reg_pp1_iter3;
reg   [31:0] OUT_addr_1_reg_2339;
wire    ap_CS_fsm_state29;
reg   [31:0] B_addr_2_reg_2345;
reg   [31:0] W_addr_2_reg_2351;
reg   [15:0] B_addr_2_read_reg_2357;
wire   [0:0] icmp_ln14_2_fu_1225_p2;
reg   [0:0] icmp_ln14_2_reg_2362_pp2_iter1_reg;
reg   [0:0] icmp_ln14_2_reg_2362_pp2_iter2_reg;
wire   [12:0] add_ln14_2_fu_1231_p2;
reg    ap_enable_reg_pp2_iter0;
reg  signed [15:0] W_addr_2_read_reg_2371;
wire  signed [31:0] mul_ln1118_2_fu_2172_p2;
reg  signed [31:0] mul_ln1118_2_reg_2376;
reg   [0:0] tmp_33_reg_2381;
wire   [15:0] select_ln340_7_fu_1493_p3;
reg    ap_enable_reg_pp2_iter3;
reg   [31:0] OUT_addr_2_reg_2391;
wire    ap_CS_fsm_state43;
reg   [31:0] B_addr_3_reg_2397;
reg   [31:0] W_addr_3_reg_2403;
reg   [15:0] B_addr_3_read_reg_2409;
wire   [0:0] icmp_ln14_3_fu_1546_p2;
reg   [0:0] icmp_ln14_3_reg_2414_pp3_iter1_reg;
reg   [0:0] icmp_ln14_3_reg_2414_pp3_iter2_reg;
wire   [12:0] add_ln14_3_fu_1552_p2;
reg    ap_enable_reg_pp3_iter0;
reg  signed [15:0] W_addr_3_read_reg_2423;
wire  signed [31:0] mul_ln1118_3_fu_2179_p2;
reg  signed [31:0] mul_ln1118_3_reg_2428;
reg   [0:0] tmp_39_reg_2433;
wire   [15:0] select_ln340_8_fu_1814_p3;
reg    ap_enable_reg_pp3_iter3;
reg   [31:0] OUT_addr_3_reg_2443;
wire    ap_CS_fsm_state57;
reg   [31:0] B_addr_4_reg_2449;
reg   [31:0] W_addr_4_reg_2455;
reg   [15:0] B_addr_4_read_reg_2461;
wire   [0:0] icmp_ln14_4_fu_1867_p2;
reg   [0:0] icmp_ln14_4_reg_2466_pp4_iter1_reg;
reg   [0:0] icmp_ln14_4_reg_2466_pp4_iter2_reg;
wire   [12:0] add_ln14_4_fu_1873_p2;
reg    ap_enable_reg_pp4_iter0;
reg  signed [15:0] W_addr_4_read_reg_2475;
wire  signed [31:0] mul_ln1118_4_fu_2186_p2;
reg  signed [31:0] mul_ln1118_4_reg_2480;
reg   [0:0] tmp_45_reg_2485;
wire   [15:0] select_ln340_9_fu_2135_p3;
reg    ap_enable_reg_pp4_iter3;
reg   [31:0] OUT_addr_4_reg_2495;
wire    ap_CS_fsm_state71;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state24;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state25;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state38;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state39;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state52;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state53;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state66;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state67;
reg    ap_enable_reg_pp4_iter2;
wire   [63:0] empty_6_fu_550_p1;
wire   [63:0] empty_4_fu_560_p1;
wire   [63:0] empty_5_fu_570_p1;
wire   [63:0] empty_fu_580_p1;
wire   [63:0] zext_ln12_fu_879_p1;
wire   [63:0] zext_ln1117_fu_894_p1;
wire   [63:0] zext_ln203_fu_1185_p1;
wire   [63:0] zext_ln12_1_fu_1200_p1;
wire   [63:0] zext_ln1117_1_fu_1215_p1;
wire   [63:0] zext_ln203_1_fu_1506_p1;
wire   [63:0] zext_ln12_2_fu_1521_p1;
wire   [63:0] zext_ln1117_2_fu_1536_p1;
wire   [63:0] zext_ln203_2_fu_1827_p1;
wire   [63:0] zext_ln12_3_fu_1842_p1;
wire   [63:0] zext_ln1117_3_fu_1857_p1;
wire   [63:0] zext_ln203_3_fu_2148_p1;
reg    ap_block_state16_io;
reg    ap_block_state30_io;
reg    ap_block_state44_io;
reg    ap_block_state58_io;
wire   [30:0] in_V1_fu_540_p4;
wire   [25:0] shl_ln_fu_624_p3;
wire  signed [31:0] sext_ln728_fu_632_p1;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_fu_636_p2;
wire   [15:0] trunc_ln1_fu_649_p4;
wire   [15:0] zext_ln415_fu_667_p1;
wire   [15:0] add_ln415_fu_670_p2;
wire   [0:0] tmp_22_fu_676_p3;
wire   [0:0] tmp_20_fu_659_p3;
wire   [0:0] xor_ln416_fu_684_p2;
wire   [4:0] tmp_s_fu_704_p4;
wire   [5:0] tmp_10_fu_720_p4;
wire   [0:0] and_ln416_fu_690_p2;
wire   [0:0] icmp_ln879_1_fu_730_p2;
wire   [0:0] icmp_ln768_fu_736_p2;
wire   [0:0] tmp_24_fu_750_p3;
wire   [0:0] icmp_ln879_fu_714_p2;
wire   [0:0] xor_ln779_fu_758_p2;
wire   [0:0] and_ln779_fu_764_p2;
wire   [0:0] select_ln777_fu_742_p3;
wire   [0:0] tmp_23_fu_696_p3;
wire   [0:0] xor_ln785_fu_784_p2;
wire   [0:0] tmp_19_fu_641_p3;
wire   [0:0] or_ln785_fu_790_p2;
wire   [0:0] xor_ln785_1_fu_796_p2;
wire   [0:0] select_ln416_fu_770_p3;
wire   [0:0] and_ln781_fu_778_p2;
wire   [0:0] and_ln786_fu_808_p2;
wire   [0:0] or_ln786_fu_814_p2;
wire   [0:0] xor_ln786_fu_820_p2;
wire   [0:0] and_ln786_5_fu_826_p2;
wire   [0:0] and_ln785_fu_802_p2;
wire   [0:0] or_ln340_2_fu_838_p2;
wire   [0:0] or_ln340_fu_832_p2;
wire   [0:0] or_ln340_1_fu_844_p2;
wire   [15:0] select_ln340_fu_850_p3;
wire   [15:0] select_ln388_fu_858_p3;
wire   [31:0] add_ln12_fu_874_p2;
wire   [31:0] add_ln1117_fu_889_p2;
wire   [25:0] shl_ln728_1_fu_930_p3;
wire  signed [31:0] sext_ln728_1_fu_938_p1;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_1_fu_942_p2;
wire   [15:0] trunc_ln708_1_fu_955_p4;
wire   [15:0] zext_ln415_1_fu_973_p1;
wire   [15:0] add_ln415_1_fu_976_p2;
wire   [0:0] tmp_28_fu_982_p3;
wire   [0:0] tmp_26_fu_965_p3;
wire   [0:0] xor_ln416_1_fu_990_p2;
wire   [4:0] tmp_11_fu_1010_p4;
wire   [5:0] tmp_12_fu_1026_p4;
wire   [0:0] and_ln416_1_fu_996_p2;
wire   [0:0] icmp_ln879_3_fu_1036_p2;
wire   [0:0] icmp_ln768_1_fu_1042_p2;
wire   [0:0] tmp_30_fu_1056_p3;
wire   [0:0] icmp_ln879_2_fu_1020_p2;
wire   [0:0] xor_ln779_1_fu_1064_p2;
wire   [0:0] and_ln779_1_fu_1070_p2;
wire   [0:0] select_ln777_1_fu_1048_p3;
wire   [0:0] tmp_29_fu_1002_p3;
wire   [0:0] xor_ln785_5_fu_1090_p2;
wire   [0:0] tmp_25_fu_947_p3;
wire   [0:0] or_ln785_1_fu_1096_p2;
wire   [0:0] xor_ln785_6_fu_1102_p2;
wire   [0:0] select_ln416_1_fu_1076_p3;
wire   [0:0] and_ln781_1_fu_1084_p2;
wire   [0:0] and_ln786_1_fu_1114_p2;
wire   [0:0] or_ln786_1_fu_1120_p2;
wire   [0:0] xor_ln786_1_fu_1126_p2;
wire   [0:0] and_ln786_6_fu_1132_p2;
wire   [0:0] and_ln785_1_fu_1108_p2;
wire   [0:0] or_ln340_7_fu_1144_p2;
wire   [0:0] or_ln340_5_fu_1138_p2;
wire   [0:0] or_ln340_6_fu_1150_p2;
wire   [15:0] select_ln340_1_fu_1156_p3;
wire   [15:0] select_ln388_1_fu_1164_p3;
wire   [31:0] add_ln203_fu_1180_p2;
wire   [31:0] add_ln12_1_fu_1195_p2;
wire   [31:0] add_ln1117_1_fu_1210_p2;
wire   [25:0] shl_ln728_2_fu_1251_p3;
wire  signed [31:0] sext_ln728_2_fu_1259_p1;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_2_fu_1263_p2;
wire   [15:0] trunc_ln708_2_fu_1276_p4;
wire   [15:0] zext_ln415_2_fu_1294_p1;
wire   [15:0] add_ln415_2_fu_1297_p2;
wire   [0:0] tmp_34_fu_1303_p3;
wire   [0:0] tmp_32_fu_1286_p3;
wire   [0:0] xor_ln416_2_fu_1311_p2;
wire   [4:0] tmp_13_fu_1331_p4;
wire   [5:0] tmp_14_fu_1347_p4;
wire   [0:0] and_ln416_2_fu_1317_p2;
wire   [0:0] icmp_ln879_5_fu_1357_p2;
wire   [0:0] icmp_ln768_2_fu_1363_p2;
wire   [0:0] tmp_36_fu_1377_p3;
wire   [0:0] icmp_ln879_4_fu_1341_p2;
wire   [0:0] xor_ln779_2_fu_1385_p2;
wire   [0:0] and_ln779_2_fu_1391_p2;
wire   [0:0] select_ln777_2_fu_1369_p3;
wire   [0:0] tmp_35_fu_1323_p3;
wire   [0:0] xor_ln785_2_fu_1411_p2;
wire   [0:0] tmp_31_fu_1268_p3;
wire   [0:0] or_ln785_2_fu_1417_p2;
wire   [0:0] xor_ln785_7_fu_1423_p2;
wire   [0:0] select_ln416_2_fu_1397_p3;
wire   [0:0] and_ln781_2_fu_1405_p2;
wire   [0:0] and_ln786_2_fu_1435_p2;
wire   [0:0] or_ln786_2_fu_1441_p2;
wire   [0:0] xor_ln786_2_fu_1447_p2;
wire   [0:0] and_ln786_7_fu_1453_p2;
wire   [0:0] and_ln785_2_fu_1429_p2;
wire   [0:0] or_ln340_10_fu_1465_p2;
wire   [0:0] or_ln340_8_fu_1459_p2;
wire   [0:0] or_ln340_9_fu_1471_p2;
wire   [15:0] select_ln340_2_fu_1477_p3;
wire   [15:0] select_ln388_2_fu_1485_p3;
wire   [31:0] add_ln203_1_fu_1501_p2;
wire   [31:0] add_ln12_2_fu_1516_p2;
wire   [31:0] add_ln1117_2_fu_1531_p2;
wire   [25:0] shl_ln728_3_fu_1572_p3;
wire  signed [31:0] sext_ln728_3_fu_1580_p1;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_3_fu_1584_p2;
wire   [15:0] trunc_ln708_3_fu_1597_p4;
wire   [15:0] zext_ln415_3_fu_1615_p1;
wire   [15:0] add_ln415_3_fu_1618_p2;
wire   [0:0] tmp_40_fu_1624_p3;
wire   [0:0] tmp_38_fu_1607_p3;
wire   [0:0] xor_ln416_3_fu_1632_p2;
wire   [4:0] tmp_15_fu_1652_p4;
wire   [5:0] tmp_16_fu_1668_p4;
wire   [0:0] and_ln416_3_fu_1638_p2;
wire   [0:0] icmp_ln879_7_fu_1678_p2;
wire   [0:0] icmp_ln768_3_fu_1684_p2;
wire   [0:0] tmp_42_fu_1698_p3;
wire   [0:0] icmp_ln879_6_fu_1662_p2;
wire   [0:0] xor_ln779_3_fu_1706_p2;
wire   [0:0] and_ln779_3_fu_1712_p2;
wire   [0:0] select_ln777_3_fu_1690_p3;
wire   [0:0] tmp_41_fu_1644_p3;
wire   [0:0] xor_ln785_3_fu_1732_p2;
wire   [0:0] tmp_37_fu_1589_p3;
wire   [0:0] or_ln785_3_fu_1738_p2;
wire   [0:0] xor_ln785_8_fu_1744_p2;
wire   [0:0] select_ln416_3_fu_1718_p3;
wire   [0:0] and_ln781_3_fu_1726_p2;
wire   [0:0] and_ln786_3_fu_1756_p2;
wire   [0:0] or_ln786_3_fu_1762_p2;
wire   [0:0] xor_ln786_3_fu_1768_p2;
wire   [0:0] and_ln786_8_fu_1774_p2;
wire   [0:0] and_ln785_3_fu_1750_p2;
wire   [0:0] or_ln340_12_fu_1786_p2;
wire   [0:0] or_ln340_3_fu_1780_p2;
wire   [0:0] or_ln340_11_fu_1792_p2;
wire   [15:0] select_ln340_3_fu_1798_p3;
wire   [15:0] select_ln388_3_fu_1806_p3;
wire   [31:0] add_ln203_2_fu_1822_p2;
wire   [31:0] add_ln12_3_fu_1837_p2;
wire   [31:0] add_ln1117_3_fu_1852_p2;
wire   [25:0] shl_ln728_4_fu_1893_p3;
wire  signed [31:0] sext_ln728_4_fu_1901_p1;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_4_fu_1905_p2;
wire   [15:0] trunc_ln708_4_fu_1918_p4;
wire   [15:0] zext_ln415_4_fu_1936_p1;
wire   [15:0] add_ln415_4_fu_1939_p2;
wire   [0:0] tmp_46_fu_1945_p3;
wire   [0:0] tmp_44_fu_1928_p3;
wire   [0:0] xor_ln416_4_fu_1953_p2;
wire   [4:0] tmp_17_fu_1973_p4;
wire   [5:0] tmp_18_fu_1989_p4;
wire   [0:0] and_ln416_4_fu_1959_p2;
wire   [0:0] icmp_ln879_9_fu_1999_p2;
wire   [0:0] icmp_ln768_4_fu_2005_p2;
wire   [0:0] tmp_48_fu_2019_p3;
wire   [0:0] icmp_ln879_8_fu_1983_p2;
wire   [0:0] xor_ln779_4_fu_2027_p2;
wire   [0:0] and_ln779_4_fu_2033_p2;
wire   [0:0] select_ln777_4_fu_2011_p3;
wire   [0:0] tmp_47_fu_1965_p3;
wire   [0:0] xor_ln785_4_fu_2053_p2;
wire   [0:0] tmp_43_fu_1910_p3;
wire   [0:0] or_ln785_4_fu_2059_p2;
wire   [0:0] xor_ln785_9_fu_2065_p2;
wire   [0:0] select_ln416_4_fu_2039_p3;
wire   [0:0] and_ln781_4_fu_2047_p2;
wire   [0:0] and_ln786_4_fu_2077_p2;
wire   [0:0] or_ln786_4_fu_2083_p2;
wire   [0:0] xor_ln786_4_fu_2089_p2;
wire   [0:0] and_ln786_9_fu_2095_p2;
wire   [0:0] and_ln785_4_fu_2071_p2;
wire   [0:0] or_ln340_14_fu_2107_p2;
wire   [0:0] or_ln340_4_fu_2101_p2;
wire   [0:0] or_ln340_13_fu_2113_p2;
wire   [15:0] select_ln340_4_fu_2119_p3;
wire   [15:0] select_ln388_4_fu_2127_p3;
wire   [31:0] add_ln203_3_fu_2143_p2;
reg   [62:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
end

fc_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
fc_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in_V(in_V),
    .weight_V(weight_V),
    .bias_V(bias_V),
    .out_V(out_V)
);

fc_IN_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ))
fc_IN_r_m_axi_U(
    .AWVALID(m_axi_IN_r_AWVALID),
    .AWREADY(m_axi_IN_r_AWREADY),
    .AWADDR(m_axi_IN_r_AWADDR),
    .AWID(m_axi_IN_r_AWID),
    .AWLEN(m_axi_IN_r_AWLEN),
    .AWSIZE(m_axi_IN_r_AWSIZE),
    .AWBURST(m_axi_IN_r_AWBURST),
    .AWLOCK(m_axi_IN_r_AWLOCK),
    .AWCACHE(m_axi_IN_r_AWCACHE),
    .AWPROT(m_axi_IN_r_AWPROT),
    .AWQOS(m_axi_IN_r_AWQOS),
    .AWREGION(m_axi_IN_r_AWREGION),
    .AWUSER(m_axi_IN_r_AWUSER),
    .WVALID(m_axi_IN_r_WVALID),
    .WREADY(m_axi_IN_r_WREADY),
    .WDATA(m_axi_IN_r_WDATA),
    .WSTRB(m_axi_IN_r_WSTRB),
    .WLAST(m_axi_IN_r_WLAST),
    .WID(m_axi_IN_r_WID),
    .WUSER(m_axi_IN_r_WUSER),
    .ARVALID(m_axi_IN_r_ARVALID),
    .ARREADY(m_axi_IN_r_ARREADY),
    .ARADDR(m_axi_IN_r_ARADDR),
    .ARID(m_axi_IN_r_ARID),
    .ARLEN(m_axi_IN_r_ARLEN),
    .ARSIZE(m_axi_IN_r_ARSIZE),
    .ARBURST(m_axi_IN_r_ARBURST),
    .ARLOCK(m_axi_IN_r_ARLOCK),
    .ARCACHE(m_axi_IN_r_ARCACHE),
    .ARPROT(m_axi_IN_r_ARPROT),
    .ARQOS(m_axi_IN_r_ARQOS),
    .ARREGION(m_axi_IN_r_ARREGION),
    .ARUSER(m_axi_IN_r_ARUSER),
    .RVALID(m_axi_IN_r_RVALID),
    .RREADY(m_axi_IN_r_RREADY),
    .RDATA(m_axi_IN_r_RDATA),
    .RLAST(m_axi_IN_r_RLAST),
    .RID(m_axi_IN_r_RID),
    .RUSER(m_axi_IN_r_RUSER),
    .RRESP(m_axi_IN_r_RRESP),
    .BVALID(m_axi_IN_r_BVALID),
    .BREADY(m_axi_IN_r_BREADY),
    .BRESP(m_axi_IN_r_BRESP),
    .BID(m_axi_IN_r_BID),
    .BUSER(m_axi_IN_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(IN_r_ARVALID),
    .I_ARREADY(IN_r_ARREADY),
    .I_ARADDR(IN_addr_reg_2211),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4800),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(IN_r_RVALID),
    .I_RREADY(IN_r_RREADY),
    .I_RDATA(IN_r_RDATA),
    .I_RID(IN_r_RID),
    .I_RUSER(IN_r_RUSER),
    .I_RRESP(IN_r_RRESP),
    .I_RLAST(IN_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(IN_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(IN_r_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(IN_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(IN_r_BRESP),
    .I_BID(IN_r_BID),
    .I_BUSER(IN_r_BUSER)
);

fc_W_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_W_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_W_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_W_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_W_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_W_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_W_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_W_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_W_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_W_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_W_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_W_CACHE_VALUE ))
fc_W_m_axi_U(
    .AWVALID(m_axi_W_AWVALID),
    .AWREADY(m_axi_W_AWREADY),
    .AWADDR(m_axi_W_AWADDR),
    .AWID(m_axi_W_AWID),
    .AWLEN(m_axi_W_AWLEN),
    .AWSIZE(m_axi_W_AWSIZE),
    .AWBURST(m_axi_W_AWBURST),
    .AWLOCK(m_axi_W_AWLOCK),
    .AWCACHE(m_axi_W_AWCACHE),
    .AWPROT(m_axi_W_AWPROT),
    .AWQOS(m_axi_W_AWQOS),
    .AWREGION(m_axi_W_AWREGION),
    .AWUSER(m_axi_W_AWUSER),
    .WVALID(m_axi_W_WVALID),
    .WREADY(m_axi_W_WREADY),
    .WDATA(m_axi_W_WDATA),
    .WSTRB(m_axi_W_WSTRB),
    .WLAST(m_axi_W_WLAST),
    .WID(m_axi_W_WID),
    .WUSER(m_axi_W_WUSER),
    .ARVALID(m_axi_W_ARVALID),
    .ARREADY(m_axi_W_ARREADY),
    .ARADDR(m_axi_W_ARADDR),
    .ARID(m_axi_W_ARID),
    .ARLEN(m_axi_W_ARLEN),
    .ARSIZE(m_axi_W_ARSIZE),
    .ARBURST(m_axi_W_ARBURST),
    .ARLOCK(m_axi_W_ARLOCK),
    .ARCACHE(m_axi_W_ARCACHE),
    .ARPROT(m_axi_W_ARPROT),
    .ARQOS(m_axi_W_ARQOS),
    .ARREGION(m_axi_W_ARREGION),
    .ARUSER(m_axi_W_ARUSER),
    .RVALID(m_axi_W_RVALID),
    .RREADY(m_axi_W_RREADY),
    .RDATA(m_axi_W_RDATA),
    .RLAST(m_axi_W_RLAST),
    .RID(m_axi_W_RID),
    .RUSER(m_axi_W_RUSER),
    .RRESP(m_axi_W_RRESP),
    .BVALID(m_axi_W_BVALID),
    .BREADY(m_axi_W_BREADY),
    .BRESP(m_axi_W_BRESP),
    .BID(m_axi_W_BID),
    .BUSER(m_axi_W_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(W_ARVALID),
    .I_ARREADY(W_ARREADY),
    .I_ARADDR(W_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4800),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(W_RVALID),
    .I_RREADY(W_RREADY),
    .I_RDATA(W_RDATA),
    .I_RID(W_RID),
    .I_RUSER(W_RUSER),
    .I_RRESP(W_RRESP),
    .I_RLAST(W_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(W_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(W_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(W_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(W_BRESP),
    .I_BID(W_BID),
    .I_BUSER(W_BUSER)
);

fc_B_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B_CACHE_VALUE ))
fc_B_m_axi_U(
    .AWVALID(m_axi_B_AWVALID),
    .AWREADY(m_axi_B_AWREADY),
    .AWADDR(m_axi_B_AWADDR),
    .AWID(m_axi_B_AWID),
    .AWLEN(m_axi_B_AWLEN),
    .AWSIZE(m_axi_B_AWSIZE),
    .AWBURST(m_axi_B_AWBURST),
    .AWLOCK(m_axi_B_AWLOCK),
    .AWCACHE(m_axi_B_AWCACHE),
    .AWPROT(m_axi_B_AWPROT),
    .AWQOS(m_axi_B_AWQOS),
    .AWREGION(m_axi_B_AWREGION),
    .AWUSER(m_axi_B_AWUSER),
    .WVALID(m_axi_B_WVALID),
    .WREADY(m_axi_B_WREADY),
    .WDATA(m_axi_B_WDATA),
    .WSTRB(m_axi_B_WSTRB),
    .WLAST(m_axi_B_WLAST),
    .WID(m_axi_B_WID),
    .WUSER(m_axi_B_WUSER),
    .ARVALID(m_axi_B_ARVALID),
    .ARREADY(m_axi_B_ARREADY),
    .ARADDR(m_axi_B_ARADDR),
    .ARID(m_axi_B_ARID),
    .ARLEN(m_axi_B_ARLEN),
    .ARSIZE(m_axi_B_ARSIZE),
    .ARBURST(m_axi_B_ARBURST),
    .ARLOCK(m_axi_B_ARLOCK),
    .ARCACHE(m_axi_B_ARCACHE),
    .ARPROT(m_axi_B_ARPROT),
    .ARQOS(m_axi_B_ARQOS),
    .ARREGION(m_axi_B_ARREGION),
    .ARUSER(m_axi_B_ARUSER),
    .RVALID(m_axi_B_RVALID),
    .RREADY(m_axi_B_RREADY),
    .RDATA(m_axi_B_RDATA),
    .RLAST(m_axi_B_RLAST),
    .RID(m_axi_B_RID),
    .RUSER(m_axi_B_RUSER),
    .RRESP(m_axi_B_RRESP),
    .BVALID(m_axi_B_BVALID),
    .BREADY(m_axi_B_BREADY),
    .BRESP(m_axi_B_BRESP),
    .BID(m_axi_B_BID),
    .BUSER(m_axi_B_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(B_ARVALID),
    .I_ARREADY(B_ARREADY),
    .I_ARADDR(B_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(B_RVALID),
    .I_RREADY(B_RREADY),
    .I_RDATA(B_RDATA),
    .I_RID(B_RID),
    .I_RUSER(B_RUSER),
    .I_RRESP(B_RRESP),
    .I_RLAST(B_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(B_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(B_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(B_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(B_BRESP),
    .I_BID(B_BID),
    .I_BUSER(B_BUSER)
);

fc_OUT_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUT_R_CACHE_VALUE ))
fc_OUT_r_m_axi_U(
    .AWVALID(m_axi_OUT_r_AWVALID),
    .AWREADY(m_axi_OUT_r_AWREADY),
    .AWADDR(m_axi_OUT_r_AWADDR),
    .AWID(m_axi_OUT_r_AWID),
    .AWLEN(m_axi_OUT_r_AWLEN),
    .AWSIZE(m_axi_OUT_r_AWSIZE),
    .AWBURST(m_axi_OUT_r_AWBURST),
    .AWLOCK(m_axi_OUT_r_AWLOCK),
    .AWCACHE(m_axi_OUT_r_AWCACHE),
    .AWPROT(m_axi_OUT_r_AWPROT),
    .AWQOS(m_axi_OUT_r_AWQOS),
    .AWREGION(m_axi_OUT_r_AWREGION),
    .AWUSER(m_axi_OUT_r_AWUSER),
    .WVALID(m_axi_OUT_r_WVALID),
    .WREADY(m_axi_OUT_r_WREADY),
    .WDATA(m_axi_OUT_r_WDATA),
    .WSTRB(m_axi_OUT_r_WSTRB),
    .WLAST(m_axi_OUT_r_WLAST),
    .WID(m_axi_OUT_r_WID),
    .WUSER(m_axi_OUT_r_WUSER),
    .ARVALID(m_axi_OUT_r_ARVALID),
    .ARREADY(m_axi_OUT_r_ARREADY),
    .ARADDR(m_axi_OUT_r_ARADDR),
    .ARID(m_axi_OUT_r_ARID),
    .ARLEN(m_axi_OUT_r_ARLEN),
    .ARSIZE(m_axi_OUT_r_ARSIZE),
    .ARBURST(m_axi_OUT_r_ARBURST),
    .ARLOCK(m_axi_OUT_r_ARLOCK),
    .ARCACHE(m_axi_OUT_r_ARCACHE),
    .ARPROT(m_axi_OUT_r_ARPROT),
    .ARQOS(m_axi_OUT_r_ARQOS),
    .ARREGION(m_axi_OUT_r_ARREGION),
    .ARUSER(m_axi_OUT_r_ARUSER),
    .RVALID(m_axi_OUT_r_RVALID),
    .RREADY(m_axi_OUT_r_RREADY),
    .RDATA(m_axi_OUT_r_RDATA),
    .RLAST(m_axi_OUT_r_RLAST),
    .RID(m_axi_OUT_r_RID),
    .RUSER(m_axi_OUT_r_RUSER),
    .RRESP(m_axi_OUT_r_RRESP),
    .BVALID(m_axi_OUT_r_BVALID),
    .BREADY(m_axi_OUT_r_BREADY),
    .BRESP(m_axi_OUT_r_BRESP),
    .BID(m_axi_OUT_r_BID),
    .BUSER(m_axi_OUT_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(OUT_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(OUT_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(OUT_r_RDATA),
    .I_RID(OUT_r_RID),
    .I_RUSER(OUT_r_RUSER),
    .I_RRESP(OUT_r_RRESP),
    .I_RLAST(OUT_r_RLAST),
    .I_AWVALID(OUT_r_AWVALID),
    .I_AWREADY(OUT_r_AWREADY),
    .I_AWADDR(OUT_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(OUT_r_WVALID),
    .I_WREADY(OUT_r_WREADY),
    .I_WDATA(OUT_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(OUT_r_BVALID),
    .I_BREADY(OUT_r_BREADY),
    .I_BRESP(OUT_r_BRESP),
    .I_BID(OUT_r_BID),
    .I_BUSER(OUT_r_BUSER)
);

fc_mul_mul_16s_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fc_mul_mul_16s_16bkb_U1(
    .din0(reg_506),
    .din1(W_addr_read_reg_2273),
    .dout(mul_ln1118_fu_2158_p2)
);

fc_mul_mul_16s_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fc_mul_mul_16s_16bkb_U2(
    .din0(reg_506),
    .din1(W_addr_1_read_reg_2319),
    .dout(mul_ln1118_1_fu_2165_p2)
);

fc_mul_mul_16s_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fc_mul_mul_16s_16bkb_U3(
    .din0(reg_506),
    .din1(W_addr_2_read_reg_2371),
    .dout(mul_ln1118_2_fu_2172_p2)
);

fc_mul_mul_16s_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fc_mul_mul_16s_16bkb_U4(
    .din0(reg_506),
    .din1(W_addr_3_read_reg_2423),
    .dout(mul_ln1118_3_fu_2179_p2)
);

fc_mul_mul_16s_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
fc_mul_mul_16s_16bkb_U5(
    .din0(reg_506),
    .din1(W_addr_4_read_reg_2475),
    .dout(mul_ln1118_4_fu_2186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state11)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state25) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state25)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state39) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state39)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state39);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state53) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state52)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state53)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state53);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end else if ((1'b1 == ap_CS_fsm_state52)) begin
            ap_enable_reg_pp3_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state67) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state66)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state67)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state67);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end else if ((1'b1 == ap_CS_fsm_state66)) begin
            ap_enable_reg_pp4_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_598_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_0_reg_407 <= add_ln14_fu_604_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_0_reg_407 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln14_1_fu_904_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_0_1_reg_429 <= add_ln14_1_fu_910_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        j_0_1_reg_429 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln14_2_fu_1225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        j_0_2_reg_451 <= add_ln14_2_fu_1231_p2;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        j_0_2_reg_451 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln14_3_fu_1546_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
        j_0_3_reg_473 <= add_ln14_3_fu_1552_p2;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        j_0_3_reg_473 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln14_4_fu_1867_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        j_0_4_reg_495 <= add_ln14_4_fu_1873_p2;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        j_0_4_reg_495 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_2264_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_Val2_0_reg_396 <= select_ln340_5_fu_866_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_0_reg_396 <= B_addr_read_reg_2229;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln14_1_reg_2310_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        p_Val2_1_reg_418 <= select_ln340_6_fu_1172_p3;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        p_Val2_1_reg_418 <= B_addr_1_read_reg_2305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln14_2_reg_2362_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        p_Val2_2_reg_440 <= select_ln340_7_fu_1493_p3;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        p_Val2_2_reg_440 <= B_addr_2_read_reg_2357;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln14_3_reg_2414_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter3 == 1'b1))) begin
        p_Val2_3_reg_462 <= select_ln340_8_fu_1814_p3;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        p_Val2_3_reg_462 <= B_addr_3_read_reg_2409;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln14_4_reg_2466_pp4_iter2_reg == 1'd0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        p_Val2_4_reg_484 <= select_ln340_9_fu_2135_p3;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        p_Val2_4_reg_484 <= B_addr_4_read_reg_2461;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state23))) begin
        B_addr_1_read_reg_2305 <= B_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state15))) begin
        B_addr_1_reg_2293 <= zext_ln12_fu_879_p1;
        W_addr_1_reg_2299 <= zext_ln1117_fu_894_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state37))) begin
        B_addr_2_read_reg_2357 <= B_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        B_addr_2_reg_2345 <= zext_ln12_1_fu_1200_p1;
        OUT_addr_1_reg_2339 <= zext_ln203_fu_1185_p1;
        W_addr_2_reg_2351 <= zext_ln1117_1_fu_1215_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state51))) begin
        B_addr_3_read_reg_2409 <= B_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        B_addr_3_reg_2397 <= zext_ln12_2_fu_1521_p1;
        OUT_addr_2_reg_2391 <= zext_ln203_1_fu_1506_p1;
        W_addr_3_reg_2403 <= zext_ln1117_2_fu_1536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state65))) begin
        B_addr_4_read_reg_2461 <= B_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        B_addr_4_reg_2449 <= zext_ln12_3_fu_1842_p1;
        OUT_addr_3_reg_2443 <= zext_ln203_2_fu_1827_p1;
        W_addr_4_reg_2455 <= zext_ln1117_3_fu_1857_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state9))) begin
        B_addr_read_reg_2229 <= B_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        IN_addr_reg_2211[30 : 0] <= empty_6_fu_550_p1[30 : 0];
        bias_V5_reg_2199 <= {{bias_V[31:1]}};
        out_V7_reg_2193 <= {{out_V[31:1]}};
        weight_V3_reg_2205 <= {{weight_V[31:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        OUT_addr_4_reg_2495 <= zext_ln203_3_fu_2148_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        OUT_addr_reg_2242[30 : 0] <= empty_fu_580_p1[30 : 0];
        p_cast27_reg_2256[30 : 0] <= p_cast27_fu_595_p1[30 : 0];
        p_cast28_reg_2248[30 : 0] <= p_cast28_fu_592_p1[30 : 0];
        p_cast29_reg_2234[30 : 0] <= p_cast29_fu_583_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln14_1_reg_2310 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        W_addr_1_read_reg_2319 <= W_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln14_2_reg_2362 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        W_addr_2_read_reg_2371 <= W_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln14_3_reg_2414 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        W_addr_3_read_reg_2423 <= W_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln14_4_reg_2466 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        W_addr_4_read_reg_2475 <= W_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_2264 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_addr_read_reg_2273 <= W_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln14_1_reg_2310 <= icmp_ln14_1_fu_904_p2;
        icmp_ln14_1_reg_2310_pp1_iter1_reg <= icmp_ln14_1_reg_2310;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln14_1_reg_2310_pp1_iter2_reg <= icmp_ln14_1_reg_2310_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln14_2_reg_2362 <= icmp_ln14_2_fu_1225_p2;
        icmp_ln14_2_reg_2362_pp2_iter1_reg <= icmp_ln14_2_reg_2362;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln14_2_reg_2362_pp2_iter2_reg <= icmp_ln14_2_reg_2362_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln14_3_reg_2414 <= icmp_ln14_3_fu_1546_p2;
        icmp_ln14_3_reg_2414_pp3_iter1_reg <= icmp_ln14_3_reg_2414;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln14_3_reg_2414_pp3_iter2_reg <= icmp_ln14_3_reg_2414_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln14_4_reg_2466 <= icmp_ln14_4_fu_1867_p2;
        icmp_ln14_4_reg_2466_pp4_iter1_reg <= icmp_ln14_4_reg_2466;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln14_4_reg_2466_pp4_iter2_reg <= icmp_ln14_4_reg_2466_pp4_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_2264 <= icmp_ln14_fu_598_p2;
        icmp_ln14_reg_2264_pp0_iter1_reg <= icmp_ln14_reg_2264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln14_reg_2264_pp0_iter2_reg <= icmp_ln14_reg_2264_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln14_1_reg_2310_pp1_iter1_reg == 1'd0))) begin
        mul_ln1118_1_reg_2324 <= mul_ln1118_1_fu_2165_p2;
        tmp_27_reg_2329 <= mul_ln1118_1_fu_2165_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln14_2_reg_2362_pp2_iter1_reg == 1'd0))) begin
        mul_ln1118_2_reg_2376 <= mul_ln1118_2_fu_2172_p2;
        tmp_33_reg_2381 <= mul_ln1118_2_fu_2172_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln14_3_reg_2414_pp3_iter1_reg == 1'd0))) begin
        mul_ln1118_3_reg_2428 <= mul_ln1118_3_fu_2179_p2;
        tmp_39_reg_2433 <= mul_ln1118_3_fu_2179_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln14_4_reg_2466_pp4_iter1_reg == 1'd0))) begin
        mul_ln1118_4_reg_2480 <= mul_ln1118_4_fu_2186_p2;
        tmp_45_reg_2485 <= mul_ln1118_4_fu_2186_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_2264_pp0_iter1_reg == 1'd0))) begin
        mul_ln1118_reg_2278 <= mul_ln1118_fu_2158_p2;
        tmp_21_reg_2283 <= mul_ln1118_fu_2158_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln14_4_reg_2466 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln14_3_reg_2414 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln14_2_reg_2362 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln14_1_reg_2310 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_2264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_506 <= IN_r_RDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io))) begin
        B_ARADDR = B_addr_4_reg_2449;
    end else if (((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io))) begin
        B_ARADDR = B_addr_3_reg_2397;
    end else if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
        B_ARADDR = B_addr_2_reg_2345;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_block_state16_io))) begin
        B_ARADDR = B_addr_1_reg_2293;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        B_ARADDR = empty_4_fu_560_p1;
    end else begin
        B_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io)) | ((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io)) | ((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io)) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_block_state16_io)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
        B_ARVALID = 1'b1;
    end else begin
        B_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state65)) | ((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state51)) | ((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state9)))) begin
        B_RREADY = 1'b1;
    end else begin
        B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        B_blk_n_AR = m_axi_B_ARREADY;
    end else begin
        B_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state9))) begin
        B_blk_n_R = m_axi_B_RVALID;
    end else begin
        B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io)) | ((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io)) | ((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io)) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_block_state16_io)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
        IN_r_ARVALID = 1'b1;
    end else begin
        IN_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln14_4_reg_2466 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln14_3_reg_2414 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln14_2_reg_2362 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln14_1_reg_2310 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_2264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        IN_r_RREADY = 1'b1;
    end else begin
        IN_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        IN_r_blk_n_AR = m_axi_IN_r_ARREADY;
    end else begin
        IN_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0) & (icmp_ln14_4_reg_2466 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln14_3_reg_2414 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln14_2_reg_2362 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln14_1_reg_2310 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        IN_r_blk_n_R = m_axi_IN_r_RVALID;
    end else begin
        IN_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state72))) begin
        OUT_r_AWADDR = OUT_addr_4_reg_2495;
    end else if (((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io))) begin
        OUT_r_AWADDR = OUT_addr_3_reg_2443;
    end else if (((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io))) begin
        OUT_r_AWADDR = OUT_addr_2_reg_2391;
    end else if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
        OUT_r_AWADDR = OUT_addr_1_reg_2339;
    end else if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state15))) begin
        OUT_r_AWADDR = OUT_addr_reg_2242;
    end else begin
        OUT_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state72)) | ((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io)) | ((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io)) | ((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io)))) begin
        OUT_r_AWVALID = 1'b1;
    end else begin
        OUT_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state78)) | ((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state64)) | ((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state50)) | ((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state36)) | ((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state21)))) begin
        OUT_r_BREADY = 1'b1;
    end else begin
        OUT_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        OUT_r_WDATA = p_Val2_4_reg_484;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        OUT_r_WDATA = p_Val2_3_reg_462;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        OUT_r_WDATA = p_Val2_2_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        OUT_r_WDATA = p_Val2_1_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        OUT_r_WDATA = p_Val2_0_reg_396;
    end else begin
        OUT_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state73)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state59)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state45)) | ((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_block_state16_io)))) begin
        OUT_r_WVALID = 1'b1;
    end else begin
        OUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state30))) begin
        OUT_r_blk_n_AW = m_axi_OUT_r_AWREADY;
    end else begin
        OUT_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state21))) begin
        OUT_r_blk_n_B = m_axi_OUT_r_BVALID;
    end else begin
        OUT_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state16))) begin
        OUT_r_blk_n_W = m_axi_OUT_r_WREADY;
    end else begin
        OUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io))) begin
        W_ARADDR = W_addr_4_reg_2455;
    end else if (((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io))) begin
        W_ARADDR = W_addr_3_reg_2403;
    end else if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
        W_ARADDR = W_addr_2_reg_2351;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_block_state16_io))) begin
        W_ARADDR = W_addr_1_reg_2299;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        W_ARADDR = empty_5_fu_570_p1;
    end else begin
        W_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io)) | ((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io)) | ((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io)) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_block_state16_io)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)))) begin
        W_ARVALID = 1'b1;
    end else begin
        W_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln14_4_reg_2466 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln14_3_reg_2414 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln14_2_reg_2362 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln14_1_reg_2310 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_2264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        W_RREADY = 1'b1;
    end else begin
        W_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        W_blk_n_AR = m_axi_W_ARREADY;
    end else begin
        W_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0) & (icmp_ln14_4_reg_2466 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln14_3_reg_2414 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln14_2_reg_2362 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln14_1_reg_2310 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        W_blk_n_R = m_axi_W_RVALID;
    end else begin
        W_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_598_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln14_1_fu_904_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln14_2_fu_1225_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state39 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln14_3_fu_1546_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state53 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state53 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln14_4_fu_1867_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state67 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state67 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state78))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state78))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln14_fu_598_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln14_fu_598_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == ap_block_state16_io))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln14_1_fu_904_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln14_1_fu_904_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln14_2_fu_1225_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln14_2_fu_1225_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_block_state44_io))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln14_3_fu_1546_p2 == 1'd1)) & ~((ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln14_3_fu_1546_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_block_state58_io))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == B_RVALID) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln14_4_fu_1867_p2 == 1'd1)) & ~((ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter3 == 1'b1) & (ap_enable_reg_pp4_iter2 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln14_4_fu_1867_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == OUT_r_AWREADY) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == OUT_r_WREADY) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == OUT_r_BVALID) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1117_1_fu_1210_p2 = (p_cast27_reg_2256 + 32'd9600);

assign add_ln1117_2_fu_1531_p2 = (p_cast27_reg_2256 + 32'd14400);

assign add_ln1117_3_fu_1852_p2 = (p_cast27_reg_2256 + 32'd19200);

assign add_ln1117_fu_889_p2 = (p_cast27_reg_2256 + 32'd4800);

assign add_ln1192_1_fu_942_p2 = ($signed(mul_ln1118_1_reg_2324) + $signed(sext_ln728_1_fu_938_p1));

assign add_ln1192_2_fu_1263_p2 = ($signed(mul_ln1118_2_reg_2376) + $signed(sext_ln728_2_fu_1259_p1));

assign add_ln1192_3_fu_1584_p2 = ($signed(mul_ln1118_3_reg_2428) + $signed(sext_ln728_3_fu_1580_p1));

assign add_ln1192_4_fu_1905_p2 = ($signed(mul_ln1118_4_reg_2480) + $signed(sext_ln728_4_fu_1901_p1));

assign add_ln1192_fu_636_p2 = ($signed(mul_ln1118_reg_2278) + $signed(sext_ln728_fu_632_p1));

assign add_ln12_1_fu_1195_p2 = (p_cast28_reg_2248 + 32'd2);

assign add_ln12_2_fu_1516_p2 = (p_cast28_reg_2248 + 32'd3);

assign add_ln12_3_fu_1837_p2 = (p_cast28_reg_2248 + 32'd4);

assign add_ln12_fu_874_p2 = (p_cast28_reg_2248 + 32'd1);

assign add_ln14_1_fu_910_p2 = (j_0_1_reg_429 + 13'd1);

assign add_ln14_2_fu_1231_p2 = (j_0_2_reg_451 + 13'd1);

assign add_ln14_3_fu_1552_p2 = (j_0_3_reg_473 + 13'd1);

assign add_ln14_4_fu_1873_p2 = (j_0_4_reg_495 + 13'd1);

assign add_ln14_fu_604_p2 = (j_0_0_reg_407 + 13'd1);

assign add_ln203_1_fu_1501_p2 = (p_cast29_reg_2234 + 32'd2);

assign add_ln203_2_fu_1822_p2 = (p_cast29_reg_2234 + 32'd3);

assign add_ln203_3_fu_2143_p2 = (p_cast29_reg_2234 + 32'd4);

assign add_ln203_fu_1180_p2 = (p_cast29_reg_2234 + 32'd1);

assign add_ln415_1_fu_976_p2 = (trunc_ln708_1_fu_955_p4 + zext_ln415_1_fu_973_p1);

assign add_ln415_2_fu_1297_p2 = (trunc_ln708_2_fu_1276_p4 + zext_ln415_2_fu_1294_p1);

assign add_ln415_3_fu_1618_p2 = (trunc_ln708_3_fu_1597_p4 + zext_ln415_3_fu_1615_p1);

assign add_ln415_4_fu_1939_p2 = (trunc_ln708_4_fu_1918_p4 + zext_ln415_4_fu_1936_p1);

assign add_ln415_fu_670_p2 = (trunc_ln1_fu_649_p4 + zext_ln415_fu_667_p1);

assign and_ln416_1_fu_996_p2 = (xor_ln416_1_fu_990_p2 & tmp_26_fu_965_p3);

assign and_ln416_2_fu_1317_p2 = (xor_ln416_2_fu_1311_p2 & tmp_32_fu_1286_p3);

assign and_ln416_3_fu_1638_p2 = (xor_ln416_3_fu_1632_p2 & tmp_38_fu_1607_p3);

assign and_ln416_4_fu_1959_p2 = (xor_ln416_4_fu_1953_p2 & tmp_44_fu_1928_p3);

assign and_ln416_fu_690_p2 = (xor_ln416_fu_684_p2 & tmp_20_fu_659_p3);

assign and_ln779_1_fu_1070_p2 = (xor_ln779_1_fu_1064_p2 & icmp_ln879_2_fu_1020_p2);

assign and_ln779_2_fu_1391_p2 = (xor_ln779_2_fu_1385_p2 & icmp_ln879_4_fu_1341_p2);

assign and_ln779_3_fu_1712_p2 = (xor_ln779_3_fu_1706_p2 & icmp_ln879_6_fu_1662_p2);

assign and_ln779_4_fu_2033_p2 = (xor_ln779_4_fu_2027_p2 & icmp_ln879_8_fu_1983_p2);

assign and_ln779_fu_764_p2 = (xor_ln779_fu_758_p2 & icmp_ln879_fu_714_p2);

assign and_ln781_1_fu_1084_p2 = (icmp_ln879_3_fu_1036_p2 & and_ln416_1_fu_996_p2);

assign and_ln781_2_fu_1405_p2 = (icmp_ln879_5_fu_1357_p2 & and_ln416_2_fu_1317_p2);

assign and_ln781_3_fu_1726_p2 = (icmp_ln879_7_fu_1678_p2 & and_ln416_3_fu_1638_p2);

assign and_ln781_4_fu_2047_p2 = (icmp_ln879_9_fu_1999_p2 & and_ln416_4_fu_1959_p2);

assign and_ln781_fu_778_p2 = (icmp_ln879_1_fu_730_p2 & and_ln416_fu_690_p2);

assign and_ln785_1_fu_1108_p2 = (xor_ln785_6_fu_1102_p2 & or_ln785_1_fu_1096_p2);

assign and_ln785_2_fu_1429_p2 = (xor_ln785_7_fu_1423_p2 & or_ln785_2_fu_1417_p2);

assign and_ln785_3_fu_1750_p2 = (xor_ln785_8_fu_1744_p2 & or_ln785_3_fu_1738_p2);

assign and_ln785_4_fu_2071_p2 = (xor_ln785_9_fu_2065_p2 & or_ln785_4_fu_2059_p2);

assign and_ln785_fu_802_p2 = (xor_ln785_1_fu_796_p2 & or_ln785_fu_790_p2);

assign and_ln786_1_fu_1114_p2 = (tmp_29_fu_1002_p3 & select_ln416_1_fu_1076_p3);

assign and_ln786_2_fu_1435_p2 = (tmp_35_fu_1323_p3 & select_ln416_2_fu_1397_p3);

assign and_ln786_3_fu_1756_p2 = (tmp_41_fu_1644_p3 & select_ln416_3_fu_1718_p3);

assign and_ln786_4_fu_2077_p2 = (tmp_47_fu_1965_p3 & select_ln416_4_fu_2039_p3);

assign and_ln786_5_fu_826_p2 = (xor_ln786_fu_820_p2 & tmp_19_fu_641_p3);

assign and_ln786_6_fu_1132_p2 = (xor_ln786_1_fu_1126_p2 & tmp_25_fu_947_p3);

assign and_ln786_7_fu_1453_p2 = (xor_ln786_2_fu_1447_p2 & tmp_31_fu_1268_p3);

assign and_ln786_8_fu_1774_p2 = (xor_ln786_3_fu_1768_p2 & tmp_37_fu_1589_p3);

assign and_ln786_9_fu_2095_p2 = (xor_ln786_4_fu_2089_p2 & tmp_43_fu_1910_p3);

assign and_ln786_fu_808_p2 = (tmp_23_fu_696_p3 & select_ln416_fu_770_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln14_1_reg_2310 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_1_reg_2310 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln14_1_reg_2310 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_1_reg_2310 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter1 == 1'b1) & (((icmp_ln14_2_reg_2362 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_2_reg_2362 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter1 == 1'b1) & (((icmp_ln14_2_reg_2362 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_2_reg_2362 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((ap_enable_reg_pp3_iter1 == 1'b1) & (((icmp_ln14_3_reg_2414 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_3_reg_2414 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((ap_enable_reg_pp3_iter1 == 1'b1) & (((icmp_ln14_3_reg_2414 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_3_reg_2414 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((ap_enable_reg_pp4_iter1 == 1'b1) & (((icmp_ln14_4_reg_2466 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_4_reg_2466 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((ap_enable_reg_pp4_iter1 == 1'b1) & (((icmp_ln14_4_reg_2466 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_4_reg_2466 == 1'd0) & (1'b0 == IN_r_RVALID))));
end

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter1 = (((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_reg_2264 == 1'd0) & (1'b0 == IN_r_RVALID)));
end

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((1'b0 == OUT_r_WREADY) | (1'b0 == B_ARREADY) | (1'b0 == W_ARREADY) | (1'b0 == IN_r_ARREADY));
end

assign ap_block_state25_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp1_stage0_iter1 = (((icmp_ln14_1_reg_2310 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_1_reg_2310 == 1'd0) & (1'b0 == IN_r_RVALID)));
end

assign ap_block_state27_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((1'b0 == B_ARREADY) | (1'b0 == W_ARREADY) | (1'b0 == IN_r_ARREADY));
end

always @ (*) begin
    ap_block_state30_io = ((1'b0 == OUT_r_AWREADY) | (1'b0 == B_ARREADY) | (1'b0 == W_ARREADY) | (1'b0 == IN_r_ARREADY));
end

assign ap_block_state39_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_pp2_stage0_iter1 = (((icmp_ln14_2_reg_2362 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_2_reg_2362 == 1'd0) & (1'b0 == IN_r_RVALID)));
end

assign ap_block_state41_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state44_io = ((1'b0 == OUT_r_AWREADY) | (1'b0 == B_ARREADY) | (1'b0 == W_ARREADY) | (1'b0 == IN_r_ARREADY));
end

assign ap_block_state53_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_pp3_stage0_iter1 = (((icmp_ln14_3_reg_2414 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_3_reg_2414 == 1'd0) & (1'b0 == IN_r_RVALID)));
end

assign ap_block_state55_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state58_io = ((1'b0 == OUT_r_AWREADY) | (1'b0 == B_ARREADY) | (1'b0 == W_ARREADY) | (1'b0 == IN_r_ARREADY));
end

assign ap_block_state67_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state68_pp4_stage0_iter1 = (((icmp_ln14_4_reg_2466 == 1'd0) & (1'b0 == W_RVALID)) | ((icmp_ln14_4_reg_2466 == 1'd0) & (1'b0 == IN_r_RVALID)));
end

assign ap_block_state69_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_4_fu_560_p1 = bias_V5_reg_2199;

assign empty_5_fu_570_p1 = weight_V3_reg_2205;

assign empty_6_fu_550_p1 = in_V1_fu_540_p4;

assign empty_fu_580_p1 = out_V7_reg_2193;

assign icmp_ln14_1_fu_904_p2 = ((j_0_1_reg_429 == 13'd4800) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_1225_p2 = ((j_0_2_reg_451 == 13'd4800) ? 1'b1 : 1'b0);

assign icmp_ln14_3_fu_1546_p2 = ((j_0_3_reg_473 == 13'd4800) ? 1'b1 : 1'b0);

assign icmp_ln14_4_fu_1867_p2 = ((j_0_4_reg_495 == 13'd4800) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_598_p2 = ((j_0_0_reg_407 == 13'd4800) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_1042_p2 = ((tmp_12_fu_1026_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_1363_p2 = ((tmp_14_fu_1347_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_1684_p2 = ((tmp_16_fu_1668_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_4_fu_2005_p2 = ((tmp_18_fu_1989_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_736_p2 = ((tmp_10_fu_720_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_730_p2 = ((tmp_10_fu_720_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_1020_p2 = ((tmp_11_fu_1010_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_1036_p2 = ((tmp_12_fu_1026_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_1341_p2 = ((tmp_13_fu_1331_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_1357_p2 = ((tmp_14_fu_1347_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_1662_p2 = ((tmp_15_fu_1652_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_1678_p2 = ((tmp_16_fu_1668_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_1983_p2 = ((tmp_17_fu_1973_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_1999_p2 = ((tmp_18_fu_1989_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_714_p2 = ((tmp_s_fu_704_p4 == 5'd31) ? 1'b1 : 1'b0);

assign in_V1_fu_540_p4 = {{in_V[31:1]}};

assign or_ln340_10_fu_1465_p2 = (xor_ln785_7_fu_1423_p2 | and_ln786_2_fu_1435_p2);

assign or_ln340_11_fu_1792_p2 = (or_ln340_12_fu_1786_p2 | and_ln781_3_fu_1726_p2);

assign or_ln340_12_fu_1786_p2 = (xor_ln785_8_fu_1744_p2 | and_ln786_3_fu_1756_p2);

assign or_ln340_13_fu_2113_p2 = (or_ln340_14_fu_2107_p2 | and_ln781_4_fu_2047_p2);

assign or_ln340_14_fu_2107_p2 = (xor_ln785_9_fu_2065_p2 | and_ln786_4_fu_2077_p2);

assign or_ln340_1_fu_844_p2 = (or_ln340_2_fu_838_p2 | and_ln781_fu_778_p2);

assign or_ln340_2_fu_838_p2 = (xor_ln785_1_fu_796_p2 | and_ln786_fu_808_p2);

assign or_ln340_3_fu_1780_p2 = (and_ln786_8_fu_1774_p2 | and_ln785_3_fu_1750_p2);

assign or_ln340_4_fu_2101_p2 = (and_ln786_9_fu_2095_p2 | and_ln785_4_fu_2071_p2);

assign or_ln340_5_fu_1138_p2 = (and_ln786_6_fu_1132_p2 | and_ln785_1_fu_1108_p2);

assign or_ln340_6_fu_1150_p2 = (or_ln340_7_fu_1144_p2 | and_ln781_1_fu_1084_p2);

assign or_ln340_7_fu_1144_p2 = (xor_ln785_6_fu_1102_p2 | and_ln786_1_fu_1114_p2);

assign or_ln340_8_fu_1459_p2 = (and_ln786_7_fu_1453_p2 | and_ln785_2_fu_1429_p2);

assign or_ln340_9_fu_1471_p2 = (or_ln340_10_fu_1465_p2 | and_ln781_2_fu_1405_p2);

assign or_ln340_fu_832_p2 = (and_ln786_5_fu_826_p2 | and_ln785_fu_802_p2);

assign or_ln785_1_fu_1096_p2 = (xor_ln785_5_fu_1090_p2 | tmp_29_fu_1002_p3);

assign or_ln785_2_fu_1417_p2 = (xor_ln785_2_fu_1411_p2 | tmp_35_fu_1323_p3);

assign or_ln785_3_fu_1738_p2 = (xor_ln785_3_fu_1732_p2 | tmp_41_fu_1644_p3);

assign or_ln785_4_fu_2059_p2 = (xor_ln785_4_fu_2053_p2 | tmp_47_fu_1965_p3);

assign or_ln785_fu_790_p2 = (xor_ln785_fu_784_p2 | tmp_23_fu_696_p3);

assign or_ln786_1_fu_1120_p2 = (and_ln786_1_fu_1114_p2 | and_ln781_1_fu_1084_p2);

assign or_ln786_2_fu_1441_p2 = (and_ln786_2_fu_1435_p2 | and_ln781_2_fu_1405_p2);

assign or_ln786_3_fu_1762_p2 = (and_ln786_3_fu_1756_p2 | and_ln781_3_fu_1726_p2);

assign or_ln786_4_fu_2083_p2 = (and_ln786_4_fu_2077_p2 | and_ln781_4_fu_2047_p2);

assign or_ln786_fu_814_p2 = (and_ln786_fu_808_p2 | and_ln781_fu_778_p2);

assign p_cast27_fu_595_p1 = weight_V3_reg_2205;

assign p_cast28_fu_592_p1 = bias_V5_reg_2199;

assign p_cast29_fu_583_p1 = out_V7_reg_2193;

assign select_ln340_1_fu_1156_p3 = ((or_ln340_5_fu_1138_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_1_fu_976_p2);

assign select_ln340_2_fu_1477_p3 = ((or_ln340_8_fu_1459_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_2_fu_1297_p2);

assign select_ln340_3_fu_1798_p3 = ((or_ln340_3_fu_1780_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_3_fu_1618_p2);

assign select_ln340_4_fu_2119_p3 = ((or_ln340_4_fu_2101_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_4_fu_1939_p2);

assign select_ln340_5_fu_866_p3 = ((or_ln340_1_fu_844_p2[0:0] === 1'b1) ? select_ln340_fu_850_p3 : select_ln388_fu_858_p3);

assign select_ln340_6_fu_1172_p3 = ((or_ln340_6_fu_1150_p2[0:0] === 1'b1) ? select_ln340_1_fu_1156_p3 : select_ln388_1_fu_1164_p3);

assign select_ln340_7_fu_1493_p3 = ((or_ln340_9_fu_1471_p2[0:0] === 1'b1) ? select_ln340_2_fu_1477_p3 : select_ln388_2_fu_1485_p3);

assign select_ln340_8_fu_1814_p3 = ((or_ln340_11_fu_1792_p2[0:0] === 1'b1) ? select_ln340_3_fu_1798_p3 : select_ln388_3_fu_1806_p3);

assign select_ln340_9_fu_2135_p3 = ((or_ln340_13_fu_2113_p2[0:0] === 1'b1) ? select_ln340_4_fu_2119_p3 : select_ln388_4_fu_2127_p3);

assign select_ln340_fu_850_p3 = ((or_ln340_fu_832_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_fu_670_p2);

assign select_ln388_1_fu_1164_p3 = ((and_ln786_6_fu_1132_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_1_fu_976_p2);

assign select_ln388_2_fu_1485_p3 = ((and_ln786_7_fu_1453_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_2_fu_1297_p2);

assign select_ln388_3_fu_1806_p3 = ((and_ln786_8_fu_1774_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_3_fu_1618_p2);

assign select_ln388_4_fu_2127_p3 = ((and_ln786_9_fu_2095_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_4_fu_1939_p2);

assign select_ln388_fu_858_p3 = ((and_ln786_5_fu_826_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_fu_670_p2);

assign select_ln416_1_fu_1076_p3 = ((and_ln416_1_fu_996_p2[0:0] === 1'b1) ? and_ln779_1_fu_1070_p2 : icmp_ln879_3_fu_1036_p2);

assign select_ln416_2_fu_1397_p3 = ((and_ln416_2_fu_1317_p2[0:0] === 1'b1) ? and_ln779_2_fu_1391_p2 : icmp_ln879_5_fu_1357_p2);

assign select_ln416_3_fu_1718_p3 = ((and_ln416_3_fu_1638_p2[0:0] === 1'b1) ? and_ln779_3_fu_1712_p2 : icmp_ln879_7_fu_1678_p2);

assign select_ln416_4_fu_2039_p3 = ((and_ln416_4_fu_1959_p2[0:0] === 1'b1) ? and_ln779_4_fu_2033_p2 : icmp_ln879_9_fu_1999_p2);

assign select_ln416_fu_770_p3 = ((and_ln416_fu_690_p2[0:0] === 1'b1) ? and_ln779_fu_764_p2 : icmp_ln879_1_fu_730_p2);

assign select_ln777_1_fu_1048_p3 = ((and_ln416_1_fu_996_p2[0:0] === 1'b1) ? icmp_ln879_3_fu_1036_p2 : icmp_ln768_1_fu_1042_p2);

assign select_ln777_2_fu_1369_p3 = ((and_ln416_2_fu_1317_p2[0:0] === 1'b1) ? icmp_ln879_5_fu_1357_p2 : icmp_ln768_2_fu_1363_p2);

assign select_ln777_3_fu_1690_p3 = ((and_ln416_3_fu_1638_p2[0:0] === 1'b1) ? icmp_ln879_7_fu_1678_p2 : icmp_ln768_3_fu_1684_p2);

assign select_ln777_4_fu_2011_p3 = ((and_ln416_4_fu_1959_p2[0:0] === 1'b1) ? icmp_ln879_9_fu_1999_p2 : icmp_ln768_4_fu_2005_p2);

assign select_ln777_fu_742_p3 = ((and_ln416_fu_690_p2[0:0] === 1'b1) ? icmp_ln879_1_fu_730_p2 : icmp_ln768_fu_736_p2);

assign sext_ln728_1_fu_938_p1 = $signed(shl_ln728_1_fu_930_p3);

assign sext_ln728_2_fu_1259_p1 = $signed(shl_ln728_2_fu_1251_p3);

assign sext_ln728_3_fu_1580_p1 = $signed(shl_ln728_3_fu_1572_p3);

assign sext_ln728_4_fu_1901_p1 = $signed(shl_ln728_4_fu_1893_p3);

assign sext_ln728_fu_632_p1 = $signed(shl_ln_fu_624_p3);

assign shl_ln728_1_fu_930_p3 = {{p_Val2_1_reg_418}, {10'd0}};

assign shl_ln728_2_fu_1251_p3 = {{p_Val2_2_reg_440}, {10'd0}};

assign shl_ln728_3_fu_1572_p3 = {{p_Val2_3_reg_462}, {10'd0}};

assign shl_ln728_4_fu_1893_p3 = {{p_Val2_4_reg_484}, {10'd0}};

assign shl_ln_fu_624_p3 = {{p_Val2_0_reg_396}, {10'd0}};

assign tmp_10_fu_720_p4 = {{add_ln1192_fu_636_p2[31:26]}};

assign tmp_11_fu_1010_p4 = {{add_ln1192_1_fu_942_p2[31:27]}};

assign tmp_12_fu_1026_p4 = {{add_ln1192_1_fu_942_p2[31:26]}};

assign tmp_13_fu_1331_p4 = {{add_ln1192_2_fu_1263_p2[31:27]}};

assign tmp_14_fu_1347_p4 = {{add_ln1192_2_fu_1263_p2[31:26]}};

assign tmp_15_fu_1652_p4 = {{add_ln1192_3_fu_1584_p2[31:27]}};

assign tmp_16_fu_1668_p4 = {{add_ln1192_3_fu_1584_p2[31:26]}};

assign tmp_17_fu_1973_p4 = {{add_ln1192_4_fu_1905_p2[31:27]}};

assign tmp_18_fu_1989_p4 = {{add_ln1192_4_fu_1905_p2[31:26]}};

assign tmp_19_fu_641_p3 = add_ln1192_fu_636_p2[32'd31];

assign tmp_20_fu_659_p3 = add_ln1192_fu_636_p2[32'd25];

assign tmp_22_fu_676_p3 = add_ln415_fu_670_p2[32'd15];

assign tmp_23_fu_696_p3 = add_ln415_fu_670_p2[32'd15];

assign tmp_24_fu_750_p3 = add_ln1192_fu_636_p2[32'd26];

assign tmp_25_fu_947_p3 = add_ln1192_1_fu_942_p2[32'd31];

assign tmp_26_fu_965_p3 = add_ln1192_1_fu_942_p2[32'd25];

assign tmp_28_fu_982_p3 = add_ln415_1_fu_976_p2[32'd15];

assign tmp_29_fu_1002_p3 = add_ln415_1_fu_976_p2[32'd15];

assign tmp_30_fu_1056_p3 = add_ln1192_1_fu_942_p2[32'd26];

assign tmp_31_fu_1268_p3 = add_ln1192_2_fu_1263_p2[32'd31];

assign tmp_32_fu_1286_p3 = add_ln1192_2_fu_1263_p2[32'd25];

assign tmp_34_fu_1303_p3 = add_ln415_2_fu_1297_p2[32'd15];

assign tmp_35_fu_1323_p3 = add_ln415_2_fu_1297_p2[32'd15];

assign tmp_36_fu_1377_p3 = add_ln1192_2_fu_1263_p2[32'd26];

assign tmp_37_fu_1589_p3 = add_ln1192_3_fu_1584_p2[32'd31];

assign tmp_38_fu_1607_p3 = add_ln1192_3_fu_1584_p2[32'd25];

assign tmp_40_fu_1624_p3 = add_ln415_3_fu_1618_p2[32'd15];

assign tmp_41_fu_1644_p3 = add_ln415_3_fu_1618_p2[32'd15];

assign tmp_42_fu_1698_p3 = add_ln1192_3_fu_1584_p2[32'd26];

assign tmp_43_fu_1910_p3 = add_ln1192_4_fu_1905_p2[32'd31];

assign tmp_44_fu_1928_p3 = add_ln1192_4_fu_1905_p2[32'd25];

assign tmp_46_fu_1945_p3 = add_ln415_4_fu_1939_p2[32'd15];

assign tmp_47_fu_1965_p3 = add_ln415_4_fu_1939_p2[32'd15];

assign tmp_48_fu_2019_p3 = add_ln1192_4_fu_1905_p2[32'd26];

assign tmp_s_fu_704_p4 = {{add_ln1192_fu_636_p2[31:27]}};

assign trunc_ln1_fu_649_p4 = {{add_ln1192_fu_636_p2[25:10]}};

assign trunc_ln708_1_fu_955_p4 = {{add_ln1192_1_fu_942_p2[25:10]}};

assign trunc_ln708_2_fu_1276_p4 = {{add_ln1192_2_fu_1263_p2[25:10]}};

assign trunc_ln708_3_fu_1597_p4 = {{add_ln1192_3_fu_1584_p2[25:10]}};

assign trunc_ln708_4_fu_1918_p4 = {{add_ln1192_4_fu_1905_p2[25:10]}};

assign xor_ln416_1_fu_990_p2 = (tmp_28_fu_982_p3 ^ 1'd1);

assign xor_ln416_2_fu_1311_p2 = (tmp_34_fu_1303_p3 ^ 1'd1);

assign xor_ln416_3_fu_1632_p2 = (tmp_40_fu_1624_p3 ^ 1'd1);

assign xor_ln416_4_fu_1953_p2 = (tmp_46_fu_1945_p3 ^ 1'd1);

assign xor_ln416_fu_684_p2 = (tmp_22_fu_676_p3 ^ 1'd1);

assign xor_ln779_1_fu_1064_p2 = (tmp_30_fu_1056_p3 ^ 1'd1);

assign xor_ln779_2_fu_1385_p2 = (tmp_36_fu_1377_p3 ^ 1'd1);

assign xor_ln779_3_fu_1706_p2 = (tmp_42_fu_1698_p3 ^ 1'd1);

assign xor_ln779_4_fu_2027_p2 = (tmp_48_fu_2019_p3 ^ 1'd1);

assign xor_ln779_fu_758_p2 = (tmp_24_fu_750_p3 ^ 1'd1);

assign xor_ln785_1_fu_796_p2 = (tmp_19_fu_641_p3 ^ 1'd1);

assign xor_ln785_2_fu_1411_p2 = (select_ln777_2_fu_1369_p3 ^ 1'd1);

assign xor_ln785_3_fu_1732_p2 = (select_ln777_3_fu_1690_p3 ^ 1'd1);

assign xor_ln785_4_fu_2053_p2 = (select_ln777_4_fu_2011_p3 ^ 1'd1);

assign xor_ln785_5_fu_1090_p2 = (select_ln777_1_fu_1048_p3 ^ 1'd1);

assign xor_ln785_6_fu_1102_p2 = (tmp_25_fu_947_p3 ^ 1'd1);

assign xor_ln785_7_fu_1423_p2 = (tmp_31_fu_1268_p3 ^ 1'd1);

assign xor_ln785_8_fu_1744_p2 = (tmp_37_fu_1589_p3 ^ 1'd1);

assign xor_ln785_9_fu_2065_p2 = (tmp_43_fu_1910_p3 ^ 1'd1);

assign xor_ln785_fu_784_p2 = (select_ln777_fu_742_p3 ^ 1'd1);

assign xor_ln786_1_fu_1126_p2 = (or_ln786_1_fu_1120_p2 ^ 1'd1);

assign xor_ln786_2_fu_1447_p2 = (or_ln786_2_fu_1441_p2 ^ 1'd1);

assign xor_ln786_3_fu_1768_p2 = (or_ln786_3_fu_1762_p2 ^ 1'd1);

assign xor_ln786_4_fu_2089_p2 = (or_ln786_4_fu_2083_p2 ^ 1'd1);

assign xor_ln786_fu_820_p2 = (or_ln786_fu_814_p2 ^ 1'd1);

assign zext_ln1117_1_fu_1215_p1 = add_ln1117_1_fu_1210_p2;

assign zext_ln1117_2_fu_1536_p1 = add_ln1117_2_fu_1531_p2;

assign zext_ln1117_3_fu_1857_p1 = add_ln1117_3_fu_1852_p2;

assign zext_ln1117_fu_894_p1 = add_ln1117_fu_889_p2;

assign zext_ln12_1_fu_1200_p1 = add_ln12_1_fu_1195_p2;

assign zext_ln12_2_fu_1521_p1 = add_ln12_2_fu_1516_p2;

assign zext_ln12_3_fu_1842_p1 = add_ln12_3_fu_1837_p2;

assign zext_ln12_fu_879_p1 = add_ln12_fu_874_p2;

assign zext_ln203_1_fu_1506_p1 = add_ln203_1_fu_1501_p2;

assign zext_ln203_2_fu_1827_p1 = add_ln203_2_fu_1822_p2;

assign zext_ln203_3_fu_2148_p1 = add_ln203_3_fu_2143_p2;

assign zext_ln203_fu_1185_p1 = add_ln203_fu_1180_p2;

assign zext_ln415_1_fu_973_p1 = tmp_27_reg_2329;

assign zext_ln415_2_fu_1294_p1 = tmp_33_reg_2381;

assign zext_ln415_3_fu_1615_p1 = tmp_39_reg_2433;

assign zext_ln415_4_fu_1936_p1 = tmp_45_reg_2485;

assign zext_ln415_fu_667_p1 = tmp_21_reg_2283;

always @ (posedge ap_clk) begin
    IN_addr_reg_2211[31] <= 1'b0;
    p_cast29_reg_2234[31] <= 1'b0;
    OUT_addr_reg_2242[31] <= 1'b0;
    p_cast28_reg_2248[31] <= 1'b0;
    p_cast27_reg_2256[31] <= 1'b0;
end

endmodule //fc
