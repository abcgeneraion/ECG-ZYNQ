// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_back (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY,
        m_axi_out_V_AWADDR,
        m_axi_out_V_AWID,
        m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID,
        m_axi_out_V_WREADY,
        m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST,
        m_axi_out_V_WID,
        m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY,
        m_axi_out_V_ARADDR,
        m_axi_out_V_ARID,
        m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID,
        m_axi_out_V_RREADY,
        m_axi_out_V_RDATA,
        m_axi_out_V_RLAST,
        m_axi_out_V_RID,
        m_axi_out_V_RUSER,
        m_axi_out_V_RRESP,
        m_axi_out_V_BVALID,
        m_axi_out_V_BREADY,
        m_axi_out_V_BRESP,
        m_axi_out_V_BID,
        m_axi_out_V_BUSER,
        out_V_offset,
        buff_out_0_V_address0,
        buff_out_0_V_ce0,
        buff_out_0_V_q0,
        buff_out_0_V_address1,
        buff_out_0_V_ce1,
        buff_out_0_V_q1,
        buff_out_1_V_address0,
        buff_out_1_V_ce0,
        buff_out_1_V_q0,
        buff_out_1_V_address1,
        buff_out_1_V_ce1,
        buff_out_1_V_q1,
        buff_out_2_V_address0,
        buff_out_2_V_ce0,
        buff_out_2_V_q0,
        buff_out_2_V_address1,
        buff_out_2_V_ce1,
        buff_out_2_V_q1,
        buff_out_3_V_address0,
        buff_out_3_V_ce0,
        buff_out_3_V_q0,
        buff_out_3_V_address1,
        buff_out_3_V_ce1,
        buff_out_3_V_q1,
        buff_out_4_V_address0,
        buff_out_4_V_ce0,
        buff_out_4_V_q0,
        buff_out_4_V_address1,
        buff_out_4_V_ce1,
        buff_out_4_V_q1,
        buff_out_5_V_address0,
        buff_out_5_V_ce0,
        buff_out_5_V_q0,
        buff_out_5_V_address1,
        buff_out_5_V_ce1,
        buff_out_5_V_q1,
        buff_out_6_V_address0,
        buff_out_6_V_ce0,
        buff_out_6_V_q0,
        buff_out_6_V_address1,
        buff_out_6_V_ce1,
        buff_out_6_V_q1,
        buff_out_7_V_address0,
        buff_out_7_V_ce0,
        buff_out_7_V_q0,
        buff_out_7_V_address1,
        buff_out_7_V_ce1,
        buff_out_7_V_q1,
        buff_out_8_V_address0,
        buff_out_8_V_ce0,
        buff_out_8_V_q0,
        buff_out_8_V_address1,
        buff_out_8_V_ce1,
        buff_out_8_V_q1,
        buff_out_9_V_address0,
        buff_out_9_V_ce0,
        buff_out_9_V_q0,
        buff_out_9_V_address1,
        buff_out_9_V_ce1,
        buff_out_9_V_q1,
        buff_out_10_V_address0,
        buff_out_10_V_ce0,
        buff_out_10_V_q0,
        buff_out_10_V_address1,
        buff_out_10_V_ce1,
        buff_out_10_V_q1,
        buff_out_11_V_address0,
        buff_out_11_V_ce0,
        buff_out_11_V_q0,
        buff_out_11_V_address1,
        buff_out_11_V_ce1,
        buff_out_11_V_q1,
        buff_out_12_V_address0,
        buff_out_12_V_ce0,
        buff_out_12_V_q0,
        buff_out_12_V_address1,
        buff_out_12_V_ce1,
        buff_out_12_V_q1,
        buff_out_13_V_address0,
        buff_out_13_V_ce0,
        buff_out_13_V_q0,
        buff_out_13_V_address1,
        buff_out_13_V_ce1,
        buff_out_13_V_q1,
        buff_out_14_V_address0,
        buff_out_14_V_ce0,
        buff_out_14_V_q0,
        buff_out_14_V_address1,
        buff_out_14_V_ce1,
        buff_out_14_V_q1,
        buff_out_15_V_address0,
        buff_out_15_V_ce0,
        buff_out_15_V_q0,
        buff_out_15_V_address1,
        buff_out_15_V_ce1,
        buff_out_15_V_q1,
        m,
        p,
        size,
        ch_out,
        pool
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_state13 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state24 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_out_V_AWVALID;
input   m_axi_out_V_AWREADY;
output  [31:0] m_axi_out_V_AWADDR;
output  [0:0] m_axi_out_V_AWID;
output  [31:0] m_axi_out_V_AWLEN;
output  [2:0] m_axi_out_V_AWSIZE;
output  [1:0] m_axi_out_V_AWBURST;
output  [1:0] m_axi_out_V_AWLOCK;
output  [3:0] m_axi_out_V_AWCACHE;
output  [2:0] m_axi_out_V_AWPROT;
output  [3:0] m_axi_out_V_AWQOS;
output  [3:0] m_axi_out_V_AWREGION;
output  [0:0] m_axi_out_V_AWUSER;
output   m_axi_out_V_WVALID;
input   m_axi_out_V_WREADY;
output  [15:0] m_axi_out_V_WDATA;
output  [1:0] m_axi_out_V_WSTRB;
output   m_axi_out_V_WLAST;
output  [0:0] m_axi_out_V_WID;
output  [0:0] m_axi_out_V_WUSER;
output   m_axi_out_V_ARVALID;
input   m_axi_out_V_ARREADY;
output  [31:0] m_axi_out_V_ARADDR;
output  [0:0] m_axi_out_V_ARID;
output  [31:0] m_axi_out_V_ARLEN;
output  [2:0] m_axi_out_V_ARSIZE;
output  [1:0] m_axi_out_V_ARBURST;
output  [1:0] m_axi_out_V_ARLOCK;
output  [3:0] m_axi_out_V_ARCACHE;
output  [2:0] m_axi_out_V_ARPROT;
output  [3:0] m_axi_out_V_ARQOS;
output  [3:0] m_axi_out_V_ARREGION;
output  [0:0] m_axi_out_V_ARUSER;
input   m_axi_out_V_RVALID;
output   m_axi_out_V_RREADY;
input  [15:0] m_axi_out_V_RDATA;
input   m_axi_out_V_RLAST;
input  [0:0] m_axi_out_V_RID;
input  [0:0] m_axi_out_V_RUSER;
input  [1:0] m_axi_out_V_RRESP;
input   m_axi_out_V_BVALID;
output   m_axi_out_V_BREADY;
input  [1:0] m_axi_out_V_BRESP;
input  [0:0] m_axi_out_V_BID;
input  [0:0] m_axi_out_V_BUSER;
input  [30:0] out_V_offset;
output  [7:0] buff_out_0_V_address0;
output   buff_out_0_V_ce0;
input  [15:0] buff_out_0_V_q0;
output  [7:0] buff_out_0_V_address1;
output   buff_out_0_V_ce1;
input  [15:0] buff_out_0_V_q1;
output  [7:0] buff_out_1_V_address0;
output   buff_out_1_V_ce0;
input  [15:0] buff_out_1_V_q0;
output  [7:0] buff_out_1_V_address1;
output   buff_out_1_V_ce1;
input  [15:0] buff_out_1_V_q1;
output  [7:0] buff_out_2_V_address0;
output   buff_out_2_V_ce0;
input  [15:0] buff_out_2_V_q0;
output  [7:0] buff_out_2_V_address1;
output   buff_out_2_V_ce1;
input  [15:0] buff_out_2_V_q1;
output  [7:0] buff_out_3_V_address0;
output   buff_out_3_V_ce0;
input  [15:0] buff_out_3_V_q0;
output  [7:0] buff_out_3_V_address1;
output   buff_out_3_V_ce1;
input  [15:0] buff_out_3_V_q1;
output  [7:0] buff_out_4_V_address0;
output   buff_out_4_V_ce0;
input  [15:0] buff_out_4_V_q0;
output  [7:0] buff_out_4_V_address1;
output   buff_out_4_V_ce1;
input  [15:0] buff_out_4_V_q1;
output  [7:0] buff_out_5_V_address0;
output   buff_out_5_V_ce0;
input  [15:0] buff_out_5_V_q0;
output  [7:0] buff_out_5_V_address1;
output   buff_out_5_V_ce1;
input  [15:0] buff_out_5_V_q1;
output  [7:0] buff_out_6_V_address0;
output   buff_out_6_V_ce0;
input  [15:0] buff_out_6_V_q0;
output  [7:0] buff_out_6_V_address1;
output   buff_out_6_V_ce1;
input  [15:0] buff_out_6_V_q1;
output  [7:0] buff_out_7_V_address0;
output   buff_out_7_V_ce0;
input  [15:0] buff_out_7_V_q0;
output  [7:0] buff_out_7_V_address1;
output   buff_out_7_V_ce1;
input  [15:0] buff_out_7_V_q1;
output  [7:0] buff_out_8_V_address0;
output   buff_out_8_V_ce0;
input  [15:0] buff_out_8_V_q0;
output  [7:0] buff_out_8_V_address1;
output   buff_out_8_V_ce1;
input  [15:0] buff_out_8_V_q1;
output  [7:0] buff_out_9_V_address0;
output   buff_out_9_V_ce0;
input  [15:0] buff_out_9_V_q0;
output  [7:0] buff_out_9_V_address1;
output   buff_out_9_V_ce1;
input  [15:0] buff_out_9_V_q1;
output  [7:0] buff_out_10_V_address0;
output   buff_out_10_V_ce0;
input  [15:0] buff_out_10_V_q0;
output  [7:0] buff_out_10_V_address1;
output   buff_out_10_V_ce1;
input  [15:0] buff_out_10_V_q1;
output  [7:0] buff_out_11_V_address0;
output   buff_out_11_V_ce0;
input  [15:0] buff_out_11_V_q0;
output  [7:0] buff_out_11_V_address1;
output   buff_out_11_V_ce1;
input  [15:0] buff_out_11_V_q1;
output  [7:0] buff_out_12_V_address0;
output   buff_out_12_V_ce0;
input  [15:0] buff_out_12_V_q0;
output  [7:0] buff_out_12_V_address1;
output   buff_out_12_V_ce1;
input  [15:0] buff_out_12_V_q1;
output  [7:0] buff_out_13_V_address0;
output   buff_out_13_V_ce0;
input  [15:0] buff_out_13_V_q0;
output  [7:0] buff_out_13_V_address1;
output   buff_out_13_V_ce1;
input  [15:0] buff_out_13_V_q1;
output  [7:0] buff_out_14_V_address0;
output   buff_out_14_V_ce0;
input  [15:0] buff_out_14_V_q0;
output  [7:0] buff_out_14_V_address1;
output   buff_out_14_V_ce1;
input  [15:0] buff_out_14_V_q1;
output  [7:0] buff_out_15_V_address0;
output   buff_out_15_V_ce0;
input  [15:0] buff_out_15_V_q0;
output  [7:0] buff_out_15_V_address1;
output   buff_out_15_V_ce1;
input  [15:0] buff_out_15_V_q1;
input  [31:0] m;
input  [31:0] p;
input  [31:0] size;
input  [31:0] ch_out;
input  [31:0] pool;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_out_V_AWVALID;
reg[31:0] m_axi_out_V_AWADDR;
reg m_axi_out_V_WVALID;
reg[15:0] m_axi_out_V_WDATA;
reg m_axi_out_V_BREADY;
reg[7:0] buff_out_0_V_address0;
reg buff_out_0_V_ce0;
reg[7:0] buff_out_0_V_address1;
reg buff_out_0_V_ce1;
reg[7:0] buff_out_1_V_address0;
reg buff_out_1_V_ce0;
reg[7:0] buff_out_1_V_address1;
reg buff_out_1_V_ce1;
reg[7:0] buff_out_2_V_address0;
reg buff_out_2_V_ce0;
reg[7:0] buff_out_2_V_address1;
reg buff_out_2_V_ce1;
reg[7:0] buff_out_3_V_address0;
reg buff_out_3_V_ce0;
reg[7:0] buff_out_3_V_address1;
reg buff_out_3_V_ce1;
reg[7:0] buff_out_4_V_address0;
reg buff_out_4_V_ce0;
reg[7:0] buff_out_4_V_address1;
reg buff_out_4_V_ce1;
reg[7:0] buff_out_5_V_address0;
reg buff_out_5_V_ce0;
reg[7:0] buff_out_5_V_address1;
reg buff_out_5_V_ce1;
reg[7:0] buff_out_6_V_address0;
reg buff_out_6_V_ce0;
reg[7:0] buff_out_6_V_address1;
reg buff_out_6_V_ce1;
reg[7:0] buff_out_7_V_address0;
reg buff_out_7_V_ce0;
reg[7:0] buff_out_7_V_address1;
reg buff_out_7_V_ce1;
reg[7:0] buff_out_8_V_address0;
reg buff_out_8_V_ce0;
reg[7:0] buff_out_8_V_address1;
reg buff_out_8_V_ce1;
reg[7:0] buff_out_9_V_address0;
reg buff_out_9_V_ce0;
reg[7:0] buff_out_9_V_address1;
reg buff_out_9_V_ce1;
reg[7:0] buff_out_10_V_address0;
reg buff_out_10_V_ce0;
reg[7:0] buff_out_10_V_address1;
reg buff_out_10_V_ce1;
reg[7:0] buff_out_11_V_address0;
reg buff_out_11_V_ce0;
reg[7:0] buff_out_11_V_address1;
reg buff_out_11_V_ce1;
reg[7:0] buff_out_12_V_address0;
reg buff_out_12_V_ce0;
reg[7:0] buff_out_12_V_address1;
reg buff_out_12_V_ce1;
reg[7:0] buff_out_13_V_address0;
reg buff_out_13_V_ce0;
reg[7:0] buff_out_13_V_address1;
reg buff_out_13_V_ce1;
reg[7:0] buff_out_14_V_address0;
reg buff_out_14_V_ce0;
reg[7:0] buff_out_14_V_address1;
reg buff_out_14_V_ce1;
reg[7:0] buff_out_15_V_address0;
reg buff_out_15_V_ce0;
reg[7:0] buff_out_15_V_address1;
reg buff_out_15_V_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_V_blk_n_AW;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp1_stage0;
reg   [0:0] or_ln66_reg_2222;
reg    out_V_blk_n_W;
reg    ap_enable_reg_pp1_iter4;
reg   [0:0] or_ln66_reg_2222_pp1_iter3_reg;
reg    out_V_blk_n_B;
reg    ap_enable_reg_pp1_iter9;
reg   [0:0] or_ln66_reg_2222_pp1_iter8_reg;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] or_ln80_reg_2152;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] or_ln80_reg_2152_pp0_iter4_reg;
reg   [10:0] indvar_flatten6_reg_866;
reg   [4:0] mm1_0_reg_878;
reg   [6:0] pp2_0_reg_890;
reg   [11:0] indvar_flatten_reg_901;
reg   [4:0] mm_0_reg_912;
reg   [7:0] pp_0_reg_923;
wire   [0:0] icmp_ln61_fu_971_p2;
wire   [31:0] select_ln80_fu_1025_p3;
reg   [31:0] select_ln80_reg_1787;
wire   [31:0] select_ln80_1_fu_1081_p3;
reg   [31:0] select_ln80_1_reg_1792;
wire   [33:0] zext_ln73_2_fu_1089_p1;
reg   [33:0] zext_ln73_2_reg_1797;
wire   [33:0] zext_ln62_2_fu_1093_p1;
reg   [33:0] zext_ln62_2_reg_1802;
wire  signed [31:0] add_ln80_fu_1101_p2;
reg  signed [31:0] add_ln80_reg_1807;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
reg    ap_block_state12_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln73_fu_1106_p2;
reg   [0:0] icmp_ln73_reg_1813;
reg   [0:0] icmp_ln73_reg_1813_pp0_iter1_reg;
wire   [0:0] icmp_ln74_fu_1112_p2;
reg   [0:0] icmp_ln74_reg_1817;
reg   [0:0] icmp_ln74_reg_1817_pp0_iter1_reg;
wire   [6:0] select_ln73_fu_1118_p3;
reg   [6:0] select_ln73_reg_1824;
reg   [6:0] select_ln73_reg_1824_pp0_iter1_reg;
wire   [7:0] shl_ln_fu_1126_p3;
reg   [7:0] shl_ln_reg_1830;
wire   [7:0] or_ln77_fu_1154_p2;
reg   [7:0] or_ln77_reg_1915;
wire   [31:0] mul_ln81_fu_1180_p2;
reg   [31:0] mul_ln81_reg_2000;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
reg    ap_block_state7_io;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_state11_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] tmp_4_reg_2005;
reg   [30:0] lshr_ln81_2_reg_2010;
wire   [0:0] icmp_ln80_fu_1202_p2;
reg   [0:0] icmp_ln80_reg_2015;
wire   [10:0] add_ln73_fu_1206_p2;
reg   [10:0] add_ln73_reg_2020;
reg    ap_enable_reg_pp0_iter0;
wire  signed [31:0] add_ln80_2_fu_1222_p2;
reg  signed [31:0] add_ln80_2_reg_2025;
wire   [4:0] select_ln73_2_fu_1227_p3;
reg   [4:0] select_ln73_2_reg_2030;
wire   [3:0] trunc_ln73_fu_1234_p1;
reg   [3:0] trunc_ln73_reg_2035;
reg   [3:0] trunc_ln73_reg_2035_pp0_iter1_reg;
wire   [0:0] icmp_ln80_1_fu_1239_p2;
reg   [0:0] icmp_ln80_1_reg_2040;
wire   [7:0] select_ln78_fu_1288_p3;
reg   [7:0] select_ln78_reg_2045;
wire   [6:0] pp_fu_1294_p2;
reg   [6:0] pp_reg_2050;
wire   [31:0] select_ln81_fu_1327_p3;
reg   [31:0] select_ln81_reg_2055;
wire   [0:0] xor_ln80_fu_1334_p2;
reg   [0:0] xor_ln80_reg_2060;
wire   [31:0] mul_ln81_1_fu_1339_p2;
reg   [31:0] mul_ln81_1_reg_2065;
wire   [0:0] or_ln80_fu_1455_p2;
reg   [0:0] or_ln80_reg_2152_pp0_iter2_reg;
reg   [0:0] or_ln80_reg_2152_pp0_iter3_reg;
reg   [31:0] out_V_addr_1_reg_2156;
wire   [14:0] max_val2_V_fu_1500_p3;
reg   [14:0] max_val2_V_reg_2162;
wire   [0:0] xor_ln66_fu_1526_p2;
reg   [0:0] xor_ln66_reg_2167;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state15_pp1_stage0_iter1;
wire    ap_block_state16_pp1_stage0_iter2;
wire    ap_block_state17_pp1_stage0_iter3;
reg    ap_block_state17_io;
wire    ap_block_state18_pp1_stage0_iter4;
reg    ap_block_state18_io;
wire    ap_block_state19_pp1_stage0_iter5;
wire    ap_block_state20_pp1_stage0_iter6;
wire    ap_block_state21_pp1_stage0_iter7;
wire    ap_block_state22_pp1_stage0_iter8;
reg    ap_block_state23_pp1_stage0_iter9;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] xor_ln66_reg_2167_pp1_iter1_reg;
wire   [0:0] icmp_ln62_fu_1532_p2;
reg   [0:0] icmp_ln62_reg_2172;
reg   [0:0] icmp_ln62_reg_2172_pp1_iter1_reg;
wire   [11:0] add_ln62_fu_1538_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln63_fu_1544_p2;
reg   [0:0] icmp_ln63_reg_2181;
reg   [0:0] icmp_ln63_reg_2181_pp1_iter1_reg;
wire   [7:0] select_ln62_fu_1550_p3;
reg   [7:0] select_ln62_reg_2186;
reg   [7:0] select_ln62_reg_2186_pp1_iter1_reg;
wire  signed [31:0] select_ln62_1_fu_1573_p3;
reg  signed [31:0] select_ln62_1_reg_2192;
wire   [0:0] icmp_ln66_1_fu_1581_p2;
reg   [0:0] icmp_ln66_1_reg_2197;
reg   [0:0] icmp_ln66_1_reg_2197_pp1_iter1_reg;
wire   [4:0] select_ln62_3_fu_1586_p3;
reg   [4:0] select_ln62_3_reg_2202;
wire   [3:0] trunc_ln62_fu_1594_p1;
reg   [3:0] trunc_ln62_reg_2207;
reg   [3:0] trunc_ln62_reg_2207_pp1_iter1_reg;
reg   [3:0] trunc_ln62_reg_2207_pp1_iter2_reg;
wire   [7:0] pp_1_fu_1598_p2;
wire   [31:0] mul_ln62_fu_1604_p2;
reg   [31:0] mul_ln62_reg_2217;
wire   [0:0] or_ln66_fu_1641_p2;
reg   [0:0] or_ln66_reg_2222_pp1_iter4_reg;
reg   [0:0] or_ln66_reg_2222_pp1_iter5_reg;
reg   [0:0] or_ln66_reg_2222_pp1_iter6_reg;
reg   [0:0] or_ln66_reg_2222_pp1_iter7_reg;
reg   [31:0] out_V_addr_reg_2306;
wire   [14:0] select_ln67_fu_1742_p3;
reg   [14:0] select_ln67_reg_2312;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter1_state4;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg   [10:0] ap_phi_mux_indvar_flatten6_phi_fu_870_p4;
reg   [4:0] ap_phi_mux_mm1_0_phi_fu_882_p4;
reg   [6:0] ap_phi_mux_pp2_0_phi_fu_894_p4;
reg   [4:0] ap_phi_mux_mm_0_phi_fu_916_p4;
wire   [63:0] zext_ln76_fu_1134_p1;
wire   [63:0] zext_ln77_fu_1160_p1;
wire   [63:0] zext_ln78_fu_1420_p1;
wire   [63:0] zext_ln67_fu_1647_p1;
wire  signed [63:0] sext_ln203_3_fu_1480_p1;
wire  signed [63:0] sext_ln203_1_fu_1685_p1;
wire   [15:0] zext_ln79_fu_1508_p1;
wire    ap_block_pp0_stage1_01001;
wire   [15:0] zext_ln67_1_fu_1750_p1;
reg    ap_block_pp1_stage0_01001;
reg   [3:0] grp_fu_934_p17;
wire   [31:0] sub_ln80_fu_985_p2;
wire   [30:0] lshr_ln80_1_fu_991_p4;
wire   [31:0] zext_ln80_fu_1001_p1;
wire   [30:0] lshr_ln80_2_fu_1011_p4;
wire   [0:0] tmp_1_fu_977_p3;
wire   [31:0] sub_ln80_1_fu_1005_p2;
wire   [31:0] zext_ln80_1_fu_1021_p1;
wire  signed [31:0] tmp_3_fu_1033_p1;
wire  signed [31:0] sub_ln80_2_fu_1041_p1;
wire   [31:0] sub_ln80_2_fu_1041_p2;
wire   [30:0] lshr_ln80_4_fu_1047_p4;
wire   [31:0] zext_ln80_2_fu_1057_p1;
wire  signed [31:0] lshr_ln80_5_fu_1067_p1;
wire   [30:0] lshr_ln80_5_fu_1067_p4;
wire   [0:0] tmp_3_fu_1033_p3;
wire   [31:0] sub_ln80_3_fu_1061_p2;
wire   [31:0] zext_ln80_3_fu_1077_p1;
wire   [31:0] zext_ln73_fu_1097_p1;
wire  signed [31:0] mul_ln81_fu_1180_p1;
wire   [4:0] add_ln73_1_fu_1212_p2;
wire   [31:0] zext_ln73_1_fu_1218_p1;
wire   [3:0] tmp2_V_fu_1244_p17;
wire   [15:0] grp_fu_934_p18;
wire   [15:0] tmp2_V_fu_1244_p18;
wire   [0:0] icmp_ln1494_fu_1282_p2;
wire   [31:0] sub_ln81_fu_1299_p2;
wire   [30:0] lshr_ln81_1_fu_1304_p4;
wire   [31:0] zext_ln81_fu_1314_p1;
wire   [31:0] sub_ln81_1_fu_1318_p2;
wire   [31:0] zext_ln81_1_fu_1324_p1;
wire  signed [31:0] mul_ln81_1_fu_1339_p0;
wire   [31:0] sub_ln81_2_fu_1350_p2;
wire   [30:0] lshr_ln81_1_mid1_fu_1355_p4;
wire   [31:0] zext_ln81_2_fu_1365_p1;
wire   [30:0] lshr_ln81_2_mid1_fu_1375_p4;
wire   [0:0] tmp_5_fu_1343_p3;
wire   [31:0] sub_ln81_3_fu_1369_p2;
wire   [31:0] zext_ln81_3_fu_1384_p1;
wire   [31:0] select_ln81_1_fu_1388_p3;
wire   [31:0] select_ln73_1_fu_1396_p3;
wire   [0:0] xor_ln80_1_fu_1406_p2;
wire   [31:0] zext_ln74_fu_1417_p1;
wire  signed [31:0] add_ln80_1_fu_1439_p2;
wire   [0:0] icmp_ln80_2_fu_1444_p2;
wire   [0:0] xor_ln80_2_fu_1449_p2;
wire   [0:0] select_ln73_3_fu_1411_p3;
wire  signed [32:0] sext_ln73_fu_1402_p1;
wire  signed [32:0] sext_ln81_fu_1461_p1;
wire   [32:0] add_ln81_fu_1465_p2;
wire  signed [33:0] sext_ln203_2_fu_1471_p1;
wire   [33:0] add_ln203_1_fu_1475_p2;
wire   [0:0] icmp_ln1494_1_fu_1494_p2;
wire   [14:0] trunc_ln79_fu_1490_p1;
wire   [31:0] zext_ln62_fu_1512_p1;
wire   [31:0] add_ln66_fu_1516_p2;
wire   [0:0] icmp_ln66_fu_1521_p2;
wire   [4:0] add_ln62_1_fu_1558_p2;
wire   [31:0] zext_ln62_1_fu_1564_p1;
wire   [31:0] add_ln66_2_fu_1568_p2;
wire  signed [31:0] mul_ln62_fu_1604_p0;
wire   [0:0] xor_ln66_1_fu_1611_p2;
wire   [31:0] zext_ln63_fu_1622_p1;
wire  signed [31:0] add_ln66_1_fu_1625_p2;
wire  signed [31:0] icmp_ln66_2_fu_1630_p1;
wire   [0:0] icmp_ln66_2_fu_1630_p2;
wire   [0:0] xor_ln66_2_fu_1635_p2;
wire   [0:0] select_ln62_2_fu_1616_p3;
wire  signed [32:0] sext_ln62_fu_1608_p1;
wire  signed [32:0] sext_ln68_fu_1666_p1;
wire   [32:0] add_ln68_fu_1670_p2;
wire  signed [33:0] sext_ln203_fu_1676_p1;
wire   [33:0] add_ln203_fu_1680_p2;
wire   [15:0] tmp_V_fu_1695_p18;
wire   [0:0] icmp_ln1494_2_fu_1736_p2;
wire   [14:0] trunc_ln67_fu_1732_p1;
wire    ap_CS_fsm_state13;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
end

conv1d_mux_164_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
conv1d_mux_164_16bkb_U630(
    .din0(buff_out_0_V_q0),
    .din1(buff_out_1_V_q0),
    .din2(buff_out_2_V_q0),
    .din3(buff_out_3_V_q0),
    .din4(buff_out_4_V_q0),
    .din5(buff_out_5_V_q0),
    .din6(buff_out_6_V_q0),
    .din7(buff_out_7_V_q0),
    .din8(buff_out_8_V_q0),
    .din9(buff_out_9_V_q0),
    .din10(buff_out_10_V_q0),
    .din11(buff_out_11_V_q0),
    .din12(buff_out_12_V_q0),
    .din13(buff_out_13_V_q0),
    .din14(buff_out_14_V_q0),
    .din15(buff_out_15_V_q0),
    .din16(grp_fu_934_p17),
    .dout(grp_fu_934_p18)
);

conv1d_mux_164_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
conv1d_mux_164_16bkb_U631(
    .din0(buff_out_0_V_q1),
    .din1(buff_out_1_V_q1),
    .din2(buff_out_2_V_q1),
    .din3(buff_out_3_V_q1),
    .din4(buff_out_4_V_q1),
    .din5(buff_out_5_V_q1),
    .din6(buff_out_6_V_q1),
    .din7(buff_out_7_V_q1),
    .din8(buff_out_8_V_q1),
    .din9(buff_out_9_V_q1),
    .din10(buff_out_10_V_q1),
    .din11(buff_out_11_V_q1),
    .din12(buff_out_12_V_q1),
    .din13(buff_out_13_V_q1),
    .din14(buff_out_14_V_q1),
    .din15(buff_out_15_V_q1),
    .din16(tmp2_V_fu_1244_p17),
    .dout(tmp2_V_fu_1244_p18)
);

conv1d_mux_164_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
conv1d_mux_164_16bkb_U632(
    .din0(buff_out_0_V_q1),
    .din1(buff_out_1_V_q1),
    .din2(buff_out_2_V_q1),
    .din3(buff_out_3_V_q1),
    .din4(buff_out_4_V_q1),
    .din5(buff_out_5_V_q1),
    .din6(buff_out_6_V_q1),
    .din7(buff_out_7_V_q1),
    .din8(buff_out_8_V_q1),
    .din9(buff_out_9_V_q1),
    .din10(buff_out_10_V_q1),
    .din11(buff_out_11_V_q1),
    .din12(buff_out_12_V_q1),
    .din13(buff_out_13_V_q1),
    .din14(buff_out_14_V_q1),
    .din15(buff_out_15_V_q1),
    .din16(trunc_ln62_reg_2207_pp1_iter2_reg),
    .dout(tmp_V_fu_1695_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln73_reg_1813 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln61_fu_971_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state4)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((icmp_ln61_fu_971_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln61_fu_971_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state14)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end else if (((icmp_ln61_fu_971_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp1_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten6_reg_866 <= add_ln73_reg_2020;
    end else if (((icmp_ln61_fu_971_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten6_reg_866 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_971_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_901 <= 12'd0;
    end else if (((icmp_ln62_fu_1532_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_901 <= add_ln62_fu_1538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mm1_0_reg_878 <= select_ln73_2_reg_2030;
    end else if (((icmp_ln61_fu_971_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mm1_0_reg_878 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_971_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mm_0_reg_912 <= 5'd0;
    end else if (((icmp_ln62_reg_2172 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mm_0_reg_912 <= select_ln62_3_reg_2202;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pp2_0_reg_890 <= pp_reg_2050;
    end else if (((icmp_ln61_fu_971_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pp2_0_reg_890 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_971_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pp_0_reg_923 <= 8'd0;
    end else if (((icmp_ln62_fu_1532_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pp_0_reg_923 <= pp_1_fu_1598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln73_reg_2020 <= add_ln73_fu_1206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln80_2_reg_2025 <= add_ln80_2_fu_1222_p2;
        select_ln78_reg_2045 <= select_ln78_fu_1288_p3;
        trunc_ln73_reg_2035 <= trunc_ln73_fu_1234_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln80_reg_1807 <= add_ln80_fu_1101_p2;
        icmp_ln73_reg_1813 <= icmp_ln73_fu_1106_p2;
        icmp_ln73_reg_1813_pp0_iter1_reg <= icmp_ln73_reg_1813;
        icmp_ln74_reg_1817_pp0_iter1_reg <= icmp_ln74_reg_1817;
        select_ln73_reg_1824_pp0_iter1_reg <= select_ln73_reg_1824;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln62_reg_2172 <= icmp_ln62_fu_1532_p2;
        icmp_ln62_reg_2172_pp1_iter1_reg <= icmp_ln62_reg_2172;
        icmp_ln63_reg_2181_pp1_iter1_reg <= icmp_ln63_reg_2181;
        icmp_ln66_1_reg_2197_pp1_iter1_reg <= icmp_ln66_1_reg_2197;
        select_ln62_reg_2186_pp1_iter1_reg <= select_ln62_reg_2186;
        trunc_ln62_reg_2207_pp1_iter1_reg <= trunc_ln62_reg_2207;
        xor_ln66_reg_2167 <= xor_ln66_fu_1526_p2;
        xor_ln66_reg_2167_pp1_iter1_reg <= xor_ln66_reg_2167;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_1532_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln63_reg_2181 <= icmp_ln63_fu_1544_p2;
        icmp_ln66_1_reg_2197 <= icmp_ln66_1_fu_1581_p2;
        select_ln62_1_reg_2192 <= select_ln62_1_fu_1573_p3;
        select_ln62_reg_2186 <= select_ln62_fu_1550_p3;
        trunc_ln62_reg_2207 <= trunc_ln62_fu_1594_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_1106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln74_reg_1817 <= icmp_ln74_fu_1112_p2;
        or_ln77_reg_1915[7 : 1] <= or_ln77_fu_1154_p2[7 : 1];
        select_ln73_reg_1824 <= select_ln73_fu_1118_p3;
        shl_ln_reg_1830[7 : 1] <= shl_ln_fu_1126_p3[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln74_reg_1817 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln80_1_reg_2040 <= icmp_ln80_1_fu_1239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1817 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln80_reg_2015 <= icmp_ln80_fu_1202_p2;
        lshr_ln81_2_reg_2010 <= {{mul_ln81_fu_1180_p2[31:1]}};
        mul_ln81_reg_2000 <= mul_ln81_fu_1180_p2;
        tmp_4_reg_2005 <= mul_ln81_fu_1180_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_val2_V_reg_2162 <= max_val2_V_fu_1500_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_2172 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mul_ln62_reg_2217 <= mul_ln62_fu_1604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln74_reg_1817 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln81_1_reg_2065 <= mul_ln81_1_fu_1339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_reg_2172_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        or_ln66_reg_2222 <= or_ln66_fu_1641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        or_ln66_reg_2222_pp1_iter3_reg <= or_ln66_reg_2222;
        or_ln66_reg_2222_pp1_iter4_reg <= or_ln66_reg_2222_pp1_iter3_reg;
        or_ln66_reg_2222_pp1_iter5_reg <= or_ln66_reg_2222_pp1_iter4_reg;
        or_ln66_reg_2222_pp1_iter6_reg <= or_ln66_reg_2222_pp1_iter5_reg;
        or_ln66_reg_2222_pp1_iter7_reg <= or_ln66_reg_2222_pp1_iter6_reg;
        or_ln66_reg_2222_pp1_iter8_reg <= or_ln66_reg_2222_pp1_iter7_reg;
        trunc_ln62_reg_2207_pp1_iter2_reg <= trunc_ln62_reg_2207_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln80_reg_2152 <= or_ln80_fu_1455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln80_reg_2152_pp0_iter2_reg <= or_ln80_reg_2152;
        or_ln80_reg_2152_pp0_iter3_reg <= or_ln80_reg_2152_pp0_iter2_reg;
        or_ln80_reg_2152_pp0_iter4_reg <= or_ln80_reg_2152_pp0_iter3_reg;
        trunc_ln73_reg_2035_pp0_iter1_reg <= trunc_ln73_reg_2035;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln80_fu_1455_p2 == 1'd0) & (icmp_ln73_reg_1813_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_V_addr_1_reg_2156 <= sext_ln203_3_fu_1480_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln66_fu_1641_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_V_addr_reg_2306 <= sext_ln203_1_fu_1685_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pp_reg_2050 <= pp_fu_1294_p2;
        select_ln73_2_reg_2030 <= select_ln73_2_fu_1227_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_1532_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln62_3_reg_2202 <= select_ln62_3_fu_1586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln66_reg_2222 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln67_reg_2312 <= select_ln67_fu_1742_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_971_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        select_ln80_1_reg_1792 <= select_ln80_1_fu_1081_p3;
        select_ln80_reg_1787 <= select_ln80_fu_1025_p3;
        zext_ln73_2_reg_1797[30 : 0] <= zext_ln73_2_fu_1089_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1817 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln81_reg_2055 <= select_ln81_fu_1327_p3;
        xor_ln80_reg_2060 <= xor_ln80_fu_1334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_971_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        zext_ln62_2_reg_1802[30 : 0] <= zext_ln62_2_fu_1093_p1[30 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln62_fu_1532_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten6_phi_fu_870_p4 = add_ln73_reg_2020;
    end else begin
        ap_phi_mux_indvar_flatten6_phi_fu_870_p4 = indvar_flatten6_reg_866;
    end
end

always @ (*) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_mm1_0_phi_fu_882_p4 = select_ln73_2_reg_2030;
    end else begin
        ap_phi_mux_mm1_0_phi_fu_882_p4 = mm1_0_reg_878;
    end
end

always @ (*) begin
    if (((icmp_ln62_reg_2172 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_mm_0_phi_fu_916_p4 = select_ln62_3_reg_2202;
    end else begin
        ap_phi_mux_mm_0_phi_fu_916_p4 = mm_0_reg_912;
    end
end

always @ (*) begin
    if (((icmp_ln73_reg_1813 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_pp2_0_phi_fu_894_p4 = pp_reg_2050;
    end else begin
        ap_phi_mux_pp2_0_phi_fu_894_p4 = pp2_0_reg_890;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_0_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_0_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_0_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_0_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_0_V_ce0 = 1'b1;
    end else begin
        buff_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_0_V_ce1 = 1'b1;
    end else begin
        buff_out_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_10_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_10_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_10_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_10_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_10_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_10_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_10_V_ce0 = 1'b1;
    end else begin
        buff_out_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_10_V_ce1 = 1'b1;
    end else begin
        buff_out_10_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_11_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_11_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_11_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_11_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_11_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_11_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_11_V_ce0 = 1'b1;
    end else begin
        buff_out_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_11_V_ce1 = 1'b1;
    end else begin
        buff_out_11_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_12_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_12_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_12_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_12_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_12_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_12_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_12_V_ce0 = 1'b1;
    end else begin
        buff_out_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_12_V_ce1 = 1'b1;
    end else begin
        buff_out_12_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_13_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_13_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_13_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_13_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_13_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_13_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_13_V_ce0 = 1'b1;
    end else begin
        buff_out_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_13_V_ce1 = 1'b1;
    end else begin
        buff_out_13_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_14_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_14_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_14_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_14_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_14_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_14_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_14_V_ce0 = 1'b1;
    end else begin
        buff_out_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_14_V_ce1 = 1'b1;
    end else begin
        buff_out_14_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_15_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_15_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_15_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_15_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_15_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_15_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_15_V_ce0 = 1'b1;
    end else begin
        buff_out_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_15_V_ce1 = 1'b1;
    end else begin
        buff_out_15_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_1_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_1_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_1_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_1_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_1_V_ce0 = 1'b1;
    end else begin
        buff_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_1_V_ce1 = 1'b1;
    end else begin
        buff_out_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_2_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_2_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_2_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_2_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_2_V_ce0 = 1'b1;
    end else begin
        buff_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_2_V_ce1 = 1'b1;
    end else begin
        buff_out_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_3_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_3_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_3_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_3_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_3_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_3_V_ce0 = 1'b1;
    end else begin
        buff_out_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_3_V_ce1 = 1'b1;
    end else begin
        buff_out_3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_4_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_4_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_4_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_4_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_4_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_4_V_ce0 = 1'b1;
    end else begin
        buff_out_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_4_V_ce1 = 1'b1;
    end else begin
        buff_out_4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_5_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_5_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_5_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_5_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_5_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_5_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_5_V_ce0 = 1'b1;
    end else begin
        buff_out_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_5_V_ce1 = 1'b1;
    end else begin
        buff_out_5_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_6_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_6_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_6_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_6_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_6_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_6_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_6_V_ce0 = 1'b1;
    end else begin
        buff_out_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_6_V_ce1 = 1'b1;
    end else begin
        buff_out_6_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_7_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_7_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_7_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_7_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_7_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_7_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_7_V_ce0 = 1'b1;
    end else begin
        buff_out_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_7_V_ce1 = 1'b1;
    end else begin
        buff_out_7_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_8_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_8_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_8_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_8_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_8_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_8_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_8_V_ce0 = 1'b1;
    end else begin
        buff_out_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_8_V_ce1 = 1'b1;
    end else begin
        buff_out_8_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buff_out_9_V_address0 = zext_ln78_fu_1420_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_9_V_address0 = zext_ln76_fu_1134_p1;
    end else begin
        buff_out_9_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        buff_out_9_V_address1 = zext_ln67_fu_1647_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_out_9_V_address1 = zext_ln77_fu_1160_p1;
    end else begin
        buff_out_9_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_9_V_ce0 = 1'b1;
    end else begin
        buff_out_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buff_out_9_V_ce1 = 1'b1;
    end else begin
        buff_out_9_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_934_p17 = trunc_ln73_reg_2035_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_934_p17 = trunc_ln73_fu_1234_p1;
    end else begin
        grp_fu_934_p17 = 'bx;
    end
end

always @ (*) begin
    if (((or_ln66_reg_2222 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        m_axi_out_V_AWADDR = out_V_addr_reg_2306;
    end else if (((or_ln80_reg_2152 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_out_V_AWADDR = out_V_addr_1_reg_2156;
    end else begin
        m_axi_out_V_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln80_reg_2152 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln66_reg_2222 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        m_axi_out_V_AWVALID = 1'b1;
    end else begin
        m_axi_out_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln80_reg_2152_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln66_reg_2222_pp1_iter8_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter9 == 1'b1)))) begin
        m_axi_out_V_BREADY = 1'b1;
    end else begin
        m_axi_out_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln66_reg_2222_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        m_axi_out_V_WDATA = zext_ln67_1_fu_1750_p1;
    end else if (((or_ln80_reg_2152 == 1'd0) & (1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_out_V_WDATA = zext_ln79_fu_1508_p1;
    end else begin
        m_axi_out_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((or_ln80_reg_2152 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((or_ln66_reg_2222_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        m_axi_out_V_WVALID = 1'b1;
    end else begin
        m_axi_out_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln80_reg_2152 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln66_reg_2222 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        out_V_blk_n_AW = m_axi_out_V_AWREADY;
    end else begin
        out_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((or_ln80_reg_2152_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((or_ln66_reg_2222_pp1_iter8_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1)))) begin
        out_V_blk_n_B = m_axi_out_V_BVALID;
    end else begin
        out_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((or_ln80_reg_2152 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((or_ln66_reg_2222_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        out_V_blk_n_W = m_axi_out_V_WREADY;
    end else begin
        out_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln61_fu_971_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln61_fu_971_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln62_fu_1532_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter8 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln62_fu_1532_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter8 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_1_fu_1475_p2 = ($signed(zext_ln73_2_reg_1797) + $signed(sext_ln203_2_fu_1471_p1));

assign add_ln203_fu_1680_p2 = ($signed(zext_ln62_2_reg_1802) + $signed(sext_ln203_fu_1676_p1));

assign add_ln62_1_fu_1558_p2 = (5'd1 + ap_phi_mux_mm_0_phi_fu_916_p4);

assign add_ln62_fu_1538_p2 = (indvar_flatten_reg_901 + 12'd1);

assign add_ln66_1_fu_1625_p2 = (p + zext_ln63_fu_1622_p1);

assign add_ln66_2_fu_1568_p2 = (m + zext_ln62_1_fu_1564_p1);

assign add_ln66_fu_1516_p2 = (zext_ln62_fu_1512_p1 + m);

assign add_ln68_fu_1670_p2 = ($signed(sext_ln62_fu_1608_p1) + $signed(sext_ln68_fu_1666_p1));

assign add_ln73_1_fu_1212_p2 = (5'd1 + mm1_0_reg_878);

assign add_ln73_fu_1206_p2 = (indvar_flatten6_reg_866 + 11'd1);

assign add_ln80_1_fu_1439_p2 = (select_ln80_reg_1787 + zext_ln74_fu_1417_p1);

assign add_ln80_2_fu_1222_p2 = (m + zext_ln73_1_fu_1218_p1);

assign add_ln80_fu_1101_p2 = (zext_ln73_fu_1097_p1 + m);

assign add_ln81_fu_1465_p2 = ($signed(sext_ln73_fu_1402_p1) + $signed(sext_ln81_fu_1461_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_ln80_reg_2152_pp0_iter4_reg == 1'd0) & (m_axi_out_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_ln80_reg_2152_pp0_iter4_reg == 1'd0) & (m_axi_out_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state7_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state7_io));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((or_ln66_reg_2222_pp1_iter8_reg == 1'd0) & (m_axi_out_V_BVALID == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((or_ln66_reg_2222_pp1_iter8_reg == 1'd0) & (m_axi_out_V_BVALID == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b1)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_block_state18_io)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_block_state17_io)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((or_ln66_reg_2222_pp1_iter8_reg == 1'd0) & (m_axi_out_V_BVALID == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b1)) | ((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_block_state18_io)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_block_state17_io)));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter5 = ((or_ln80_reg_2152_pp0_iter4_reg == 1'd0) & (m_axi_out_V_BVALID == 1'b0));
end

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((or_ln66_reg_2222 == 1'd0) & (m_axi_out_V_AWREADY == 1'b0));
end

assign ap_block_state17_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((or_ln66_reg_2222_pp1_iter3_reg == 1'd0) & (m_axi_out_V_WREADY == 1'b0));
end

assign ap_block_state18_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp1_stage0_iter9 = ((or_ln66_reg_2222_pp1_iter8_reg == 1'd0) & (m_axi_out_V_BVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((or_ln80_reg_2152 == 1'd0) & (m_axi_out_V_AWREADY == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((or_ln80_reg_2152 == 1'd0) & (m_axi_out_V_WREADY == 1'b0));
end

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln1494_1_fu_1494_p2 = (($signed(grp_fu_934_p18) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_1736_p2 = (($signed(tmp_V_fu_1695_p18) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1282_p2 = (($signed(grp_fu_934_p18) > $signed(tmp2_V_fu_1244_p18)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_971_p2 = ((pool == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_1532_p2 = ((indvar_flatten_reg_901 == 12'd2400) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_1544_p2 = ((pp_0_reg_923 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_1581_p2 = (($signed(add_ln66_2_fu_1568_p2) < $signed(ch_out)) ? 1'b1 : 1'b0);

assign icmp_ln66_2_fu_1630_p1 = size;

assign icmp_ln66_2_fu_1630_p2 = (($signed(add_ln66_1_fu_1625_p2) < $signed(icmp_ln66_2_fu_1630_p1)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1521_p2 = (($signed(add_ln66_fu_1516_p2) < $signed(ch_out)) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_1106_p2 = ((ap_phi_mux_indvar_flatten6_phi_fu_870_p4 == 11'd1200) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_1112_p2 = ((ap_phi_mux_pp2_0_phi_fu_894_p4 == 7'd75) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_1239_p2 = (($signed(add_ln80_2_fu_1222_p2) < $signed(ch_out)) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_1444_p2 = (($signed(add_ln80_1_fu_1439_p2) < $signed(select_ln80_1_reg_1792)) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1202_p2 = (($signed(add_ln80_reg_1807) < $signed(ch_out)) ? 1'b1 : 1'b0);

assign lshr_ln80_1_fu_991_p4 = {{sub_ln80_fu_985_p2[31:1]}};

assign lshr_ln80_2_fu_1011_p4 = {{p[31:1]}};

assign lshr_ln80_4_fu_1047_p4 = {{sub_ln80_2_fu_1041_p2[31:1]}};

assign lshr_ln80_5_fu_1067_p1 = size;

assign lshr_ln80_5_fu_1067_p4 = {{lshr_ln80_5_fu_1067_p1[31:1]}};

assign lshr_ln81_1_fu_1304_p4 = {{sub_ln81_fu_1299_p2[31:1]}};

assign lshr_ln81_1_mid1_fu_1355_p4 = {{sub_ln81_2_fu_1350_p2[31:1]}};

assign lshr_ln81_2_mid1_fu_1375_p4 = {{mul_ln81_1_reg_2065[31:1]}};

assign m_axi_out_V_ARADDR = 32'd0;

assign m_axi_out_V_ARBURST = 2'd0;

assign m_axi_out_V_ARCACHE = 4'd0;

assign m_axi_out_V_ARID = 1'd0;

assign m_axi_out_V_ARLEN = 32'd0;

assign m_axi_out_V_ARLOCK = 2'd0;

assign m_axi_out_V_ARPROT = 3'd0;

assign m_axi_out_V_ARQOS = 4'd0;

assign m_axi_out_V_ARREGION = 4'd0;

assign m_axi_out_V_ARSIZE = 3'd0;

assign m_axi_out_V_ARUSER = 1'd0;

assign m_axi_out_V_ARVALID = 1'b0;

assign m_axi_out_V_AWBURST = 2'd0;

assign m_axi_out_V_AWCACHE = 4'd0;

assign m_axi_out_V_AWID = 1'd0;

assign m_axi_out_V_AWLEN = 32'd1;

assign m_axi_out_V_AWLOCK = 2'd0;

assign m_axi_out_V_AWPROT = 3'd0;

assign m_axi_out_V_AWQOS = 4'd0;

assign m_axi_out_V_AWREGION = 4'd0;

assign m_axi_out_V_AWSIZE = 3'd0;

assign m_axi_out_V_AWUSER = 1'd0;

assign m_axi_out_V_RREADY = 1'b0;

assign m_axi_out_V_WID = 1'd0;

assign m_axi_out_V_WLAST = 1'b0;

assign m_axi_out_V_WSTRB = 2'd3;

assign m_axi_out_V_WUSER = 1'd0;

assign max_val2_V_fu_1500_p3 = ((icmp_ln1494_1_fu_1494_p2[0:0] === 1'b1) ? trunc_ln79_fu_1490_p1 : 15'd0);

assign mul_ln62_fu_1604_p0 = size;

assign mul_ln62_fu_1604_p2 = ($signed(mul_ln62_fu_1604_p0) * $signed(select_ln62_1_reg_2192));

assign mul_ln81_1_fu_1339_p0 = size;

assign mul_ln81_1_fu_1339_p2 = ($signed(mul_ln81_1_fu_1339_p0) * $signed(add_ln80_2_reg_2025));

assign mul_ln81_fu_1180_p1 = size;

assign mul_ln81_fu_1180_p2 = ($signed(add_ln80_reg_1807) * $signed(mul_ln81_fu_1180_p1));

assign or_ln66_fu_1641_p2 = (xor_ln66_2_fu_1635_p2 | select_ln62_2_fu_1616_p3);

assign or_ln77_fu_1154_p2 = (shl_ln_fu_1126_p3 | 8'd1);

assign or_ln80_fu_1455_p2 = (xor_ln80_2_fu_1449_p2 | select_ln73_3_fu_1411_p3);

assign pp_1_fu_1598_p2 = (select_ln62_fu_1550_p3 + 8'd1);

assign pp_fu_1294_p2 = (select_ln73_reg_1824 + 7'd1);

assign select_ln62_1_fu_1573_p3 = ((icmp_ln63_fu_1544_p2[0:0] === 1'b1) ? add_ln66_2_fu_1568_p2 : add_ln66_fu_1516_p2);

assign select_ln62_2_fu_1616_p3 = ((icmp_ln63_reg_2181_pp1_iter1_reg[0:0] === 1'b1) ? xor_ln66_1_fu_1611_p2 : xor_ln66_reg_2167_pp1_iter1_reg);

assign select_ln62_3_fu_1586_p3 = ((icmp_ln63_fu_1544_p2[0:0] === 1'b1) ? add_ln62_1_fu_1558_p2 : ap_phi_mux_mm_0_phi_fu_916_p4);

assign select_ln62_fu_1550_p3 = ((icmp_ln63_fu_1544_p2[0:0] === 1'b1) ? 8'd0 : pp_0_reg_923);

assign select_ln67_fu_1742_p3 = ((icmp_ln1494_2_fu_1736_p2[0:0] === 1'b1) ? trunc_ln67_fu_1732_p1 : 15'd0);

assign select_ln73_1_fu_1396_p3 = ((icmp_ln74_reg_1817_pp0_iter1_reg[0:0] === 1'b1) ? select_ln81_1_fu_1388_p3 : select_ln81_reg_2055);

assign select_ln73_2_fu_1227_p3 = ((icmp_ln74_reg_1817[0:0] === 1'b1) ? add_ln73_1_fu_1212_p2 : mm1_0_reg_878);

assign select_ln73_3_fu_1411_p3 = ((icmp_ln74_reg_1817_pp0_iter1_reg[0:0] === 1'b1) ? xor_ln80_1_fu_1406_p2 : xor_ln80_reg_2060);

assign select_ln73_fu_1118_p3 = ((icmp_ln74_fu_1112_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_pp2_0_phi_fu_894_p4);

assign select_ln78_fu_1288_p3 = ((icmp_ln1494_fu_1282_p2[0:0] === 1'b1) ? shl_ln_reg_1830 : or_ln77_reg_1915);

assign select_ln80_1_fu_1081_p3 = ((tmp_3_fu_1033_p3[0:0] === 1'b1) ? sub_ln80_3_fu_1061_p2 : zext_ln80_3_fu_1077_p1);

assign select_ln80_fu_1025_p3 = ((tmp_1_fu_977_p3[0:0] === 1'b1) ? sub_ln80_1_fu_1005_p2 : zext_ln80_1_fu_1021_p1);

assign select_ln81_1_fu_1388_p3 = ((tmp_5_fu_1343_p3[0:0] === 1'b1) ? sub_ln81_3_fu_1369_p2 : zext_ln81_3_fu_1384_p1);

assign select_ln81_fu_1327_p3 = ((tmp_4_reg_2005[0:0] === 1'b1) ? sub_ln81_1_fu_1318_p2 : zext_ln81_1_fu_1324_p1);

assign sext_ln203_1_fu_1685_p1 = $signed(add_ln203_fu_1680_p2);

assign sext_ln203_2_fu_1471_p1 = $signed(add_ln81_fu_1465_p2);

assign sext_ln203_3_fu_1480_p1 = $signed(add_ln203_1_fu_1475_p2);

assign sext_ln203_fu_1676_p1 = $signed(add_ln68_fu_1670_p2);

assign sext_ln62_fu_1608_p1 = $signed(mul_ln62_reg_2217);

assign sext_ln68_fu_1666_p1 = add_ln66_1_fu_1625_p2;

assign sext_ln73_fu_1402_p1 = $signed(select_ln73_1_fu_1396_p3);

assign sext_ln81_fu_1461_p1 = add_ln80_1_fu_1439_p2;

assign shl_ln_fu_1126_p3 = {{select_ln73_fu_1118_p3}, {1'd0}};

assign sub_ln80_1_fu_1005_p2 = (32'd0 - zext_ln80_fu_1001_p1);

assign sub_ln80_2_fu_1041_p1 = size;

assign sub_ln80_2_fu_1041_p2 = ($signed(32'd0) - $signed(sub_ln80_2_fu_1041_p1));

assign sub_ln80_3_fu_1061_p2 = (32'd0 - zext_ln80_2_fu_1057_p1);

assign sub_ln80_fu_985_p2 = (32'd0 - p);

assign sub_ln81_1_fu_1318_p2 = (32'd0 - zext_ln81_fu_1314_p1);

assign sub_ln81_2_fu_1350_p2 = (32'd0 - mul_ln81_1_reg_2065);

assign sub_ln81_3_fu_1369_p2 = (32'd0 - zext_ln81_2_fu_1365_p1);

assign sub_ln81_fu_1299_p2 = (32'd0 - mul_ln81_reg_2000);

assign tmp2_V_fu_1244_p17 = select_ln73_2_fu_1227_p3[3:0];

assign tmp_1_fu_977_p3 = p[32'd31];

assign tmp_3_fu_1033_p1 = size;

assign tmp_3_fu_1033_p3 = tmp_3_fu_1033_p1[32'd31];

assign tmp_5_fu_1343_p3 = mul_ln81_1_reg_2065[32'd31];

assign trunc_ln62_fu_1594_p1 = select_ln62_3_fu_1586_p3[3:0];

assign trunc_ln67_fu_1732_p1 = tmp_V_fu_1695_p18[14:0];

assign trunc_ln73_fu_1234_p1 = select_ln73_2_fu_1227_p3[3:0];

assign trunc_ln79_fu_1490_p1 = grp_fu_934_p18[14:0];

assign xor_ln66_1_fu_1611_p2 = (icmp_ln66_1_reg_2197_pp1_iter1_reg ^ 1'd1);

assign xor_ln66_2_fu_1635_p2 = (icmp_ln66_2_fu_1630_p2 ^ 1'd1);

assign xor_ln66_fu_1526_p2 = (icmp_ln66_fu_1521_p2 ^ 1'd1);

assign xor_ln80_1_fu_1406_p2 = (icmp_ln80_1_reg_2040 ^ 1'd1);

assign xor_ln80_2_fu_1449_p2 = (icmp_ln80_2_fu_1444_p2 ^ 1'd1);

assign xor_ln80_fu_1334_p2 = (icmp_ln80_reg_2015 ^ 1'd1);

assign zext_ln62_1_fu_1564_p1 = add_ln62_1_fu_1558_p2;

assign zext_ln62_2_fu_1093_p1 = out_V_offset;

assign zext_ln62_fu_1512_p1 = ap_phi_mux_mm_0_phi_fu_916_p4;

assign zext_ln63_fu_1622_p1 = select_ln62_reg_2186_pp1_iter1_reg;

assign zext_ln67_1_fu_1750_p1 = select_ln67_reg_2312;

assign zext_ln67_fu_1647_p1 = select_ln62_reg_2186_pp1_iter1_reg;

assign zext_ln73_1_fu_1218_p1 = add_ln73_1_fu_1212_p2;

assign zext_ln73_2_fu_1089_p1 = out_V_offset;

assign zext_ln73_fu_1097_p1 = ap_phi_mux_mm1_0_phi_fu_882_p4;

assign zext_ln74_fu_1417_p1 = select_ln73_reg_1824_pp0_iter1_reg;

assign zext_ln76_fu_1134_p1 = shl_ln_fu_1126_p3;

assign zext_ln77_fu_1160_p1 = or_ln77_fu_1154_p2;

assign zext_ln78_fu_1420_p1 = select_ln78_reg_2045;

assign zext_ln79_fu_1508_p1 = max_val2_V_reg_2162;

assign zext_ln80_1_fu_1021_p1 = lshr_ln80_2_fu_1011_p4;

assign zext_ln80_2_fu_1057_p1 = lshr_ln80_4_fu_1047_p4;

assign zext_ln80_3_fu_1077_p1 = lshr_ln80_5_fu_1067_p4;

assign zext_ln80_fu_1001_p1 = lshr_ln80_1_fu_991_p4;

assign zext_ln81_1_fu_1324_p1 = lshr_ln81_2_reg_2010;

assign zext_ln81_2_fu_1365_p1 = lshr_ln81_1_mid1_fu_1355_p4;

assign zext_ln81_3_fu_1384_p1 = lshr_ln81_2_mid1_fu_1375_p4;

assign zext_ln81_fu_1314_p1 = lshr_ln81_1_fu_1304_p4;

always @ (posedge ap_clk) begin
    zext_ln73_2_reg_1797[33:31] <= 3'b000;
    zext_ln62_2_reg_1802[33:31] <= 3'b000;
    shl_ln_reg_1830[0] <= 1'b0;
    or_ln77_reg_1915[0] <= 1'b1;
end

endmodule //write_back
