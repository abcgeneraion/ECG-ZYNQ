// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_bias (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buff_out_0_V_address0,
        buff_out_0_V_ce0,
        buff_out_0_V_we0,
        buff_out_0_V_d0,
        buff_out_1_V_address0,
        buff_out_1_V_ce0,
        buff_out_1_V_we0,
        buff_out_1_V_d0,
        buff_out_2_V_address0,
        buff_out_2_V_ce0,
        buff_out_2_V_we0,
        buff_out_2_V_d0,
        buff_out_3_V_address0,
        buff_out_3_V_ce0,
        buff_out_3_V_we0,
        buff_out_3_V_d0,
        buff_out_4_V_address0,
        buff_out_4_V_ce0,
        buff_out_4_V_we0,
        buff_out_4_V_d0,
        buff_out_5_V_address0,
        buff_out_5_V_ce0,
        buff_out_5_V_we0,
        buff_out_5_V_d0,
        buff_out_6_V_address0,
        buff_out_6_V_ce0,
        buff_out_6_V_we0,
        buff_out_6_V_d0,
        buff_out_7_V_address0,
        buff_out_7_V_ce0,
        buff_out_7_V_we0,
        buff_out_7_V_d0,
        buff_out_8_V_address0,
        buff_out_8_V_ce0,
        buff_out_8_V_we0,
        buff_out_8_V_d0,
        buff_out_9_V_address0,
        buff_out_9_V_ce0,
        buff_out_9_V_we0,
        buff_out_9_V_d0,
        buff_out_10_V_address0,
        buff_out_10_V_ce0,
        buff_out_10_V_we0,
        buff_out_10_V_d0,
        buff_out_11_V_address0,
        buff_out_11_V_ce0,
        buff_out_11_V_we0,
        buff_out_11_V_d0,
        buff_out_12_V_address0,
        buff_out_12_V_ce0,
        buff_out_12_V_we0,
        buff_out_12_V_d0,
        buff_out_13_V_address0,
        buff_out_13_V_ce0,
        buff_out_13_V_we0,
        buff_out_13_V_d0,
        buff_out_14_V_address0,
        buff_out_14_V_ce0,
        buff_out_14_V_we0,
        buff_out_14_V_d0,
        buff_out_15_V_address0,
        buff_out_15_V_ce0,
        buff_out_15_V_we0,
        buff_out_15_V_d0,
        bias_buff_V_address0,
        bias_buff_V_ce0,
        bias_buff_V_q0,
        bias_buff_V16_address0,
        bias_buff_V16_ce0,
        bias_buff_V16_q0,
        bias_buff_V17_address0,
        bias_buff_V17_ce0,
        bias_buff_V17_q0,
        bias_buff_V18_address0,
        bias_buff_V18_ce0,
        bias_buff_V18_q0,
        bias_buff_V19_address0,
        bias_buff_V19_ce0,
        bias_buff_V19_q0,
        bias_buff_V20_address0,
        bias_buff_V20_ce0,
        bias_buff_V20_q0,
        bias_buff_V21_address0,
        bias_buff_V21_ce0,
        bias_buff_V21_q0,
        bias_buff_V22_address0,
        bias_buff_V22_ce0,
        bias_buff_V22_q0,
        bias_buff_V23_address0,
        bias_buff_V23_ce0,
        bias_buff_V23_q0,
        bias_buff_V24_address0,
        bias_buff_V24_ce0,
        bias_buff_V24_q0,
        bias_buff_V25_address0,
        bias_buff_V25_ce0,
        bias_buff_V25_q0,
        bias_buff_V26_address0,
        bias_buff_V26_ce0,
        bias_buff_V26_q0,
        bias_buff_V27_address0,
        bias_buff_V27_ce0,
        bias_buff_V27_q0,
        bias_buff_V28_address0,
        bias_buff_V28_ce0,
        bias_buff_V28_q0,
        bias_buff_V29_address0,
        bias_buff_V29_ce0,
        bias_buff_V29_q0,
        bias_buff_V30_address0,
        bias_buff_V30_ce0,
        bias_buff_V30_q0,
        bias_buff_V_offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] buff_out_0_V_address0;
output   buff_out_0_V_ce0;
output   buff_out_0_V_we0;
output  [15:0] buff_out_0_V_d0;
output  [7:0] buff_out_1_V_address0;
output   buff_out_1_V_ce0;
output   buff_out_1_V_we0;
output  [15:0] buff_out_1_V_d0;
output  [7:0] buff_out_2_V_address0;
output   buff_out_2_V_ce0;
output   buff_out_2_V_we0;
output  [15:0] buff_out_2_V_d0;
output  [7:0] buff_out_3_V_address0;
output   buff_out_3_V_ce0;
output   buff_out_3_V_we0;
output  [15:0] buff_out_3_V_d0;
output  [7:0] buff_out_4_V_address0;
output   buff_out_4_V_ce0;
output   buff_out_4_V_we0;
output  [15:0] buff_out_4_V_d0;
output  [7:0] buff_out_5_V_address0;
output   buff_out_5_V_ce0;
output   buff_out_5_V_we0;
output  [15:0] buff_out_5_V_d0;
output  [7:0] buff_out_6_V_address0;
output   buff_out_6_V_ce0;
output   buff_out_6_V_we0;
output  [15:0] buff_out_6_V_d0;
output  [7:0] buff_out_7_V_address0;
output   buff_out_7_V_ce0;
output   buff_out_7_V_we0;
output  [15:0] buff_out_7_V_d0;
output  [7:0] buff_out_8_V_address0;
output   buff_out_8_V_ce0;
output   buff_out_8_V_we0;
output  [15:0] buff_out_8_V_d0;
output  [7:0] buff_out_9_V_address0;
output   buff_out_9_V_ce0;
output   buff_out_9_V_we0;
output  [15:0] buff_out_9_V_d0;
output  [7:0] buff_out_10_V_address0;
output   buff_out_10_V_ce0;
output   buff_out_10_V_we0;
output  [15:0] buff_out_10_V_d0;
output  [7:0] buff_out_11_V_address0;
output   buff_out_11_V_ce0;
output   buff_out_11_V_we0;
output  [15:0] buff_out_11_V_d0;
output  [7:0] buff_out_12_V_address0;
output   buff_out_12_V_ce0;
output   buff_out_12_V_we0;
output  [15:0] buff_out_12_V_d0;
output  [7:0] buff_out_13_V_address0;
output   buff_out_13_V_ce0;
output   buff_out_13_V_we0;
output  [15:0] buff_out_13_V_d0;
output  [7:0] buff_out_14_V_address0;
output   buff_out_14_V_ce0;
output   buff_out_14_V_we0;
output  [15:0] buff_out_14_V_d0;
output  [7:0] buff_out_15_V_address0;
output   buff_out_15_V_ce0;
output   buff_out_15_V_we0;
output  [15:0] buff_out_15_V_d0;
output  [5:0] bias_buff_V_address0;
output   bias_buff_V_ce0;
input  [15:0] bias_buff_V_q0;
output  [5:0] bias_buff_V16_address0;
output   bias_buff_V16_ce0;
input  [15:0] bias_buff_V16_q0;
output  [5:0] bias_buff_V17_address0;
output   bias_buff_V17_ce0;
input  [15:0] bias_buff_V17_q0;
output  [5:0] bias_buff_V18_address0;
output   bias_buff_V18_ce0;
input  [15:0] bias_buff_V18_q0;
output  [5:0] bias_buff_V19_address0;
output   bias_buff_V19_ce0;
input  [15:0] bias_buff_V19_q0;
output  [5:0] bias_buff_V20_address0;
output   bias_buff_V20_ce0;
input  [15:0] bias_buff_V20_q0;
output  [5:0] bias_buff_V21_address0;
output   bias_buff_V21_ce0;
input  [15:0] bias_buff_V21_q0;
output  [5:0] bias_buff_V22_address0;
output   bias_buff_V22_ce0;
input  [15:0] bias_buff_V22_q0;
output  [5:0] bias_buff_V23_address0;
output   bias_buff_V23_ce0;
input  [15:0] bias_buff_V23_q0;
output  [5:0] bias_buff_V24_address0;
output   bias_buff_V24_ce0;
input  [15:0] bias_buff_V24_q0;
output  [5:0] bias_buff_V25_address0;
output   bias_buff_V25_ce0;
input  [15:0] bias_buff_V25_q0;
output  [5:0] bias_buff_V26_address0;
output   bias_buff_V26_ce0;
input  [15:0] bias_buff_V26_q0;
output  [5:0] bias_buff_V27_address0;
output   bias_buff_V27_ce0;
input  [15:0] bias_buff_V27_q0;
output  [5:0] bias_buff_V28_address0;
output   bias_buff_V28_ce0;
input  [15:0] bias_buff_V28_q0;
output  [5:0] bias_buff_V29_address0;
output   bias_buff_V29_ce0;
input  [15:0] bias_buff_V29_q0;
output  [5:0] bias_buff_V30_address0;
output   bias_buff_V30_ce0;
input  [15:0] bias_buff_V30_q0;
input  [28:0] bias_buff_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buff_out_0_V_ce0;
reg buff_out_0_V_we0;
reg buff_out_1_V_ce0;
reg buff_out_1_V_we0;
reg buff_out_2_V_ce0;
reg buff_out_2_V_we0;
reg buff_out_3_V_ce0;
reg buff_out_3_V_we0;
reg buff_out_4_V_ce0;
reg buff_out_4_V_we0;
reg buff_out_5_V_ce0;
reg buff_out_5_V_we0;
reg buff_out_6_V_ce0;
reg buff_out_6_V_we0;
reg buff_out_7_V_ce0;
reg buff_out_7_V_we0;
reg buff_out_8_V_ce0;
reg buff_out_8_V_we0;
reg buff_out_9_V_ce0;
reg buff_out_9_V_we0;
reg buff_out_10_V_ce0;
reg buff_out_10_V_we0;
reg buff_out_11_V_ce0;
reg buff_out_11_V_we0;
reg buff_out_12_V_ce0;
reg buff_out_12_V_we0;
reg buff_out_13_V_ce0;
reg buff_out_13_V_we0;
reg buff_out_14_V_ce0;
reg buff_out_14_V_we0;
reg buff_out_15_V_ce0;
reg buff_out_15_V_we0;
reg bias_buff_V_ce0;
reg bias_buff_V16_ce0;
reg bias_buff_V17_ce0;
reg bias_buff_V18_ce0;
reg bias_buff_V19_ce0;
reg bias_buff_V20_ce0;
reg bias_buff_V21_ce0;
reg bias_buff_V22_ce0;
reg bias_buff_V23_ce0;
reg bias_buff_V24_ce0;
reg bias_buff_V25_ce0;
reg bias_buff_V26_ce0;
reg bias_buff_V27_ce0;
reg bias_buff_V28_ce0;
reg bias_buff_V29_ce0;
reg bias_buff_V30_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] bias_buff_V_addr_reg_653;
reg   [5:0] bias_buff_V16_addr_reg_658;
reg   [5:0] bias_buff_V17_addr_reg_663;
reg   [5:0] bias_buff_V18_addr_reg_668;
reg   [5:0] bias_buff_V19_addr_reg_673;
reg   [5:0] bias_buff_V20_addr_reg_678;
reg   [5:0] bias_buff_V21_addr_reg_683;
reg   [5:0] bias_buff_V22_addr_reg_688;
reg   [5:0] bias_buff_V23_addr_reg_693;
reg   [5:0] bias_buff_V24_addr_reg_698;
reg   [5:0] bias_buff_V25_addr_reg_703;
reg   [5:0] bias_buff_V26_addr_reg_708;
reg   [5:0] bias_buff_V27_addr_reg_713;
reg   [5:0] bias_buff_V28_addr_reg_718;
reg   [5:0] bias_buff_V29_addr_reg_723;
reg   [5:0] bias_buff_V30_addr_reg_728;
wire   [7:0] i_fu_558_p2;
reg   [7:0] i_reg_736;
wire    ap_CS_fsm_state2;
reg   [7:0] buff_out_0_V_addr_reg_741;
wire   [0:0] icmp_ln52_fu_552_p2;
reg   [7:0] buff_out_1_V_addr_reg_746;
reg   [7:0] buff_out_2_V_addr_reg_751;
reg   [7:0] buff_out_3_V_addr_reg_756;
reg   [7:0] buff_out_4_V_addr_reg_761;
reg   [7:0] buff_out_5_V_addr_reg_766;
reg   [7:0] buff_out_6_V_addr_reg_771;
reg   [7:0] buff_out_7_V_addr_reg_776;
reg   [7:0] buff_out_8_V_addr_reg_781;
reg   [7:0] buff_out_9_V_addr_reg_786;
reg   [7:0] buff_out_10_V_addr_reg_791;
reg   [7:0] buff_out_11_V_addr_reg_796;
reg   [7:0] buff_out_12_V_addr_reg_801;
reg   [7:0] buff_out_13_V_addr_reg_806;
reg   [7:0] buff_out_14_V_addr_reg_811;
reg   [7:0] buff_out_15_V_addr_reg_816;
wire   [4:0] m_fu_590_p2;
reg   [4:0] m_reg_824;
wire    ap_CS_fsm_state3;
wire   [3:0] trunc_ln203_fu_596_p1;
reg   [3:0] trunc_ln203_reg_829;
wire   [0:0] icmp_ln53_fu_584_p2;
reg   [7:0] i_0_reg_510;
reg   [4:0] m_0_reg_521;
wire    ap_CS_fsm_state4;
wire  signed [63:0] bias_buff_V_offset_c_fu_532_p1;
wire   [63:0] zext_ln54_fu_564_p1;
wire   [15:0] tmp_fu_600_p18;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

conv1d_mux_164_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
conv1d_mux_164_16bkb_U1(
    .din0(bias_buff_V_q0),
    .din1(bias_buff_V16_q0),
    .din2(bias_buff_V17_q0),
    .din3(bias_buff_V18_q0),
    .din4(bias_buff_V19_q0),
    .din5(bias_buff_V20_q0),
    .din6(bias_buff_V21_q0),
    .din7(bias_buff_V22_q0),
    .din8(bias_buff_V23_q0),
    .din9(bias_buff_V24_q0),
    .din10(bias_buff_V25_q0),
    .din11(bias_buff_V26_q0),
    .din12(bias_buff_V27_q0),
    .din13(bias_buff_V28_q0),
    .din14(bias_buff_V29_q0),
    .din15(bias_buff_V30_q0),
    .din16(trunc_ln203_reg_829),
    .dout(tmp_fu_600_p18)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_584_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_510 <= i_reg_736;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_510 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_552_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_0_reg_521 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_0_reg_521 <= m_reg_824;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_buff_V16_addr_reg_658 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V17_addr_reg_663 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V18_addr_reg_668 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V19_addr_reg_673 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V20_addr_reg_678 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V21_addr_reg_683 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V22_addr_reg_688 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V23_addr_reg_693 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V24_addr_reg_698 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V25_addr_reg_703 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V26_addr_reg_708 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V27_addr_reg_713 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V28_addr_reg_718 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V29_addr_reg_723 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V30_addr_reg_728 <= bias_buff_V_offset_c_fu_532_p1;
        bias_buff_V_addr_reg_653 <= bias_buff_V_offset_c_fu_532_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_552_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        buff_out_0_V_addr_reg_741 <= zext_ln54_fu_564_p1;
        buff_out_10_V_addr_reg_791 <= zext_ln54_fu_564_p1;
        buff_out_11_V_addr_reg_796 <= zext_ln54_fu_564_p1;
        buff_out_12_V_addr_reg_801 <= zext_ln54_fu_564_p1;
        buff_out_13_V_addr_reg_806 <= zext_ln54_fu_564_p1;
        buff_out_14_V_addr_reg_811 <= zext_ln54_fu_564_p1;
        buff_out_15_V_addr_reg_816 <= zext_ln54_fu_564_p1;
        buff_out_1_V_addr_reg_746 <= zext_ln54_fu_564_p1;
        buff_out_2_V_addr_reg_751 <= zext_ln54_fu_564_p1;
        buff_out_3_V_addr_reg_756 <= zext_ln54_fu_564_p1;
        buff_out_4_V_addr_reg_761 <= zext_ln54_fu_564_p1;
        buff_out_5_V_addr_reg_766 <= zext_ln54_fu_564_p1;
        buff_out_6_V_addr_reg_771 <= zext_ln54_fu_564_p1;
        buff_out_7_V_addr_reg_776 <= zext_ln54_fu_564_p1;
        buff_out_8_V_addr_reg_781 <= zext_ln54_fu_564_p1;
        buff_out_9_V_addr_reg_786 <= zext_ln54_fu_564_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_736 <= i_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_reg_824 <= m_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_584_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln203_reg_829 <= trunc_ln203_fu_596_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln52_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V16_ce0 = 1'b1;
    end else begin
        bias_buff_V16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V17_ce0 = 1'b1;
    end else begin
        bias_buff_V17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V18_ce0 = 1'b1;
    end else begin
        bias_buff_V18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V19_ce0 = 1'b1;
    end else begin
        bias_buff_V19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V20_ce0 = 1'b1;
    end else begin
        bias_buff_V20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V21_ce0 = 1'b1;
    end else begin
        bias_buff_V21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V22_ce0 = 1'b1;
    end else begin
        bias_buff_V22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V23_ce0 = 1'b1;
    end else begin
        bias_buff_V23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V24_ce0 = 1'b1;
    end else begin
        bias_buff_V24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V25_ce0 = 1'b1;
    end else begin
        bias_buff_V25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V26_ce0 = 1'b1;
    end else begin
        bias_buff_V26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V27_ce0 = 1'b1;
    end else begin
        bias_buff_V27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V28_ce0 = 1'b1;
    end else begin
        bias_buff_V28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V29_ce0 = 1'b1;
    end else begin
        bias_buff_V29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V30_ce0 = 1'b1;
    end else begin
        bias_buff_V30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_buff_V_ce0 = 1'b1;
    end else begin
        bias_buff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_0_V_ce0 = 1'b1;
    end else begin
        buff_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_0_V_we0 = 1'b1;
    end else begin
        buff_out_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_10_V_ce0 = 1'b1;
    end else begin
        buff_out_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd10) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_10_V_we0 = 1'b1;
    end else begin
        buff_out_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_11_V_ce0 = 1'b1;
    end else begin
        buff_out_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd11) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_11_V_we0 = 1'b1;
    end else begin
        buff_out_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_12_V_ce0 = 1'b1;
    end else begin
        buff_out_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd12) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_12_V_we0 = 1'b1;
    end else begin
        buff_out_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_13_V_ce0 = 1'b1;
    end else begin
        buff_out_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd13) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_13_V_we0 = 1'b1;
    end else begin
        buff_out_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_14_V_ce0 = 1'b1;
    end else begin
        buff_out_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd14) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_14_V_we0 = 1'b1;
    end else begin
        buff_out_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_15_V_ce0 = 1'b1;
    end else begin
        buff_out_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd15) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_15_V_we0 = 1'b1;
    end else begin
        buff_out_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_1_V_ce0 = 1'b1;
    end else begin
        buff_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_1_V_we0 = 1'b1;
    end else begin
        buff_out_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_2_V_ce0 = 1'b1;
    end else begin
        buff_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd2) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_2_V_we0 = 1'b1;
    end else begin
        buff_out_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_3_V_ce0 = 1'b1;
    end else begin
        buff_out_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd3) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_3_V_we0 = 1'b1;
    end else begin
        buff_out_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_4_V_ce0 = 1'b1;
    end else begin
        buff_out_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd4) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_4_V_we0 = 1'b1;
    end else begin
        buff_out_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_5_V_ce0 = 1'b1;
    end else begin
        buff_out_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd5) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_5_V_we0 = 1'b1;
    end else begin
        buff_out_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_6_V_ce0 = 1'b1;
    end else begin
        buff_out_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd6) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_6_V_we0 = 1'b1;
    end else begin
        buff_out_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_7_V_ce0 = 1'b1;
    end else begin
        buff_out_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd7) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_7_V_we0 = 1'b1;
    end else begin
        buff_out_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_8_V_ce0 = 1'b1;
    end else begin
        buff_out_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd8) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_8_V_we0 = 1'b1;
    end else begin
        buff_out_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buff_out_9_V_ce0 = 1'b1;
    end else begin
        buff_out_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_reg_829 == 4'd9) & (1'b1 == ap_CS_fsm_state4))) begin
        buff_out_9_V_we0 = 1'b1;
    end else begin
        buff_out_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln52_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln53_fu_584_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign bias_buff_V16_address0 = bias_buff_V16_addr_reg_658;

assign bias_buff_V17_address0 = bias_buff_V17_addr_reg_663;

assign bias_buff_V18_address0 = bias_buff_V18_addr_reg_668;

assign bias_buff_V19_address0 = bias_buff_V19_addr_reg_673;

assign bias_buff_V20_address0 = bias_buff_V20_addr_reg_678;

assign bias_buff_V21_address0 = bias_buff_V21_addr_reg_683;

assign bias_buff_V22_address0 = bias_buff_V22_addr_reg_688;

assign bias_buff_V23_address0 = bias_buff_V23_addr_reg_693;

assign bias_buff_V24_address0 = bias_buff_V24_addr_reg_698;

assign bias_buff_V25_address0 = bias_buff_V25_addr_reg_703;

assign bias_buff_V26_address0 = bias_buff_V26_addr_reg_708;

assign bias_buff_V27_address0 = bias_buff_V27_addr_reg_713;

assign bias_buff_V28_address0 = bias_buff_V28_addr_reg_718;

assign bias_buff_V29_address0 = bias_buff_V29_addr_reg_723;

assign bias_buff_V30_address0 = bias_buff_V30_addr_reg_728;

assign bias_buff_V_address0 = bias_buff_V_addr_reg_653;

assign bias_buff_V_offset_c_fu_532_p1 = $signed(bias_buff_V_offset);

assign buff_out_0_V_address0 = buff_out_0_V_addr_reg_741;

assign buff_out_0_V_d0 = tmp_fu_600_p18;

assign buff_out_10_V_address0 = buff_out_10_V_addr_reg_791;

assign buff_out_10_V_d0 = tmp_fu_600_p18;

assign buff_out_11_V_address0 = buff_out_11_V_addr_reg_796;

assign buff_out_11_V_d0 = tmp_fu_600_p18;

assign buff_out_12_V_address0 = buff_out_12_V_addr_reg_801;

assign buff_out_12_V_d0 = tmp_fu_600_p18;

assign buff_out_13_V_address0 = buff_out_13_V_addr_reg_806;

assign buff_out_13_V_d0 = tmp_fu_600_p18;

assign buff_out_14_V_address0 = buff_out_14_V_addr_reg_811;

assign buff_out_14_V_d0 = tmp_fu_600_p18;

assign buff_out_15_V_address0 = buff_out_15_V_addr_reg_816;

assign buff_out_15_V_d0 = tmp_fu_600_p18;

assign buff_out_1_V_address0 = buff_out_1_V_addr_reg_746;

assign buff_out_1_V_d0 = tmp_fu_600_p18;

assign buff_out_2_V_address0 = buff_out_2_V_addr_reg_751;

assign buff_out_2_V_d0 = tmp_fu_600_p18;

assign buff_out_3_V_address0 = buff_out_3_V_addr_reg_756;

assign buff_out_3_V_d0 = tmp_fu_600_p18;

assign buff_out_4_V_address0 = buff_out_4_V_addr_reg_761;

assign buff_out_4_V_d0 = tmp_fu_600_p18;

assign buff_out_5_V_address0 = buff_out_5_V_addr_reg_766;

assign buff_out_5_V_d0 = tmp_fu_600_p18;

assign buff_out_6_V_address0 = buff_out_6_V_addr_reg_771;

assign buff_out_6_V_d0 = tmp_fu_600_p18;

assign buff_out_7_V_address0 = buff_out_7_V_addr_reg_776;

assign buff_out_7_V_d0 = tmp_fu_600_p18;

assign buff_out_8_V_address0 = buff_out_8_V_addr_reg_781;

assign buff_out_8_V_d0 = tmp_fu_600_p18;

assign buff_out_9_V_address0 = buff_out_9_V_addr_reg_786;

assign buff_out_9_V_d0 = tmp_fu_600_p18;

assign i_fu_558_p2 = (i_0_reg_510 + 8'd1);

assign icmp_ln52_fu_552_p2 = ((i_0_reg_510 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_584_p2 = ((m_0_reg_521 == 5'd16) ? 1'b1 : 1'b0);

assign m_fu_590_p2 = (m_0_reg_521 + 5'd1);

assign trunc_ln203_fu_596_p1 = m_0_reg_521[3:0];

assign zext_ln54_fu_564_p1 = i_0_reg_510;

endmodule //load_bias
