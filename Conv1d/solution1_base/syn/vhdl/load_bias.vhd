-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_bias is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buff_out_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_0_V_ce0 : OUT STD_LOGIC;
    buff_out_0_V_we0 : OUT STD_LOGIC;
    buff_out_0_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_1_V_ce0 : OUT STD_LOGIC;
    buff_out_1_V_we0 : OUT STD_LOGIC;
    buff_out_1_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_2_V_ce0 : OUT STD_LOGIC;
    buff_out_2_V_we0 : OUT STD_LOGIC;
    buff_out_2_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_3_V_ce0 : OUT STD_LOGIC;
    buff_out_3_V_we0 : OUT STD_LOGIC;
    buff_out_3_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_4_V_ce0 : OUT STD_LOGIC;
    buff_out_4_V_we0 : OUT STD_LOGIC;
    buff_out_4_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_5_V_ce0 : OUT STD_LOGIC;
    buff_out_5_V_we0 : OUT STD_LOGIC;
    buff_out_5_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_6_V_ce0 : OUT STD_LOGIC;
    buff_out_6_V_we0 : OUT STD_LOGIC;
    buff_out_6_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_7_V_ce0 : OUT STD_LOGIC;
    buff_out_7_V_we0 : OUT STD_LOGIC;
    buff_out_7_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_8_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_8_V_ce0 : OUT STD_LOGIC;
    buff_out_8_V_we0 : OUT STD_LOGIC;
    buff_out_8_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_9_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_9_V_ce0 : OUT STD_LOGIC;
    buff_out_9_V_we0 : OUT STD_LOGIC;
    buff_out_9_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_10_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_10_V_ce0 : OUT STD_LOGIC;
    buff_out_10_V_we0 : OUT STD_LOGIC;
    buff_out_10_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_11_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_11_V_ce0 : OUT STD_LOGIC;
    buff_out_11_V_we0 : OUT STD_LOGIC;
    buff_out_11_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_12_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_12_V_ce0 : OUT STD_LOGIC;
    buff_out_12_V_we0 : OUT STD_LOGIC;
    buff_out_12_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_13_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_13_V_ce0 : OUT STD_LOGIC;
    buff_out_13_V_we0 : OUT STD_LOGIC;
    buff_out_13_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_14_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_14_V_ce0 : OUT STD_LOGIC;
    buff_out_14_V_we0 : OUT STD_LOGIC;
    buff_out_14_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    buff_out_15_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buff_out_15_V_ce0 : OUT STD_LOGIC;
    buff_out_15_V_we0 : OUT STD_LOGIC;
    buff_out_15_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V_ce0 : OUT STD_LOGIC;
    bias_buff_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V16_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V16_ce0 : OUT STD_LOGIC;
    bias_buff_V16_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V17_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V17_ce0 : OUT STD_LOGIC;
    bias_buff_V17_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V18_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V18_ce0 : OUT STD_LOGIC;
    bias_buff_V18_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V19_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V19_ce0 : OUT STD_LOGIC;
    bias_buff_V19_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V20_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V20_ce0 : OUT STD_LOGIC;
    bias_buff_V20_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V21_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V21_ce0 : OUT STD_LOGIC;
    bias_buff_V21_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V22_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V22_ce0 : OUT STD_LOGIC;
    bias_buff_V22_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V23_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V23_ce0 : OUT STD_LOGIC;
    bias_buff_V23_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V24_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V24_ce0 : OUT STD_LOGIC;
    bias_buff_V24_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V25_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V25_ce0 : OUT STD_LOGIC;
    bias_buff_V25_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V26_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V26_ce0 : OUT STD_LOGIC;
    bias_buff_V26_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V27_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V27_ce0 : OUT STD_LOGIC;
    bias_buff_V27_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V28_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V28_ce0 : OUT STD_LOGIC;
    bias_buff_V28_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V29_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V29_ce0 : OUT STD_LOGIC;
    bias_buff_V29_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V30_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_buff_V30_ce0 : OUT STD_LOGIC;
    bias_buff_V30_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_buff_V_offset : IN STD_LOGIC_VECTOR (28 downto 0) );
end;


architecture behav of load_bias is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_buff_V_addr_reg_653 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V16_addr_reg_658 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V17_addr_reg_663 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V18_addr_reg_668 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V19_addr_reg_673 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V20_addr_reg_678 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V21_addr_reg_683 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V22_addr_reg_688 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V23_addr_reg_693 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V24_addr_reg_698 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V25_addr_reg_703 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V26_addr_reg_708 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V27_addr_reg_713 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V28_addr_reg_718 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V29_addr_reg_723 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_buff_V30_addr_reg_728 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_736 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal buff_out_0_V_addr_reg_741 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln52_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_out_1_V_addr_reg_746 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_2_V_addr_reg_751 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_3_V_addr_reg_756 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_4_V_addr_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_5_V_addr_reg_766 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_6_V_addr_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_7_V_addr_reg_776 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_8_V_addr_reg_781 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_9_V_addr_reg_786 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_10_V_addr_reg_791 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_11_V_addr_reg_796 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_12_V_addr_reg_801 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_13_V_addr_reg_806 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_14_V_addr_reg_811 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_out_15_V_addr_reg_816 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_fu_590_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_824 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln203_fu_596_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_829 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln53_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_0_reg_521 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bias_buff_V_offset_c_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_600_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component conv1d_mux_164_16bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    conv1d_mux_164_16bkb_U1 : component conv1d_mux_164_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => bias_buff_V_q0,
        din1 => bias_buff_V16_q0,
        din2 => bias_buff_V17_q0,
        din3 => bias_buff_V18_q0,
        din4 => bias_buff_V19_q0,
        din5 => bias_buff_V20_q0,
        din6 => bias_buff_V21_q0,
        din7 => bias_buff_V22_q0,
        din8 => bias_buff_V23_q0,
        din9 => bias_buff_V24_q0,
        din10 => bias_buff_V25_q0,
        din11 => bias_buff_V26_q0,
        din12 => bias_buff_V27_q0,
        din13 => bias_buff_V28_q0,
        din14 => bias_buff_V29_q0,
        din15 => bias_buff_V30_q0,
        din16 => trunc_ln203_reg_829,
        dout => tmp_fu_600_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_510 <= i_reg_736;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_510 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    m_0_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m_0_reg_521 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_0_reg_521 <= m_reg_824;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bias_buff_V16_addr_reg_658 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V17_addr_reg_663 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V18_addr_reg_668 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V19_addr_reg_673 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V20_addr_reg_678 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V21_addr_reg_683 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V22_addr_reg_688 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V23_addr_reg_693 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V24_addr_reg_698 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V25_addr_reg_703 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V26_addr_reg_708 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V27_addr_reg_713 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V28_addr_reg_718 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V29_addr_reg_723 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V30_addr_reg_728 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
                bias_buff_V_addr_reg_653 <= bias_buff_V_offset_c_fu_532_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                buff_out_0_V_addr_reg_741 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_10_V_addr_reg_791 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_11_V_addr_reg_796 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_12_V_addr_reg_801 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_13_V_addr_reg_806 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_14_V_addr_reg_811 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_15_V_addr_reg_816 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_1_V_addr_reg_746 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_2_V_addr_reg_751 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_3_V_addr_reg_756 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_4_V_addr_reg_761 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_5_V_addr_reg_766 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_6_V_addr_reg_771 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_7_V_addr_reg_776 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_8_V_addr_reg_781 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
                buff_out_9_V_addr_reg_786 <= zext_ln54_fu_564_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_736 <= i_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m_reg_824 <= m_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_584_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                trunc_ln203_reg_829 <= trunc_ln203_fu_596_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln52_fu_552_p2, ap_CS_fsm_state3, icmp_ln53_fu_584_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln52_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln53_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln52_fu_552_p2)
    begin
        if ((((icmp_ln52_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln52_fu_552_p2)
    begin
        if (((icmp_ln52_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V16_address0 <= bias_buff_V16_addr_reg_658;

    bias_buff_V16_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V16_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V17_address0 <= bias_buff_V17_addr_reg_663;

    bias_buff_V17_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V17_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V18_address0 <= bias_buff_V18_addr_reg_668;

    bias_buff_V18_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V18_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V19_address0 <= bias_buff_V19_addr_reg_673;

    bias_buff_V19_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V19_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V20_address0 <= bias_buff_V20_addr_reg_678;

    bias_buff_V20_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V20_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V21_address0 <= bias_buff_V21_addr_reg_683;

    bias_buff_V21_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V21_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V22_address0 <= bias_buff_V22_addr_reg_688;

    bias_buff_V22_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V22_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V23_address0 <= bias_buff_V23_addr_reg_693;

    bias_buff_V23_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V23_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V24_address0 <= bias_buff_V24_addr_reg_698;

    bias_buff_V24_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V24_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V25_address0 <= bias_buff_V25_addr_reg_703;

    bias_buff_V25_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V25_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V26_address0 <= bias_buff_V26_addr_reg_708;

    bias_buff_V26_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V26_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V27_address0 <= bias_buff_V27_addr_reg_713;

    bias_buff_V27_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V27_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V28_address0 <= bias_buff_V28_addr_reg_718;

    bias_buff_V28_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V28_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V29_address0 <= bias_buff_V29_addr_reg_723;

    bias_buff_V29_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V29_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V30_address0 <= bias_buff_V30_addr_reg_728;

    bias_buff_V30_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V30_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_buff_V_address0 <= bias_buff_V_addr_reg_653;

    bias_buff_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_buff_V_ce0 <= ap_const_logic_1;
        else 
            bias_buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        bias_buff_V_offset_c_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_buff_V_offset),64));

    buff_out_0_V_address0 <= buff_out_0_V_addr_reg_741;

    buff_out_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_0_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_0_V_d0 <= tmp_fu_600_p18;

    buff_out_0_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_0_V_we0 <= ap_const_logic_1;
        else 
            buff_out_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_10_V_address0 <= buff_out_10_V_addr_reg_791;

    buff_out_10_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_10_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_10_V_d0 <= tmp_fu_600_p18;

    buff_out_10_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_A) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_10_V_we0 <= ap_const_logic_1;
        else 
            buff_out_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_11_V_address0 <= buff_out_11_V_addr_reg_796;

    buff_out_11_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_11_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_11_V_d0 <= tmp_fu_600_p18;

    buff_out_11_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_11_V_we0 <= ap_const_logic_1;
        else 
            buff_out_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_12_V_address0 <= buff_out_12_V_addr_reg_801;

    buff_out_12_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_12_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_12_V_d0 <= tmp_fu_600_p18;

    buff_out_12_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_C) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_12_V_we0 <= ap_const_logic_1;
        else 
            buff_out_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_13_V_address0 <= buff_out_13_V_addr_reg_806;

    buff_out_13_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_13_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_13_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_13_V_d0 <= tmp_fu_600_p18;

    buff_out_13_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_D) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_13_V_we0 <= ap_const_logic_1;
        else 
            buff_out_13_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_14_V_address0 <= buff_out_14_V_addr_reg_811;

    buff_out_14_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_14_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_14_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_14_V_d0 <= tmp_fu_600_p18;

    buff_out_14_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_E) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_14_V_we0 <= ap_const_logic_1;
        else 
            buff_out_14_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_15_V_address0 <= buff_out_15_V_addr_reg_816;

    buff_out_15_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_15_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_15_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_15_V_d0 <= tmp_fu_600_p18;

    buff_out_15_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_F) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_15_V_we0 <= ap_const_logic_1;
        else 
            buff_out_15_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_1_V_address0 <= buff_out_1_V_addr_reg_746;

    buff_out_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_1_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_1_V_d0 <= tmp_fu_600_p18;

    buff_out_1_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_1_V_we0 <= ap_const_logic_1;
        else 
            buff_out_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_2_V_address0 <= buff_out_2_V_addr_reg_751;

    buff_out_2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_2_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_2_V_d0 <= tmp_fu_600_p18;

    buff_out_2_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_2_V_we0 <= ap_const_logic_1;
        else 
            buff_out_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_3_V_address0 <= buff_out_3_V_addr_reg_756;

    buff_out_3_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_3_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_3_V_d0 <= tmp_fu_600_p18;

    buff_out_3_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_3_V_we0 <= ap_const_logic_1;
        else 
            buff_out_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_4_V_address0 <= buff_out_4_V_addr_reg_761;

    buff_out_4_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_4_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_4_V_d0 <= tmp_fu_600_p18;

    buff_out_4_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_4_V_we0 <= ap_const_logic_1;
        else 
            buff_out_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_5_V_address0 <= buff_out_5_V_addr_reg_766;

    buff_out_5_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_5_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_5_V_d0 <= tmp_fu_600_p18;

    buff_out_5_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_5_V_we0 <= ap_const_logic_1;
        else 
            buff_out_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_6_V_address0 <= buff_out_6_V_addr_reg_771;

    buff_out_6_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_6_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_6_V_d0 <= tmp_fu_600_p18;

    buff_out_6_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_6_V_we0 <= ap_const_logic_1;
        else 
            buff_out_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_7_V_address0 <= buff_out_7_V_addr_reg_776;

    buff_out_7_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_7_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_7_V_d0 <= tmp_fu_600_p18;

    buff_out_7_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_7_V_we0 <= ap_const_logic_1;
        else 
            buff_out_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_8_V_address0 <= buff_out_8_V_addr_reg_781;

    buff_out_8_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_8_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_8_V_d0 <= tmp_fu_600_p18;

    buff_out_8_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_8_V_we0 <= ap_const_logic_1;
        else 
            buff_out_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_9_V_address0 <= buff_out_9_V_addr_reg_786;

    buff_out_9_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buff_out_9_V_ce0 <= ap_const_logic_1;
        else 
            buff_out_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_out_9_V_d0 <= tmp_fu_600_p18;

    buff_out_9_V_we0_assign_proc : process(trunc_ln203_reg_829, ap_CS_fsm_state4)
    begin
        if (((trunc_ln203_reg_829 = ap_const_lv4_9) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            buff_out_9_V_we0 <= ap_const_logic_1;
        else 
            buff_out_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_558_p2 <= std_logic_vector(unsigned(i_0_reg_510) + unsigned(ap_const_lv8_1));
    icmp_ln52_fu_552_p2 <= "1" when (i_0_reg_510 = ap_const_lv8_96) else "0";
    icmp_ln53_fu_584_p2 <= "1" when (m_0_reg_521 = ap_const_lv5_10) else "0";
    m_fu_590_p2 <= std_logic_vector(unsigned(m_0_reg_521) + unsigned(ap_const_lv5_1));
    trunc_ln203_fu_596_p1 <= m_0_reg_521(4 - 1 downto 0);
    zext_ln54_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_510),64));
end behav;
